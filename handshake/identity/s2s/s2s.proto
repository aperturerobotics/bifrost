syntax = "proto3";
package s2s;

enum PacketType {
  // INIT initializes the handshake.
  PacketType_INIT = 0;
  // INIT_ACK is the reply to the init.
  PacketType_INIT_ACK = 1;
  // COMPLETE is the completion of the handshake.
  PacketType_COMPLETE = 2;
}

// Packet is a handshake packet.
message Packet {
  // PacketType is the packet type.
  PacketType packet_type = 1;

  // InitPkt is the init packet.
  Init init_pkt = 2;
  // InitAck is the init-ack packet.
  InitAck init_ack_pkt = 3;
  // Complete is the complete packet.
  Complete complete_pkt = 4;

  message Init {
    // SenderPeerID is the peer ID of the sender.
    bytes sender_peer_id = 1;
    // ReceiverPeerID is the receiver peer ID, if known.
    // If this does not match, the public key is included in the next message.
    bytes receiver_peer_id = 2;
    // SenderEphPub is the ephemeral public key of the sender.
    bytes sender_eph_pub = 3;
  }

  message InitAck {
    // SenderEphPub is the ephemeral public key of the sender.
    // This is used to compute the shared secret and decode AckInner.
    bytes sender_eph_pub = 1;
    // Ciphertext is a Ciphertext message encoded and encrypted with the shared key.
    bytes ciphertext = 2;
  }

  message Complete {
    // Ciphertext is a Ciphertext message encoded and encrypted with the shared key.
    bytes ciphertext = 1;
  }

  message Ciphertext {
    // TupleSignature is the signature of the two ephemeral pub keys.
    // The signature is made using the sender's public key.
    // The keys are concatinated as AB
    bytes tuple_signature = 1;
    // SenderPubKey contains B's public key if necessary.
    bytes sender_pub_key = 2;
    // ReceiverKeyKnown indicates that A's public key is known.
    bool receiver_key_known = 3;
    // ExtraInfo contains extra information supplied by the transport.
    // Example: in UDP this is information about what port to dial.
    bytes extra_info = 4;
  }
}
