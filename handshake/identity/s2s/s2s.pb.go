// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/handshake/identity/s2s/s2s.proto

package s2s

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PacketType int32

const (
	// INIT initializes the handshake.
	PacketType_PacketType_INIT PacketType = 0
	// INIT_ACK is the reply to the init.
	PacketType_PacketType_INIT_ACK PacketType = 1
	// COMPLETE is the completion of the handshake.
	PacketType_PacketType_COMPLETE PacketType = 2
)

var PacketType_name = map[int32]string{
	0: "PacketType_INIT",
	1: "PacketType_INIT_ACK",
	2: "PacketType_COMPLETE",
}

var PacketType_value = map[string]int32{
	"PacketType_INIT":     0,
	"PacketType_INIT_ACK": 1,
	"PacketType_COMPLETE": 2,
}

func (x PacketType) String() string {
	return proto.EnumName(PacketType_name, int32(x))
}

func (PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0}
}

// Packet is a handshake packet.
type Packet struct {
	// PacketType is the packet type.
	PacketType PacketType `protobuf:"varint,1,opt,name=packet_type,json=packetType,proto3,enum=s2s.PacketType" json:"packet_type,omitempty"`
	// InitPkt is the init packet.
	InitPkt *Packet_Init `protobuf:"bytes,2,opt,name=init_pkt,json=initPkt,proto3" json:"init_pkt,omitempty"`
	// InitAck is the init-ack packet.
	InitAckPkt *Packet_InitAck `protobuf:"bytes,3,opt,name=init_ack_pkt,json=initAckPkt,proto3" json:"init_ack_pkt,omitempty"`
	// Complete is the complete packet.
	CompletePkt          *Packet_Complete `protobuf:"bytes,4,opt,name=complete_pkt,json=completePkt,proto3" json:"complete_pkt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0}
}

func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetPacketType() PacketType {
	if m != nil {
		return m.PacketType
	}
	return PacketType_PacketType_INIT
}

func (m *Packet) GetInitPkt() *Packet_Init {
	if m != nil {
		return m.InitPkt
	}
	return nil
}

func (m *Packet) GetInitAckPkt() *Packet_InitAck {
	if m != nil {
		return m.InitAckPkt
	}
	return nil
}

func (m *Packet) GetCompletePkt() *Packet_Complete {
	if m != nil {
		return m.CompletePkt
	}
	return nil
}

type Packet_Init struct {
	// SenderPeerID is the peer ID of the sender.
	SenderPeerId []byte `protobuf:"bytes,1,opt,name=sender_peer_id,json=senderPeerId,proto3" json:"sender_peer_id,omitempty"`
	// ReceiverPeerID is the receiver peer ID, if known.
	// If this does not match, the public key is included in the next message.
	ReceiverPeerId []byte `protobuf:"bytes,2,opt,name=receiver_peer_id,json=receiverPeerId,proto3" json:"receiver_peer_id,omitempty"`
	// SenderEphPub is the ephemeral public key of the sender.
	SenderEphPub         []byte   `protobuf:"bytes,3,opt,name=sender_eph_pub,json=senderEphPub,proto3" json:"sender_eph_pub,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet_Init) Reset()         { *m = Packet_Init{} }
func (m *Packet_Init) String() string { return proto.CompactTextString(m) }
func (*Packet_Init) ProtoMessage()    {}
func (*Packet_Init) Descriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0, 0}
}

func (m *Packet_Init) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet_Init.Unmarshal(m, b)
}
func (m *Packet_Init) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet_Init.Marshal(b, m, deterministic)
}
func (m *Packet_Init) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet_Init.Merge(m, src)
}
func (m *Packet_Init) XXX_Size() int {
	return xxx_messageInfo_Packet_Init.Size(m)
}
func (m *Packet_Init) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet_Init.DiscardUnknown(m)
}

var xxx_messageInfo_Packet_Init proto.InternalMessageInfo

func (m *Packet_Init) GetSenderPeerId() []byte {
	if m != nil {
		return m.SenderPeerId
	}
	return nil
}

func (m *Packet_Init) GetReceiverPeerId() []byte {
	if m != nil {
		return m.ReceiverPeerId
	}
	return nil
}

func (m *Packet_Init) GetSenderEphPub() []byte {
	if m != nil {
		return m.SenderEphPub
	}
	return nil
}

type Packet_InitAck struct {
	// SenderEphPub is the ephemeral public key of the sender.
	// This is used to compute the shared secret and decode AckInner.
	SenderEphPub []byte `protobuf:"bytes,1,opt,name=sender_eph_pub,json=senderEphPub,proto3" json:"sender_eph_pub,omitempty"`
	// Ciphertext is a Ciphertext message encoded and encrypted with the shared key.
	Ciphertext           []byte   `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet_InitAck) Reset()         { *m = Packet_InitAck{} }
func (m *Packet_InitAck) String() string { return proto.CompactTextString(m) }
func (*Packet_InitAck) ProtoMessage()    {}
func (*Packet_InitAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0, 1}
}

func (m *Packet_InitAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet_InitAck.Unmarshal(m, b)
}
func (m *Packet_InitAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet_InitAck.Marshal(b, m, deterministic)
}
func (m *Packet_InitAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet_InitAck.Merge(m, src)
}
func (m *Packet_InitAck) XXX_Size() int {
	return xxx_messageInfo_Packet_InitAck.Size(m)
}
func (m *Packet_InitAck) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet_InitAck.DiscardUnknown(m)
}

var xxx_messageInfo_Packet_InitAck proto.InternalMessageInfo

func (m *Packet_InitAck) GetSenderEphPub() []byte {
	if m != nil {
		return m.SenderEphPub
	}
	return nil
}

func (m *Packet_InitAck) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type Packet_Complete struct {
	// Ciphertext is a Ciphertext message encoded and encrypted with the shared key.
	Ciphertext           []byte   `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet_Complete) Reset()         { *m = Packet_Complete{} }
func (m *Packet_Complete) String() string { return proto.CompactTextString(m) }
func (*Packet_Complete) ProtoMessage()    {}
func (*Packet_Complete) Descriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0, 2}
}

func (m *Packet_Complete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet_Complete.Unmarshal(m, b)
}
func (m *Packet_Complete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet_Complete.Marshal(b, m, deterministic)
}
func (m *Packet_Complete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet_Complete.Merge(m, src)
}
func (m *Packet_Complete) XXX_Size() int {
	return xxx_messageInfo_Packet_Complete.Size(m)
}
func (m *Packet_Complete) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet_Complete.DiscardUnknown(m)
}

var xxx_messageInfo_Packet_Complete proto.InternalMessageInfo

func (m *Packet_Complete) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

type Packet_Ciphertext struct {
	// TupleSignature is the signature of the two ephemeral pub keys.
	// The signature is made using the sender's public key.
	// The keys are concatinated as AB
	TupleSignature []byte `protobuf:"bytes,1,opt,name=tuple_signature,json=tupleSignature,proto3" json:"tuple_signature,omitempty"`
	// SenderPubKey contains B's public key if necessary.
	SenderPubKey []byte `protobuf:"bytes,2,opt,name=sender_pub_key,json=senderPubKey,proto3" json:"sender_pub_key,omitempty"`
	// ReceiverKeyKnown indicates that A's public key is known.
	ReceiverKeyKnown bool `protobuf:"varint,3,opt,name=receiver_key_known,json=receiverKeyKnown,proto3" json:"receiver_key_known,omitempty"`
	// ExtraInfo contains extra information supplied by the transport.
	// Example: in UDP this is information about what port to dial KCP on.
	ExtraInfo            []byte   `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet_Ciphertext) Reset()         { *m = Packet_Ciphertext{} }
func (m *Packet_Ciphertext) String() string { return proto.CompactTextString(m) }
func (*Packet_Ciphertext) ProtoMessage()    {}
func (*Packet_Ciphertext) Descriptor() ([]byte, []int) {
	return fileDescriptor_c53050c28092d77b, []int{0, 3}
}

func (m *Packet_Ciphertext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet_Ciphertext.Unmarshal(m, b)
}
func (m *Packet_Ciphertext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet_Ciphertext.Marshal(b, m, deterministic)
}
func (m *Packet_Ciphertext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet_Ciphertext.Merge(m, src)
}
func (m *Packet_Ciphertext) XXX_Size() int {
	return xxx_messageInfo_Packet_Ciphertext.Size(m)
}
func (m *Packet_Ciphertext) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet_Ciphertext.DiscardUnknown(m)
}

var xxx_messageInfo_Packet_Ciphertext proto.InternalMessageInfo

func (m *Packet_Ciphertext) GetTupleSignature() []byte {
	if m != nil {
		return m.TupleSignature
	}
	return nil
}

func (m *Packet_Ciphertext) GetSenderPubKey() []byte {
	if m != nil {
		return m.SenderPubKey
	}
	return nil
}

func (m *Packet_Ciphertext) GetReceiverKeyKnown() bool {
	if m != nil {
		return m.ReceiverKeyKnown
	}
	return false
}

func (m *Packet_Ciphertext) GetExtraInfo() []byte {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("s2s.PacketType", PacketType_name, PacketType_value)
	proto.RegisterType((*Packet)(nil), "s2s.Packet")
	proto.RegisterType((*Packet_Init)(nil), "s2s.Packet.Init")
	proto.RegisterType((*Packet_InitAck)(nil), "s2s.Packet.InitAck")
	proto.RegisterType((*Packet_Complete)(nil), "s2s.Packet.Complete")
	proto.RegisterType((*Packet_Ciphertext)(nil), "s2s.Packet.Ciphertext")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/handshake/identity/s2s/s2s.proto", fileDescriptor_c53050c28092d77b)
}

var fileDescriptor_c53050c28092d77b = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x6b, 0xdb, 0x30,
	0x14, 0xc5, 0xe7, 0x36, 0xb4, 0xd9, 0x8d, 0x49, 0x8c, 0x32, 0x58, 0x09, 0x6c, 0x94, 0x31, 0x58,
	0xe8, 0x46, 0x3c, 0x32, 0xc6, 0x9e, 0x4b, 0x96, 0x07, 0x93, 0x6d, 0x35, 0x6e, 0xde, 0x85, 0xff,
	0xdc, 0xd4, 0x42, 0xad, 0x24, 0x64, 0x79, 0xab, 0x61, 0x1f, 0x68, 0x5f, 0x72, 0x30, 0xac, 0xd8,
	0x8e, 0x49, 0xf7, 0x60, 0xb8, 0x3a, 0x3a, 0xbf, 0x6b, 0xdf, 0xe3, 0x0b, 0x5f, 0xef, 0x98, 0xc9,
	0xcb, 0x64, 0x91, 0xca, 0x07, 0x3f, 0x56, 0xa8, 0x4d, 0xa9, 0x51, 0xcb, 0x44, 0x1a, 0x96, 0x16,
	0x7e, 0xc2, 0x76, 0x5a, 0x16, 0xc6, 0xcf, 0x63, 0x91, 0x15, 0x79, 0xcc, 0xd1, 0x67, 0x19, 0x0a,
	0xc3, 0x4c, 0xe5, 0x17, 0xcb, 0xa2, 0x7e, 0x16, 0x4a, 0x4b, 0x23, 0xc9, 0x69, 0xb1, 0x2c, 0xde,
	0xfc, 0x1d, 0xc0, 0x59, 0x18, 0xa7, 0x1c, 0x0d, 0xf9, 0x08, 0x23, 0x65, 0x2b, 0x6a, 0x2a, 0x85,
	0x17, 0xce, 0xa5, 0x33, 0x1f, 0x2f, 0x27, 0x8b, 0x1a, 0xd8, 0x3b, 0xb6, 0x95, 0xc2, 0x08, 0x54,
	0x57, 0x93, 0xf7, 0x30, 0x64, 0x82, 0x19, 0xaa, 0xb8, 0xb9, 0x38, 0xb9, 0x74, 0xe6, 0xa3, 0xa5,
	0xd7, 0xb3, 0x2f, 0x02, 0xc1, 0x4c, 0x74, 0x5e, 0x3b, 0x42, 0x6e, 0xc8, 0x67, 0x70, 0xad, 0x39,
	0x4e, 0xb9, 0x05, 0x4e, 0x2d, 0x30, 0x3d, 0x06, 0xae, 0x53, 0x1e, 0x01, 0xdb, 0x17, 0x35, 0xf6,
	0x05, 0xdc, 0x54, 0x3e, 0xa8, 0x7b, 0x34, 0x68, 0xb1, 0x81, 0xc5, 0x5e, 0xf4, 0xb1, 0x55, 0x73,
	0x1f, 0x8d, 0x5a, 0x67, 0xc8, 0xcd, 0xec, 0x37, 0x0c, 0xea, 0x7e, 0xe4, 0x2d, 0x8c, 0x0b, 0x14,
	0x19, 0x6a, 0xaa, 0x10, 0x35, 0x65, 0x99, 0x9d, 0xcc, 0x8d, 0xdc, 0xbd, 0x1a, 0x22, 0xea, 0x20,
	0x23, 0x73, 0xf0, 0x34, 0xa6, 0xc8, 0x7e, 0xf6, 0x7c, 0x27, 0xd6, 0x37, 0x6e, 0xf5, 0xc6, 0x79,
	0xe8, 0x87, 0x2a, 0xa7, 0xaa, 0x4c, 0xec, 0x24, 0x5d, 0xbf, 0xb5, 0xca, 0xc3, 0x32, 0x99, 0xdd,
	0xc0, 0x79, 0x33, 0xcd, 0x7f, 0x00, 0xe7, 0x29, 0x40, 0x5e, 0x03, 0xa4, 0x4c, 0xe5, 0xa8, 0x0d,
	0x3e, 0x9a, 0xe6, 0xd5, 0x3d, 0x65, 0x76, 0x05, 0xc3, 0x76, 0xce, 0x23, 0xaf, 0xf3, 0xc4, 0xfb,
	0xc7, 0x01, 0x58, 0x75, 0x47, 0xf2, 0x0e, 0x26, 0xa6, 0x54, 0xf7, 0x48, 0x0b, 0x76, 0x27, 0xe2,
	0x7a, 0x59, 0x1a, 0x66, 0x6c, 0xe5, 0xdb, 0x56, 0xed, 0x47, 0x55, 0x26, 0x94, 0x63, 0xd5, 0x7c,
	0x47, 0x1b, 0x55, 0x99, 0x6c, 0xb0, 0x22, 0x1f, 0x80, 0x74, 0x51, 0x71, 0xac, 0x28, 0x17, 0xf2,
	0x97, 0xb0, 0x21, 0x0c, 0xa3, 0x2e, 0xc4, 0x0d, 0x56, 0x9b, 0x5a, 0x27, 0xaf, 0x00, 0xf0, 0xd1,
	0xe8, 0x98, 0x32, 0xb1, 0x93, 0xf6, 0xef, 0xb9, 0xd1, 0x73, 0xab, 0x04, 0x62, 0x27, 0xaf, 0x6e,
	0x01, 0x0e, 0xcb, 0x45, 0xa6, 0x30, 0x39, 0x9c, 0x68, 0xf0, 0x23, 0xd8, 0x7a, 0xcf, 0xc8, 0x4b,
	0x98, 0x1e, 0x89, 0xf4, 0x7a, 0xb5, 0xf1, 0x9c, 0xa3, 0x8b, 0xd5, 0xcd, 0xf7, 0xf0, 0xdb, 0x7a,
	0xbb, 0xf6, 0x4e, 0x92, 0x33, 0xbb, 0xe0, 0x9f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x28, 0x3a,
	0x6f, 0x0d, 0x28, 0x03, 0x00, 0x00,
}
