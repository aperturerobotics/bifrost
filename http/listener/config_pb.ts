// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/http/listener/config.proto (package bifrost.http.listener, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * Config configures a http server that listens on a port.
 *
 * Handles incoming requests with LookupHTTPHandler.
 *
 * @generated from message bifrost.http.listener.Config
 */
export class Config extends Message<Config> {
  /**
   * Addr is the address to listen.
   *
   * Example: 0.0.0.0:8080
   *
   * @generated from field: string addr = 1;
   */
  addr = ''

  /**
   * ClientId is the client id to set on LookupHTTPHandler.
   *
   * @generated from field: string client_id = 2;
   */
  clientId = ''

  /**
   * CertFile is the path to the certificate file to use for https.
   * Can be unset to use HTTP.
   *
   * @generated from field: string cert_file = 3;
   */
  certFile = ''

  /**
   * KeyFile is the path to the key file to use for https.
   * Cannot be unset if cert_file is set.
   * Otherwise can be unset.
   *
   * @generated from field: string key_file = 4;
   */
  keyFile = ''

  /**
   * Wait indicates to wait for LookupHTTPHandler even if it becomes idle.
   * If false: returns 404 not found if LookupHTTPHandler becomes idle.
   *
   * @generated from field: bool wait = 5;
   */
  wait = false

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bifrost.http.listener.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'addr', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'client_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'cert_file', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'key_file', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'wait', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined,
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}
