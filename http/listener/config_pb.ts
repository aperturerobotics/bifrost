// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/http/listener/config.proto (package bifrost.http.listener, syntax proto3)
/* eslint-disable */

import {
  createMessageType,
  Message,
  MessageType,
  PartialFieldInfo,
} from '@aptre/protobuf-es-lite'

export const protobufPackage = 'bifrost.http.listener'

/**
 * Config configures a http server that listens on a port.
 *
 * Handles incoming requests with LookupHTTPHandler.
 *
 * @generated from message bifrost.http.listener.Config
 */
export interface Config extends Message<Config> {
  /**
   * Addr is the address to listen.
   *
   * Example: 0.0.0.0:8080
   *
   * @generated from field: string addr = 1;
   */
  addr?: string
  /**
   * ClientId is the client id to set on LookupHTTPHandler.
   *
   * @generated from field: string client_id = 2;
   */
  clientId?: string
  /**
   * CertFile is the path to the certificate file to use for https.
   * Can be unset to use HTTP.
   *
   * @generated from field: string cert_file = 3;
   */
  certFile?: string
  /**
   * KeyFile is the path to the key file to use for https.
   * Cannot be unset if cert_file is set.
   * Otherwise can be unset.
   *
   * @generated from field: string key_file = 4;
   */
  keyFile?: string
  /**
   * Wait indicates to wait for LookupHTTPHandler even if it becomes idle.
   * If false: returns 404 not found if LookupHTTPHandler becomes idle.
   *
   * @generated from field: bool wait = 5;
   */
  wait?: boolean
}

export const Config: MessageType<Config> = createMessageType({
  typeName: 'bifrost.http.listener.Config',
  fields: [
    { no: 1, name: 'addr', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'client_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'cert_file', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'key_file', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'wait', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
