// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.5
// source: github.com/aperturerobotics/bifrost/stream/srpc/client/client.proto

package stream_srpc_client

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	backoff "github.com/aperturerobotics/util/backoff"
)

// Config configures a client for a srpc service.
type Config struct {
	unknownFields []byte
	// ServerPeerIds are the static list of peer IDs to contact.
	ServerPeerIds []string `protobuf:"bytes,1,rep,name=server_peer_ids,json=serverPeerIds,proto3" json:"serverPeerIds,omitempty"`
	// PerServerBackoff is the server peer error backoff configuration.
	// Can be empty.
	PerServerBackoff *backoff.Backoff `protobuf:"bytes,2,opt,name=per_server_backoff,json=perServerBackoff,proto3" json:"perServerBackoff,omitempty"`
	// SrcPeerId is the source peer id to contact from.
	// Can be empty.
	SrcPeerId string `protobuf:"bytes,3,opt,name=src_peer_id,json=srcPeerId,proto3" json:"srcPeerId,omitempty"`
	// TransportId restricts which transport we can dial out from.
	TransportId uint64 `protobuf:"varint,4,opt,name=transport_id,json=transportId,proto3" json:"transportId,omitempty"`
	// TimeoutDur sets the per-server establish timeout.
	// If unset, no timeout.
	// Example: 15s
	TimeoutDur string `protobuf:"bytes,5,opt,name=timeout_dur,json=timeoutDur,proto3" json:"timeoutDur,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
}

func (*Config) ProtoMessage() {}

func (x *Config) GetServerPeerIds() []string {
	if x != nil {
		return x.ServerPeerIds
	}
	return nil
}

func (x *Config) GetPerServerBackoff() *backoff.Backoff {
	if x != nil {
		return x.PerServerBackoff
	}
	return nil
}

func (x *Config) GetSrcPeerId() string {
	if x != nil {
		return x.SrcPeerId
	}
	return ""
}

func (x *Config) GetTransportId() uint64 {
	if x != nil {
		return x.TransportId
	}
	return 0
}

func (x *Config) GetTimeoutDur() string {
	if x != nil {
		return x.TimeoutDur
	}
	return ""
}

func (m *Config) CloneVT() *Config {
	if m == nil {
		return (*Config)(nil)
	}
	r := new(Config)
	r.SrcPeerId = m.SrcPeerId
	r.TransportId = m.TransportId
	r.TimeoutDur = m.TimeoutDur
	if rhs := m.ServerPeerIds; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.ServerPeerIds = tmpContainer
	}
	if rhs := m.PerServerBackoff; rhs != nil {
		r.PerServerBackoff = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Config) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Config) EqualVT(that *Config) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ServerPeerIds) != len(that.ServerPeerIds) {
		return false
	}
	for i, vx := range this.ServerPeerIds {
		vy := that.ServerPeerIds[i]
		if vx != vy {
			return false
		}
	}
	if !this.PerServerBackoff.EqualVT(that.PerServerBackoff) {
		return false
	}
	if this.SrcPeerId != that.SrcPeerId {
		return false
	}
	if this.TransportId != that.TransportId {
		return false
	}
	if this.TimeoutDur != that.TimeoutDur {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Config) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Config)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the Config message to JSON.
func (x *Config) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ServerPeerIds) > 0 || s.HasField("serverPeerIds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("serverPeerIds")
		s.WriteStringArray(x.ServerPeerIds)
	}
	if x.PerServerBackoff != nil || s.HasField("perServerBackoff") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("perServerBackoff")
		x.PerServerBackoff.MarshalProtoJSON(s.WithField("perServerBackoff"))
	}
	if x.SrcPeerId != "" || s.HasField("srcPeerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("srcPeerId")
		s.WriteString(x.SrcPeerId)
	}
	if x.TransportId != 0 || s.HasField("transportId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transportId")
		s.WriteUint64(x.TransportId)
	}
	if x.TimeoutDur != "" || s.HasField("timeoutDur") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timeoutDur")
		s.WriteString(x.TimeoutDur)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config to JSON.
func (x *Config) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config message from JSON.
func (x *Config) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "server_peer_ids", "serverPeerIds":
			s.AddField("server_peer_ids")
			if s.ReadNil() {
				x.ServerPeerIds = nil
				return
			}
			x.ServerPeerIds = s.ReadStringArray()
		case "per_server_backoff", "perServerBackoff":
			if s.ReadNil() {
				x.PerServerBackoff = nil
				return
			}
			x.PerServerBackoff = &backoff.Backoff{}
			x.PerServerBackoff.UnmarshalProtoJSON(s.WithField("per_server_backoff", true))
		case "src_peer_id", "srcPeerId":
			s.AddField("src_peer_id")
			x.SrcPeerId = s.ReadString()
		case "transport_id", "transportId":
			s.AddField("transport_id")
			x.TransportId = s.ReadUint64()
		case "timeout_dur", "timeoutDur":
			s.AddField("timeout_dur")
			x.TimeoutDur = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Config from JSON.
func (x *Config) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Config) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Config) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.TimeoutDur) > 0 {
		i -= len(m.TimeoutDur)
		copy(dAtA[i:], m.TimeoutDur)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.TimeoutDur)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransportId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransportId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SrcPeerId) > 0 {
		i -= len(m.SrcPeerId)
		copy(dAtA[i:], m.SrcPeerId)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.SrcPeerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PerServerBackoff != nil {
		size, err := m.PerServerBackoff.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServerPeerIds) > 0 {
		for iNdEx := len(m.ServerPeerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServerPeerIds[iNdEx])
			copy(dAtA[i:], m.ServerPeerIds[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.ServerPeerIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Config) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServerPeerIds) > 0 {
		for _, s := range m.ServerPeerIds {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.PerServerBackoff != nil {
		l = m.PerServerBackoff.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.SrcPeerId)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransportId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransportId))
	}
	l = len(m.TimeoutDur)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (x *Config) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Config { ")
	if len(x.ServerPeerIds) > 0 {
		sb.WriteString(" server_peer_ids: [")
		for i, v := range x.ServerPeerIds {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.PerServerBackoff != nil {
		sb.WriteString(" per_server_backoff: ")
		sb.WriteString(x.PerServerBackoff.MarshalProtoText())
	}
	if x.SrcPeerId != "" {
		sb.WriteString(" src_peer_id: ")
		sb.WriteString(strconv.Quote(x.SrcPeerId))
	}
	if x.TransportId != 0 {
		sb.WriteString(" transport_id: ")
		sb.WriteString(strconv.FormatUint(uint64(x.TransportId), 10))
	}
	if x.TimeoutDur != "" {
		sb.WriteString(" timeout_dur: ")
		sb.WriteString(strconv.Quote(x.TimeoutDur))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Config) String() string {
	return x.MarshalProtoText()
}
func (m *Config) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPeerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPeerIds = append(m.ServerPeerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerServerBackoff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerServerBackoff == nil {
				m.PerServerBackoff = &backoff.Backoff{}
			}
			if err := m.PerServerBackoff.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportId", wireType)
			}
			m.TransportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutDur", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutDur = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
