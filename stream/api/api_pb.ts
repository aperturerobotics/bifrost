// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/stream/api/api.proto (package stream.api, syntax proto3)
/* eslint-disable */

import {
  createMessageType,
  Message,
  MessageType,
  PartialFieldInfo,
} from '@aptre/protobuf-es-lite'
import { Config } from '../forwarding/forwarding_pb.js'
import type { ControllerStatus } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec_pb.js'
import { ControllerStatus_Enum } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec_pb.js'
import { Config as Config$1 } from '../listening/listening_pb.js'
import { Config as Config$2 } from './accept/accept_pb.js'
import { Data } from './rpc/rpc_pb.js'
import { Config as Config$3 } from './dial/dial_pb.js'

export const protobufPackage = 'stream.api'

/**
 * ForwardStreamsRequest is the request type for ForwardStreams.
 *
 * @generated from message stream.api.ForwardStreamsRequest
 */
export interface ForwardStreamsRequest extends Message<ForwardStreamsRequest> {
  /**
   * @generated from field: stream.forwarding.Config forwarding_config = 1;
   */
  forwardingConfig?: Config
}

export const ForwardStreamsRequest: MessageType<ForwardStreamsRequest> =
  createMessageType({
    typeName: 'stream.api.ForwardStreamsRequest',
    fields: [
      { no: 1, name: 'forwarding_config', kind: 'message', T: Config },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ForwardStreamsResponse is the response type for ForwardStreams.
 *
 * @generated from message stream.api.ForwardStreamsResponse
 */
export interface ForwardStreamsResponse
  extends Message<ForwardStreamsResponse> {
  /**
   * ControllerStatus is the status of the forwarding controller.
   *
   * @generated from field: controller.exec.ControllerStatus controller_status = 1;
   */
  controllerStatus?: ControllerStatus
}

export const ForwardStreamsResponse: MessageType<ForwardStreamsResponse> =
  createMessageType({
    typeName: 'stream.api.ForwardStreamsResponse',
    fields: [
      {
        no: 1,
        name: 'controller_status',
        kind: 'enum',
        T: ControllerStatus_Enum,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ListenStreamsRequest is the request type for ListenStreams.
 *
 * @generated from message stream.api.ListenStreamsRequest
 */
export interface ListenStreamsRequest extends Message<ListenStreamsRequest> {
  /**
   * @generated from field: stream.listening.Config listening_config = 1;
   */
  listeningConfig?: Config$1
}

export const ListenStreamsRequest: MessageType<ListenStreamsRequest> =
  createMessageType({
    typeName: 'stream.api.ListenStreamsRequest',
    fields: [
      { no: 1, name: 'listening_config', kind: 'message', T: Config$1 },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ListenStreamsResponse is the response type for ListenStreams.
 *
 * @generated from message stream.api.ListenStreamsResponse
 */
export interface ListenStreamsResponse extends Message<ListenStreamsResponse> {
  /**
   * ControllerStatus is the status of the forwarding controller.
   *
   * @generated from field: controller.exec.ControllerStatus controller_status = 1;
   */
  controllerStatus?: ControllerStatus
}

export const ListenStreamsResponse: MessageType<ListenStreamsResponse> =
  createMessageType({
    typeName: 'stream.api.ListenStreamsResponse',
    fields: [
      {
        no: 1,
        name: 'controller_status',
        kind: 'enum',
        T: ControllerStatus_Enum,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * AcceptStreamRequest is the request type for AcceptStream.
 *
 * @generated from message stream.api.AcceptStreamRequest
 */
export interface AcceptStreamRequest extends Message<AcceptStreamRequest> {
  /**
   * Config is the configuration for the accept.
   * The first packet will contain this value.
   *
   * @generated from field: stream.api.accept.Config config = 1;
   */
  config?: Config$2
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 2;
   */
  data?: Data
}

export const AcceptStreamRequest: MessageType<AcceptStreamRequest> =
  createMessageType({
    typeName: 'stream.api.AcceptStreamRequest',
    fields: [
      { no: 1, name: 'config', kind: 'message', T: Config$2 },
      { no: 2, name: 'data', kind: 'message', T: Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * AcceptStreamResponse is the response type for AcceptStream.
 *
 * @generated from message stream.api.AcceptStreamResponse
 */
export interface AcceptStreamResponse extends Message<AcceptStreamResponse> {
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 1;
   */
  data?: Data
}

export const AcceptStreamResponse: MessageType<AcceptStreamResponse> =
  createMessageType({
    typeName: 'stream.api.AcceptStreamResponse',
    fields: [
      { no: 1, name: 'data', kind: 'message', T: Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * DialStreamRequest is the request type for DialStream.
 *
 * @generated from message stream.api.DialStreamRequest
 */
export interface DialStreamRequest extends Message<DialStreamRequest> {
  /**
   * Config is the configuration for the dial.
   * The first packet will contain this value.
   *
   * @generated from field: stream.api.dial.Config config = 1;
   */
  config?: Config$3
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 2;
   */
  data?: Data
}

export const DialStreamRequest: MessageType<DialStreamRequest> =
  createMessageType({
    typeName: 'stream.api.DialStreamRequest',
    fields: [
      { no: 1, name: 'config', kind: 'message', T: Config$3 },
      { no: 2, name: 'data', kind: 'message', T: Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * DialStreamResponse is the response type for DialStream.
 *
 * @generated from message stream.api.DialStreamResponse
 */
export interface DialStreamResponse extends Message<DialStreamResponse> {
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 1;
   */
  data?: Data
}

export const DialStreamResponse: MessageType<DialStreamResponse> =
  createMessageType({
    typeName: 'stream.api.DialStreamResponse',
    fields: [
      { no: 1, name: 'data', kind: 'message', T: Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })
