// @generated by protoc-gen-es-starpc none with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/stream/api/api.proto (package stream.api, syntax proto3)
/* eslint-disable */

import {
  AcceptStreamRequest,
  AcceptStreamResponse,
  DialStreamRequest,
  DialStreamResponse,
  ForwardStreamsRequest,
  ForwardStreamsResponse,
  ListenStreamsRequest,
  ListenStreamsResponse,
} from './api_pb.js'
import { MethodKind } from '@bufbuild/protobuf'
import { Message } from '@aptre/protobuf-es-lite'
import {
  buildDecodeMessageTransform,
  buildEncodeMessageTransform,
  MessageStream,
  ProtoRpc,
} from 'starpc'

/**
 * StreamService is the bifrost stream service.
 *
 * @generated from service stream.api.StreamService
 */
export const StreamServiceDefinition = {
  typeName: 'stream.api.StreamService',
  methods: {
    /**
     * ForwardStreams forwards streams to the target multiaddress.
     * Handles HandleMountedStream directives by contacting the target.
     *
     * @generated from rpc stream.api.StreamService.ForwardStreams
     */
    ForwardStreams: {
      name: 'ForwardStreams',
      I: ForwardStreamsRequest,
      O: ForwardStreamsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ListenStreams listens for connections to the multiaddress.
     * Forwards the connections to a remote peer with a protocol ID.
     *
     * @generated from rpc stream.api.StreamService.ListenStreams
     */
    ListenStreams: {
      name: 'ListenStreams',
      I: ListenStreamsRequest,
      O: ListenStreamsResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * AcceptStream accepts an incoming stream.
     * Stream data is sent over the request / response streams.
     *
     * @generated from rpc stream.api.StreamService.AcceptStream
     */
    AcceptStream: {
      name: 'AcceptStream',
      I: AcceptStreamRequest,
      O: AcceptStreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * DialStream dials a outgoing stream.
     * Stream data is sent over the request / response streams.
     *
     * @generated from rpc stream.api.StreamService.DialStream
     */
    DialStream: {
      name: 'DialStream',
      I: DialStreamRequest,
      O: DialStreamResponse,
      kind: MethodKind.BiDiStreaming,
    },
  },
} as const

/**
 * StreamService is the bifrost stream service.
 *
 * @generated from service stream.api.StreamService
 */
export interface StreamService {
  /**
   * ForwardStreams forwards streams to the target multiaddress.
   * Handles HandleMountedStream directives by contacting the target.
   *
   * @generated from rpc stream.api.StreamService.ForwardStreams
   */
  ForwardStreams(
    request: Message<ForwardStreamsRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ForwardStreamsResponse>

  /**
   * ListenStreams listens for connections to the multiaddress.
   * Forwards the connections to a remote peer with a protocol ID.
   *
   * @generated from rpc stream.api.StreamService.ListenStreams
   */
  ListenStreams(
    request: Message<ListenStreamsRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ListenStreamsResponse>

  /**
   * AcceptStream accepts an incoming stream.
   * Stream data is sent over the request / response streams.
   *
   * @generated from rpc stream.api.StreamService.AcceptStream
   */
  AcceptStream(
    request: MessageStream<AcceptStreamRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<AcceptStreamResponse>

  /**
   * DialStream dials a outgoing stream.
   * Stream data is sent over the request / response streams.
   *
   * @generated from rpc stream.api.StreamService.DialStream
   */
  DialStream(
    request: MessageStream<DialStreamRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<DialStreamResponse>
}

export const StreamServiceServiceName = StreamServiceDefinition.typeName

export class StreamServiceClient implements StreamService {
  private readonly rpc: ProtoRpc
  private readonly service: string
  constructor(rpc: ProtoRpc, opts?: { service?: string }) {
    this.service = opts?.service || StreamServiceServiceName
    this.rpc = rpc
    this.ForwardStreams = this.ForwardStreams.bind(this)
    this.ListenStreams = this.ListenStreams.bind(this)
    this.AcceptStream = this.AcceptStream.bind(this)
    this.DialStream = this.DialStream.bind(this)
  }
  /**
   * ForwardStreams forwards streams to the target multiaddress.
   * Handles HandleMountedStream directives by contacting the target.
   *
   * @generated from rpc stream.api.StreamService.ForwardStreams
   */
  ForwardStreams(
    request: Message<ForwardStreamsRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ForwardStreamsResponse> {
    const requestMsg = ForwardStreamsRequest.create(request)
    const result = this.rpc.serverStreamingRequest(
      this.service,
      StreamServiceDefinition.methods.ForwardStreams.name,
      ForwardStreamsRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(ForwardStreamsResponse)(result)
  }

  /**
   * ListenStreams listens for connections to the multiaddress.
   * Forwards the connections to a remote peer with a protocol ID.
   *
   * @generated from rpc stream.api.StreamService.ListenStreams
   */
  ListenStreams(
    request: Message<ListenStreamsRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<ListenStreamsResponse> {
    const requestMsg = ListenStreamsRequest.create(request)
    const result = this.rpc.serverStreamingRequest(
      this.service,
      StreamServiceDefinition.methods.ListenStreams.name,
      ListenStreamsRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(ListenStreamsResponse)(result)
  }

  /**
   * AcceptStream accepts an incoming stream.
   * Stream data is sent over the request / response streams.
   *
   * @generated from rpc stream.api.StreamService.AcceptStream
   */
  AcceptStream(
    request: MessageStream<AcceptStreamRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<AcceptStreamResponse> {
    const result = this.rpc.bidirectionalStreamingRequest(
      this.service,
      StreamServiceDefinition.methods.AcceptStream.name,
      buildEncodeMessageTransform(AcceptStreamRequest)(request),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(AcceptStreamResponse)(result)
  }

  /**
   * DialStream dials a outgoing stream.
   * Stream data is sent over the request / response streams.
   *
   * @generated from rpc stream.api.StreamService.DialStream
   */
  DialStream(
    request: MessageStream<DialStreamRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<DialStreamResponse> {
    const result = this.rpc.bidirectionalStreamingRequest(
      this.service,
      StreamServiceDefinition.methods.DialStream.name,
      buildEncodeMessageTransform(DialStreamRequest)(request),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(DialStreamResponse)(result)
  }
}
