// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/stream/api/dial/dial.proto

package stream_api_dial

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config configures the dial controller.
type Config struct {
	// PeerId is the remote peer ID to dial.
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// LocalPeerId is the peer ID to dial with.
	// Can be empty to accept any loaded peer.
	LocalPeerId string `protobuf:"bytes,2,opt,name=local_peer_id,json=localPeerId,proto3" json:"local_peer_id,omitempty"`
	// ProtocolId is the protocol ID to dial with.
	ProtocolId string `protobuf:"bytes,3,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// TransportId constrains the transport ID to dial with.
	// Can be empty.
	TransportId uint64 `protobuf:"varint,4,opt,name=transport_id,json=transportId,proto3" json:"transport_id,omitempty"`
	// Encrypted indicates the stream should be encrypted.
	Encrypted bool `protobuf:"varint,5,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Reliable indicates the stream should be reliable.
	Reliable             bool     `protobuf:"varint,6,opt,name=reliable,proto3" json:"reliable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_4938d33ab97960c8, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Config) GetLocalPeerId() string {
	if m != nil {
		return m.LocalPeerId
	}
	return ""
}

func (m *Config) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func (m *Config) GetTransportId() uint64 {
	if m != nil {
		return m.TransportId
	}
	return 0
}

func (m *Config) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Config) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "stream.api.dial.Config")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/stream/api/dial/dial.proto", fileDescriptor_4938d33ab97960c8)
}

var fileDescriptor_4938d33ab97960c8 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8d, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x59, 0xad, 0xb1, 0xdd, 0x28, 0xc2, 0x5e, 0x0c, 0x22, 0x18, 0x7b, 0xca, 0x29, 0x39,
	0x78, 0xf7, 0xe2, 0x29, 0x37, 0xc9, 0x0b, 0x94, 0xfd, 0x33, 0xad, 0x03, 0x6b, 0x66, 0x99, 0x4c,
	0x0f, 0x3e, 0x9f, 0x2f, 0x26, 0xbb, 0xa5, 0xf5, 0x32, 0x30, 0xdf, 0xf7, 0xc1, 0x4f, 0xbf, 0x1f,
	0x50, 0xbe, 0x8e, 0xae, 0xf7, 0xf4, 0x3d, 0xd8, 0x04, 0x2c, 0x47, 0x06, 0x26, 0x47, 0x82, 0x7e,
	0x19, 0x1c, 0xee, 0x99, 0x16, 0x19, 0x16, 0x61, 0xb0, 0xd9, 0xe3, 0x10, 0xd0, 0xc6, 0x72, 0xfa,
	0xc4, 0x24, 0x64, 0x1e, 0x4e, 0xae, 0xb7, 0x09, 0xfb, 0x8c, 0xb7, 0xbf, 0x4a, 0x57, 0x1f, 0x34,
	0xef, 0xf1, 0x60, 0x1e, 0xf5, 0x6d, 0x02, 0xe0, 0x1d, 0x86, 0x46, 0xb5, 0xaa, 0xdb, 0x4c, 0x55,
	0x7e, 0xc7, 0x60, 0xb6, 0xfa, 0x3e, 0x92, 0xb7, 0x71, 0x77, 0xd6, 0x57, 0x45, 0xd7, 0x05, 0x7e,
	0x9e, 0x9a, 0x17, 0x5d, 0x97, 0x05, 0x4f, 0x31, 0x17, 0xd7, 0xa5, 0xd0, 0x67, 0x34, 0x06, 0xf3,
	0xaa, 0xef, 0x84, 0xed, 0xbc, 0x24, 0x62, 0xc9, 0xc5, 0xaa, 0x55, 0xdd, 0x6a, 0xaa, 0x2f, 0x6c,
	0x0c, 0xe6, 0x59, 0x6f, 0x60, 0xf6, 0xfc, 0x93, 0x04, 0x42, 0x73, 0xd3, 0xaa, 0x6e, 0x3d, 0xfd,
	0x03, 0xf3, 0xa4, 0xd7, 0x0c, 0x11, 0xad, 0x8b, 0xd0, 0x54, 0x45, 0x5e, 0x7e, 0x57, 0x95, 0xa1,
	0xb7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x52, 0x28, 0x46, 0x1f, 0x01, 0x00, 0x00,
}
