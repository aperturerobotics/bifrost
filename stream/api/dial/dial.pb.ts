// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/stream/api/dial/dial.proto (package stream.api.dial, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType, Message } from '@aptre/protobuf-es-lite'

export const protobufPackage = 'stream.api.dial'

/**
 * Config configures the dial controller.
 *
 * @generated from message stream.api.dial.Config
 */
export type Config = Message<{
  /**
   * PeerId is the remote peer ID to dial.
   *
   * @generated from field: string peer_id = 1;
   */
  peerId?: string
  /**
   * LocalPeerId is the peer ID to dial with.
   * Can be empty to accept any loaded peer.
   *
   * @generated from field: string local_peer_id = 2;
   */
  localPeerId?: string
  /**
   * ProtocolId is the protocol ID to dial with.
   *
   * @generated from field: string protocol_id = 3;
   */
  protocolId?: string
  /**
   * TransportId constrains the transport ID to dial with.
   * Can be empty.
   *
   * @generated from field: uint64 transport_id = 4;
   */
  transportId?: bigint
  /**
   * Encrypted indicates the stream should be encrypted.
   *
   * @generated from field: bool encrypted = 5;
   */
  encrypted?: boolean
  /**
   * Reliable indicates the stream should be reliable.
   *
   * @generated from field: bool reliable = 6;
   */
  reliable?: boolean
}>

export const Config: MessageType<Config> = createMessageType({
  typeName: 'stream.api.dial.Config',
  fields: [
    { no: 1, name: 'peer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'local_peer_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 3,
      name: 'protocol_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 4,
      name: 'transport_id',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    { no: 5, name: 'encrypted', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: 'reliable', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
