// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/stream/api/api.proto (package stream.api, syntax proto3)
/* eslint-disable */

import { Config } from '../forwarding/forwarding.pb.js'
import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType } from '@aptre/protobuf-es-lite'
import type { ControllerStatus } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec.pb.js'
import { ControllerStatus_Enum } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec.pb.js'
import { Config as Config$1 } from '../listening/listening.pb.js'
import { Config as Config$2 } from './accept/accept.pb.js'
import { Data } from './rpc/rpc.pb.js'
import { Config as Config$3 } from './dial/dial.pb.js'

export const protobufPackage = 'stream.api'

/**
 * ForwardStreamsRequest is the request type for ForwardStreams.
 *
 * @generated from message stream.api.ForwardStreamsRequest
 */
export interface ForwardStreamsRequest {
  /**
   * @generated from field: stream.forwarding.Config forwarding_config = 1;
   */
  forwardingConfig?: Config
}

// ForwardStreamsRequest contains the message type declaration for ForwardStreamsRequest.
export const ForwardStreamsRequest: MessageType<ForwardStreamsRequest> =
  createMessageType({
    typeName: 'stream.api.ForwardStreamsRequest',
    fields: [
      { no: 1, name: 'forwarding_config', kind: 'message', T: () => Config },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ForwardStreamsResponse is the response type for ForwardStreams.
 *
 * @generated from message stream.api.ForwardStreamsResponse
 */
export interface ForwardStreamsResponse {
  /**
   * ControllerStatus is the status of the forwarding controller.
   *
   * @generated from field: controller.exec.ControllerStatus controller_status = 1;
   */
  controllerStatus?: ControllerStatus
}

// ForwardStreamsResponse contains the message type declaration for ForwardStreamsResponse.
export const ForwardStreamsResponse: MessageType<ForwardStreamsResponse> =
  createMessageType({
    typeName: 'stream.api.ForwardStreamsResponse',
    fields: [
      {
        no: 1,
        name: 'controller_status',
        kind: 'enum',
        T: ControllerStatus_Enum,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ListenStreamsRequest is the request type for ListenStreams.
 *
 * @generated from message stream.api.ListenStreamsRequest
 */
export interface ListenStreamsRequest {
  /**
   * @generated from field: stream.listening.Config listening_config = 1;
   */
  listeningConfig?: Config$1
}

// ListenStreamsRequest contains the message type declaration for ListenStreamsRequest.
export const ListenStreamsRequest: MessageType<ListenStreamsRequest> =
  createMessageType({
    typeName: 'stream.api.ListenStreamsRequest',
    fields: [
      { no: 1, name: 'listening_config', kind: 'message', T: () => Config$1 },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * ListenStreamsResponse is the response type for ListenStreams.
 *
 * @generated from message stream.api.ListenStreamsResponse
 */
export interface ListenStreamsResponse {
  /**
   * ControllerStatus is the status of the forwarding controller.
   *
   * @generated from field: controller.exec.ControllerStatus controller_status = 1;
   */
  controllerStatus?: ControllerStatus
}

// ListenStreamsResponse contains the message type declaration for ListenStreamsResponse.
export const ListenStreamsResponse: MessageType<ListenStreamsResponse> =
  createMessageType({
    typeName: 'stream.api.ListenStreamsResponse',
    fields: [
      {
        no: 1,
        name: 'controller_status',
        kind: 'enum',
        T: ControllerStatus_Enum,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * AcceptStreamRequest is the request type for AcceptStream.
 *
 * @generated from message stream.api.AcceptStreamRequest
 */
export interface AcceptStreamRequest {
  /**
   * Config is the configuration for the accept.
   * The first packet will contain this value.
   *
   * @generated from field: stream.api.accept.Config config = 1;
   */
  config?: Config$2
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 2;
   */
  data?: Data
}

// AcceptStreamRequest contains the message type declaration for AcceptStreamRequest.
export const AcceptStreamRequest: MessageType<AcceptStreamRequest> =
  createMessageType({
    typeName: 'stream.api.AcceptStreamRequest',
    fields: [
      { no: 1, name: 'config', kind: 'message', T: () => Config$2 },
      { no: 2, name: 'data', kind: 'message', T: () => Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * AcceptStreamResponse is the response type for AcceptStream.
 *
 * @generated from message stream.api.AcceptStreamResponse
 */
export interface AcceptStreamResponse {
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 1;
   */
  data?: Data
}

// AcceptStreamResponse contains the message type declaration for AcceptStreamResponse.
export const AcceptStreamResponse: MessageType<AcceptStreamResponse> =
  createMessageType({
    typeName: 'stream.api.AcceptStreamResponse',
    fields: [
      { no: 1, name: 'data', kind: 'message', T: () => Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * DialStreamRequest is the request type for DialStream.
 *
 * @generated from message stream.api.DialStreamRequest
 */
export interface DialStreamRequest {
  /**
   * Config is the configuration for the dial.
   * The first packet will contain this value.
   *
   * @generated from field: stream.api.dial.Config config = 1;
   */
  config?: Config$3
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 2;
   */
  data?: Data
}

// DialStreamRequest contains the message type declaration for DialStreamRequest.
export const DialStreamRequest: MessageType<DialStreamRequest> =
  createMessageType({
    typeName: 'stream.api.DialStreamRequest',
    fields: [
      { no: 1, name: 'config', kind: 'message', T: () => Config$3 },
      { no: 2, name: 'data', kind: 'message', T: () => Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * DialStreamResponse is the response type for DialStream.
 *
 * @generated from message stream.api.DialStreamResponse
 */
export interface DialStreamResponse {
  /**
   * Data is a data packet.
   *
   * @generated from field: stream.api.rpc.Data data = 1;
   */
  data?: Data
}

// DialStreamResponse contains the message type declaration for DialStreamResponse.
export const DialStreamResponse: MessageType<DialStreamResponse> =
  createMessageType({
    typeName: 'stream.api.DialStreamResponse',
    fields: [
      { no: 1, name: 'data', kind: 'message', T: () => Data },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })
