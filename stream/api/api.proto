syntax = "proto3";
package stream.api;

// import "github.com/aperturerobotics/controllerbus/controller/controller.proto";
import "github.com/aperturerobotics/controllerbus/controller/exec/exec.proto";

import "github.com/aperturerobotics/bifrost/stream/forwarding/forwarding.proto";
import "github.com/aperturerobotics/bifrost/stream/listening/listening.proto";

import "github.com/aperturerobotics/bifrost/stream/api/rpc/rpc.proto";
import "github.com/aperturerobotics/bifrost/stream/api/accept/accept.proto";
import "github.com/aperturerobotics/bifrost/stream/api/dial/dial.proto";

// ForwardStreamsRequest is the request type for ForwardStreams.
message ForwardStreamsRequest {
  .stream.forwarding.Config forwarding_config = 1;
}

// ForwardStreamsResponse is the response type for ForwardStreams.
message ForwardStreamsResponse {
  // ControllerStatus is the status of the forwarding controller.
  .controller.exec.ControllerStatus controller_status = 1;
}

// ListenStreamsRequest is the request type for ListenStreams.
message ListenStreamsRequest {
  .stream.listening.Config listening_config = 1;
}

// ListenStreamsResponse is the response type for ListenStreams.
message ListenStreamsResponse {
  // ControllerStatus is the status of the forwarding controller.
  .controller.exec.ControllerStatus controller_status = 1;
}

// AcceptStreamRequest is the request type for AcceptStream.
message AcceptStreamRequest {
  // Config is the configuration for the accept.
  // The first packet will contain this value.
  accept.Config config = 1;
  // Data is a data packet.
  rpc.Data data = 2;
}

// AcceptStreamResponse is the response type for AcceptStream.
message AcceptStreamResponse {
  // Data is a data packet.
  rpc.Data data = 1;
}

// DialStreamRequest is the request type for DialStream.
message DialStreamRequest {
  // Config is the configuration for the dial.
  // The first packet will contain this value.
  dial.Config config = 1;
  // Data is a data packet.
  rpc.Data data = 2;
}

// DialStreamResponse is the response type for DialStream.
message DialStreamResponse {
  // Data is a data packet.
  rpc.Data data = 1;
}

// StreamService is the bifrost stream service.
service StreamService {
  // ForwardStreams forwards streams to the target multiaddress.
  // Handles HandleMountedStream directives by contacting the target.
  rpc ForwardStreams(ForwardStreamsRequest) returns (stream ForwardStreamsResponse) {}
  // ListenStreams listens for connections to the multiaddress.
  // Forwards the connections to a remote peer with a protocol ID.
  rpc ListenStreams(ListenStreamsRequest) returns (stream ListenStreamsResponse) {}
  // AcceptStream accepts an incoming stream.
  // Stream data is sent over the request / response streams.
  rpc AcceptStream(stream AcceptStreamRequest) returns (stream AcceptStreamResponse) {}
  // DialStream dials a outgoing stream.
  // Stream data is sent over the request / response streams.
  rpc DialStream(stream DialStreamRequest) returns (stream DialStreamResponse) {}
}