// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/stream/echo/echo.proto

package stream_echo

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config configures the echo controller.
type Config struct {
	// PeerId is the peer ID to echo for.
	// Can be empty.
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// ProtocolId is the protocol ID to echo on.
	ProtocolId           string   `protobuf:"bytes,2,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e0aa515de18f624, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Config) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "stream.echo.Config")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/stream/echo/echo.proto", fileDescriptor_9e0aa515de18f624)
}

var fileDescriptor_9e0aa515de18f624 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0x48, 0x2d, 0x2a, 0x29, 0x2d, 0x4a, 0x2d,
	0xca, 0x4f, 0xca, 0x2f, 0xc9, 0x4c, 0x2e, 0xd6, 0x4f, 0xca, 0x4c, 0x2b, 0xca, 0x2f, 0x2e, 0xd1,
	0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x4f, 0x4d, 0xce, 0xc8, 0x07, 0x13, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0xdc, 0x10, 0x71, 0x3d, 0x90, 0x90, 0x92, 0x13, 0x17, 0x9b, 0x73, 0x7e,
	0x5e, 0x5a, 0x66, 0xba, 0x90, 0x38, 0x17, 0x7b, 0x41, 0x6a, 0x6a, 0x51, 0x7c, 0x66, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x1b, 0x88, 0xeb, 0x99, 0x22, 0x24, 0xcf, 0xc5, 0x0d, 0xd6,
	0x98, 0x9c, 0x9f, 0x03, 0x92, 0x64, 0x02, 0x4b, 0x72, 0xc1, 0x84, 0x3c, 0x53, 0x92, 0xd8, 0xc0,
	0x6c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x8a, 0x69, 0x66, 0x95, 0x00, 0x00, 0x00,
}
