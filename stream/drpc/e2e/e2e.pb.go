// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/stream/drpc/e2e/e2e.proto

package drpc_e2e

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MockRequest is the mock request.
type MockRequest struct {
	// Body is the body of the request.
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MockRequest) Reset()         { *m = MockRequest{} }
func (m *MockRequest) String() string { return proto.CompactTextString(m) }
func (*MockRequest) ProtoMessage()    {}
func (*MockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_165eff7d5088d010, []int{0}
}

func (m *MockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockRequest.Unmarshal(m, b)
}
func (m *MockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockRequest.Marshal(b, m, deterministic)
}
func (m *MockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockRequest.Merge(m, src)
}
func (m *MockRequest) XXX_Size() int {
	return xxx_messageInfo_MockRequest.Size(m)
}
func (m *MockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MockRequest proto.InternalMessageInfo

func (m *MockRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

// MockResponse is the mock response.
type MockResponse struct {
	// ReqBody is the echoed request body.
	ReqBody              string   `protobuf:"bytes,1,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MockResponse) Reset()         { *m = MockResponse{} }
func (m *MockResponse) String() string { return proto.CompactTextString(m) }
func (*MockResponse) ProtoMessage()    {}
func (*MockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_165eff7d5088d010, []int{1}
}

func (m *MockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockResponse.Unmarshal(m, b)
}
func (m *MockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockResponse.Marshal(b, m, deterministic)
}
func (m *MockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockResponse.Merge(m, src)
}
func (m *MockResponse) XXX_Size() int {
	return xxx_messageInfo_MockResponse.Size(m)
}
func (m *MockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MockResponse proto.InternalMessageInfo

func (m *MockResponse) GetReqBody() string {
	if m != nil {
		return m.ReqBody
	}
	return ""
}

func init() {
	proto.RegisterType((*MockRequest)(nil), "drpc.e2e.MockRequest")
	proto.RegisterType((*MockResponse)(nil), "drpc.e2e.MockResponse")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/stream/drpc/e2e/e2e.proto", fileDescriptor_165eff7d5088d010)
}

var fileDescriptor_165eff7d5088d010 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0xb1, 0xab, 0xc2, 0x30,
	0x10, 0xc6, 0x5f, 0xa1, 0xbc, 0xd7, 0x17, 0x9d, 0x02, 0x8a, 0x3a, 0x69, 0x27, 0x5d, 0x12, 0xa8,
	0x83, 0x93, 0x8b, 0xd2, 0xd1, 0xa5, 0xb8, 0x4b, 0x93, 0x9c, 0x5a, 0xa4, 0xbd, 0xf4, 0x92, 0x0e,
	0xfd, 0xef, 0xa5, 0x2d, 0x42, 0x71, 0x38, 0x38, 0x3e, 0x7e, 0x77, 0xbf, 0x8f, 0x1d, 0x1f, 0x85,
	0x7f, 0x36, 0x4a, 0x68, 0x2c, 0x65, 0x6e, 0x81, 0x7c, 0x43, 0x40, 0xa8, 0xd0, 0x17, 0xda, 0x49,
	0x55, 0xdc, 0x09, 0x9d, 0x97, 0xce, 0x13, 0xe4, 0xa5, 0x34, 0x64, 0xb5, 0x84, 0x04, 0xba, 0x11,
	0x96, 0xd0, 0x23, 0x8f, 0xba, 0x4c, 0x40, 0x02, 0xf1, 0x86, 0x4d, 0x2e, 0xa8, 0x5f, 0x19, 0xd4,
	0x0d, 0x38, 0xcf, 0x39, 0x0b, 0x15, 0x9a, 0x76, 0x11, 0xac, 0x83, 0xed, 0x7f, 0xd6, 0xef, 0xf1,
	0x8e, 0x4d, 0x07, 0xc4, 0x59, 0xac, 0x1c, 0xf0, 0x25, 0x8b, 0x08, 0xea, 0xdb, 0x88, 0xfb, 0x23,
	0xa8, 0x4f, 0x68, 0xda, 0xe4, 0xcc, 0xa2, 0xb4, 0x32, 0x57, 0x4c, 0x2b, 0xc3, 0x0f, 0x2c, 0xec,
	0xce, 0xf8, 0x4c, 0x7c, 0x64, 0x62, 0x64, 0x5a, 0xcd, 0xbf, 0xe3, 0xe1, 0x7b, 0xfc, 0xa3, 0x7e,
	0xfb, 0x8e, 0xfb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x2f, 0x40, 0x77, 0xe4, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EndToEndClient is the client API for EndToEnd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndToEndClient interface {
	// Mock performs the mock request.
	Mock(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockResponse, error)
}

type endToEndClient struct {
	cc grpc.ClientConnInterface
}

func NewEndToEndClient(cc grpc.ClientConnInterface) EndToEndClient {
	return &endToEndClient{cc}
}

func (c *endToEndClient) Mock(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockResponse, error) {
	out := new(MockResponse)
	err := c.cc.Invoke(ctx, "/drpc.e2e.EndToEnd/Mock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndToEndServer is the server API for EndToEnd service.
type EndToEndServer interface {
	// Mock performs the mock request.
	Mock(context.Context, *MockRequest) (*MockResponse, error)
}

// UnimplementedEndToEndServer can be embedded to have forward compatible implementations.
type UnimplementedEndToEndServer struct {
}

func (*UnimplementedEndToEndServer) Mock(ctx context.Context, req *MockRequest) (*MockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mock not implemented")
}

func RegisterEndToEndServer(s *grpc.Server, srv EndToEndServer) {
	s.RegisterService(&_EndToEnd_serviceDesc, srv)
}

func _EndToEnd_Mock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndToEndServer).Mock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drpc.e2e.EndToEnd/Mock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndToEndServer).Mock(ctx, req.(*MockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndToEnd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drpc.e2e.EndToEnd",
	HandlerType: (*EndToEndServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mock",
			Handler:    _EndToEnd_Mock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/aperturerobotics/bifrost/stream/drpc/e2e/e2e.proto",
}
