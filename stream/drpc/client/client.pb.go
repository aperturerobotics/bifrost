// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/stream/drpc/client/client.proto

package stream_drpc_client

import (
	fmt "fmt"
	math "math"

	drpc "github.com/aperturerobotics/bifrost/stream/drpc"
	backoff "github.com/aperturerobotics/bifrost/util/backoff"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config configures a client for a drpc service.
type Config struct {
	// ServerPeerIds are the static list of peer IDs to contact.
	ServerPeerIds []string `protobuf:"bytes,1,rep,name=server_peer_ids,json=serverPeerIds,proto3" json:"server_peer_ids,omitempty"`
	// PerServerBackoff is the server peer error backoff configuration.
	// Can be empty.
	PerServerBackoff *backoff.Backoff `protobuf:"bytes,2,opt,name=per_server_backoff,json=perServerBackoff,proto3" json:"per_server_backoff,omitempty"`
	// SrcPeerId is the source peer id to contact from.
	// Can be empty.
	SrcPeerId string `protobuf:"bytes,3,opt,name=src_peer_id,json=srcPeerId,proto3" json:"src_peer_id,omitempty"`
	// TransportId restricts which transport we can dial out from.
	TransportId uint64 `protobuf:"varint,4,opt,name=transport_id,json=transportId,proto3" json:"transport_id,omitempty"`
	// DrpcOpts are options passed to drpc.
	DrpcOpts *drpc.DrpcOpts `protobuf:"bytes,5,opt,name=drpc_opts,json=drpcOpts,proto3" json:"drpc_opts,omitempty"`
	// TimeoutDur sets the per-server establish timeout.
	// If unset, no timeout.
	// Example: 15s
	TimeoutDur           string   `protobuf:"bytes,6,opt,name=timeout_dur,json=timeoutDur,proto3" json:"timeout_dur,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_310998eed7a48ec8, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetServerPeerIds() []string {
	if m != nil {
		return m.ServerPeerIds
	}
	return nil
}

func (m *Config) GetPerServerBackoff() *backoff.Backoff {
	if m != nil {
		return m.PerServerBackoff
	}
	return nil
}

func (m *Config) GetSrcPeerId() string {
	if m != nil {
		return m.SrcPeerId
	}
	return ""
}

func (m *Config) GetTransportId() uint64 {
	if m != nil {
		return m.TransportId
	}
	return 0
}

func (m *Config) GetDrpcOpts() *drpc.DrpcOpts {
	if m != nil {
		return m.DrpcOpts
	}
	return nil
}

func (m *Config) GetTimeoutDur() string {
	if m != nil {
		return m.TimeoutDur
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "stream.drpc.client.Config")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/stream/drpc/client/client.proto", fileDescriptor_310998eed7a48ec8)
}

var fileDescriptor_310998eed7a48ec8 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x95, 0xb6, 0x54, 0xc4, 0x01, 0x51, 0x59, 0x42, 0x8a, 0x3a, 0x40, 0x60, 0x40, 0x99,
	0x12, 0xa9, 0x6c, 0x0c, 0x1d, 0x68, 0x97, 0x4e, 0xa0, 0xf0, 0x03, 0xa2, 0xc4, 0xbe, 0x14, 0x8b,
	0xb6, 0xb6, 0xce, 0x67, 0x7e, 0x03, 0x3f, 0x1b, 0xd5, 0x76, 0x11, 0x23, 0x4c, 0xcf, 0x7a, 0x7e,
	0xbe, 0xef, 0xf9, 0xd8, 0x6a, 0xab, 0xe8, 0xdd, 0xf5, 0x95, 0xd0, 0xfb, 0xba, 0x33, 0x80, 0xe4,
	0x10, 0x50, 0xf7, 0x9a, 0x94, 0xb0, 0x75, 0xaf, 0x06, 0xd4, 0x96, 0x6a, 0x4b, 0x08, 0xdd, 0xbe,
	0x96, 0x68, 0x44, 0x2d, 0x76, 0x0a, 0x0e, 0x14, 0xa5, 0x32, 0xa8, 0x49, 0x73, 0x1e, 0x02, 0xd5,
	0x31, 0x50, 0x85, 0x9b, 0xf9, 0xf2, 0x2f, 0x83, 0x1d, 0xa9, 0x5d, 0xdd, 0x77, 0xe2, 0x43, 0x0f,
	0xc3, 0x49, 0xc3, 0xcc, 0xf9, 0xd3, 0x7f, 0x8b, 0x79, 0xb8, 0x7f, 0x7b, 0xff, 0x35, 0x62, 0xd3,
	0x95, 0x3e, 0x0c, 0x6a, 0xcb, 0x1f, 0xd8, 0x95, 0x05, 0xfc, 0x04, 0x6c, 0x0d, 0x00, 0xb6, 0x4a,
	0xda, 0x3c, 0x29, 0xc6, 0x65, 0xda, 0x5c, 0x06, 0xfb, 0x15, 0x00, 0x37, 0xd2, 0xf2, 0x25, 0xe3,
	0x06, 0xb0, 0x8d, 0xd9, 0x58, 0x25, 0x1f, 0x15, 0x49, 0x99, 0x2d, 0x66, 0xd5, 0xa9, 0xda, 0x73,
	0xd0, 0x66, 0x66, 0x00, 0xdf, 0x7c, 0x34, 0x3a, 0xfc, 0x86, 0x65, 0x16, 0xc5, 0x09, 0x92, 0x8f,
	0x8b, 0xa4, 0x4c, 0x9b, 0xd4, 0xa2, 0x08, 0x00, 0x7e, 0xc7, 0x2e, 0x08, 0xbb, 0x83, 0x35, 0x1a,
	0xe9, 0x18, 0x98, 0x14, 0x49, 0x39, 0x69, 0xb2, 0x1f, 0x6f, 0x23, 0xf9, 0x82, 0xa5, 0xc7, 0x3f,
	0xb4, 0xda, 0x90, 0xcd, 0xcf, 0x3c, 0xf9, 0xba, 0xfa, 0xbd, 0xd9, 0x35, 0x1a, 0xf1, 0x62, 0xc8,
	0x36, 0xe7, 0x32, 0x9e, 0xf8, 0x2d, 0xcb, 0x48, 0xed, 0x41, 0x3b, 0x6a, 0xa5, 0xc3, 0x7c, 0xea,
	0xb1, 0x2c, 0x5a, 0x6b, 0x87, 0xfd, 0xd4, 0x6f, 0xe4, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0x11, 0x66, 0x5b, 0xe8, 0x01, 0x00, 0x00,
}
