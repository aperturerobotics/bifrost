// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/stream/drpc/drpc.proto

package stream_drpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DprcOpts are drpc connection options.
type DrpcOpts struct {
	// ManagerOpts are drpc manager options.
	ManagerOpts          *ManagerOpts `protobuf:"bytes,1,opt,name=manager_opts,json=managerOpts,proto3" json:"manager_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DrpcOpts) Reset()         { *m = DrpcOpts{} }
func (m *DrpcOpts) String() string { return proto.CompactTextString(m) }
func (*DrpcOpts) ProtoMessage()    {}
func (*DrpcOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_221d713cb39d44a6, []int{0}
}

func (m *DrpcOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DrpcOpts.Unmarshal(m, b)
}
func (m *DrpcOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DrpcOpts.Marshal(b, m, deterministic)
}
func (m *DrpcOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DrpcOpts.Merge(m, src)
}
func (m *DrpcOpts) XXX_Size() int {
	return xxx_messageInfo_DrpcOpts.Size(m)
}
func (m *DrpcOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_DrpcOpts.DiscardUnknown(m)
}

var xxx_messageInfo_DrpcOpts proto.InternalMessageInfo

func (m *DrpcOpts) GetManagerOpts() *ManagerOpts {
	if m != nil {
		return m.ManagerOpts
	}
	return nil
}

// ManagerOpts are drpc manager options.
type ManagerOpts struct {
	// WriterBufferSize controls the size of the buffer that we will fill before
	// flushing. Normal writes to streams typically issue a flush explicitly.
	WriterBufferSize uint32 `protobuf:"varint,1,opt,name=writer_buffer_size,json=writerBufferSize,proto3" json:"writer_buffer_size,omitempty"`
	// StreamOpts are options for streams created by the manager.
	StreamOpts *StreamOpts `protobuf:"bytes,2,opt,name=stream_opts,json=streamOpts,proto3" json:"stream_opts,omitempty"`
	// InactivityTimeout is the amount of time the manager will wait when creating
	// a NewServerStream. It only includes the time it is reading packets from the
	// remote client. In other words, it only includes the time that the client
	// could delay before invoking an RPC. If zero or negative, no timeout.
	InactivityTimeout    string   `protobuf:"bytes,3,opt,name=inactivity_timeout,json=inactivityTimeout,proto3" json:"inactivity_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagerOpts) Reset()         { *m = ManagerOpts{} }
func (m *ManagerOpts) String() string { return proto.CompactTextString(m) }
func (*ManagerOpts) ProtoMessage()    {}
func (*ManagerOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_221d713cb39d44a6, []int{1}
}

func (m *ManagerOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerOpts.Unmarshal(m, b)
}
func (m *ManagerOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerOpts.Marshal(b, m, deterministic)
}
func (m *ManagerOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerOpts.Merge(m, src)
}
func (m *ManagerOpts) XXX_Size() int {
	return xxx_messageInfo_ManagerOpts.Size(m)
}
func (m *ManagerOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerOpts.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerOpts proto.InternalMessageInfo

func (m *ManagerOpts) GetWriterBufferSize() uint32 {
	if m != nil {
		return m.WriterBufferSize
	}
	return 0
}

func (m *ManagerOpts) GetStreamOpts() *StreamOpts {
	if m != nil {
		return m.StreamOpts
	}
	return nil
}

func (m *ManagerOpts) GetInactivityTimeout() string {
	if m != nil {
		return m.InactivityTimeout
	}
	return ""
}

// StreamOpts are options for a drpc stream.
type StreamOpts struct {
	// SplitSize controls the default size we split packets into frames.
	SplitSize            uint32   `protobuf:"varint,1,opt,name=split_size,json=splitSize,proto3" json:"split_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamOpts) Reset()         { *m = StreamOpts{} }
func (m *StreamOpts) String() string { return proto.CompactTextString(m) }
func (*StreamOpts) ProtoMessage()    {}
func (*StreamOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_221d713cb39d44a6, []int{2}
}

func (m *StreamOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamOpts.Unmarshal(m, b)
}
func (m *StreamOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamOpts.Marshal(b, m, deterministic)
}
func (m *StreamOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamOpts.Merge(m, src)
}
func (m *StreamOpts) XXX_Size() int {
	return xxx_messageInfo_StreamOpts.Size(m)
}
func (m *StreamOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamOpts.DiscardUnknown(m)
}

var xxx_messageInfo_StreamOpts proto.InternalMessageInfo

func (m *StreamOpts) GetSplitSize() uint32 {
	if m != nil {
		return m.SplitSize
	}
	return 0
}

func init() {
	proto.RegisterType((*DrpcOpts)(nil), "stream.drpc.DrpcOpts")
	proto.RegisterType((*ManagerOpts)(nil), "stream.drpc.ManagerOpts")
	proto.RegisterType((*StreamOpts)(nil), "stream.drpc.StreamOpts")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/stream/drpc/drpc.proto", fileDescriptor_221d713cb39d44a6)
}

var fileDescriptor_221d713cb39d44a6 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xfc, 0x30,
	0x10, 0xc5, 0xe9, 0xff, 0x0f, 0xe2, 0x4e, 0x15, 0x34, 0x17, 0x7b, 0x11, 0x96, 0x9e, 0x16, 0xd4,
	0x14, 0xf4, 0x22, 0x7a, 0x13, 0xc1, 0x93, 0x08, 0x5d, 0xef, 0x25, 0x89, 0xe9, 0x3a, 0x60, 0x36,
	0x61, 0x32, 0x55, 0xdc, 0xcf, 0xe3, 0x07, 0x95, 0x26, 0x62, 0xeb, 0x25, 0x4c, 0xde, 0xef, 0x31,
	0xef, 0x31, 0x70, 0xb3, 0x41, 0x7e, 0x1d, 0xb4, 0x34, 0xde, 0x35, 0x2a, 0x58, 0xe2, 0x81, 0x2c,
	0x79, 0xed, 0x19, 0x4d, 0x6c, 0x34, 0xf6, 0xe4, 0x23, 0x37, 0x91, 0xc9, 0x2a, 0xd7, 0xbc, 0x50,
	0x30, 0xe9, 0x91, 0x81, 0x3c, 0x7b, 0x51, 0x66, 0x5d, 0x8e, 0x52, 0xfd, 0x00, 0xfb, 0xf7, 0x14,
	0xcc, 0x53, 0xe0, 0x28, 0x6e, 0xe1, 0xc0, 0xa9, 0xad, 0xda, 0x58, 0xea, 0x7c, 0xe0, 0x58, 0x15,
	0xcb, 0x62, 0x55, 0x5e, 0x56, 0x72, 0xe6, 0x97, 0x8f, 0xd9, 0x30, 0xfa, 0xdb, 0xd2, 0x4d, 0x9f,
	0xfa, 0xab, 0x80, 0x72, 0x06, 0xc5, 0x39, 0x88, 0x0f, 0x42, 0xb6, 0xd4, 0xe9, 0xa1, 0xef, 0x2d,
	0x75, 0x11, 0x77, 0x36, 0xad, 0x3c, 0x6c, 0x8f, 0x32, 0xb9, 0x4b, 0x60, 0x8d, 0x3b, 0x2b, 0xae,
	0xe1, 0xa7, 0x55, 0x4e, 0xfe, 0x97, 0x92, 0x4f, 0xfe, 0x24, 0xaf, 0xd3, 0x9c, 0x82, 0x21, 0xfe,
	0xce, 0xe2, 0x02, 0x04, 0x6e, 0x95, 0x61, 0x7c, 0x47, 0xfe, 0xec, 0x18, 0x9d, 0xf5, 0x03, 0x57,
	0xff, 0x97, 0xc5, 0x6a, 0xd1, 0x1e, 0x4f, 0xe4, 0x39, 0x83, 0xfa, 0x0c, 0x60, 0x5a, 0x24, 0x4e,
	0x01, 0x62, 0x78, 0x43, 0x9e, 0x97, 0x5b, 0x24, 0x65, 0x6c, 0xa5, 0xf7, 0xd2, 0xc1, 0xae, 0xbe,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0x3d, 0xb7, 0x80, 0x6e, 0x01, 0x00, 0x00,
}
