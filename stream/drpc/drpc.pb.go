// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0-devel
// 	protoc        v3.21.9
// source: github.com/aperturerobotics/bifrost/stream/drpc/drpc.proto

package stream_drpc

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DprcOpts are drpc connection options.
type DrpcOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ManagerOpts are drpc manager options.
	ManagerOpts *ManagerOpts `protobuf:"bytes,1,opt,name=manager_opts,json=managerOpts,proto3" json:"manager_opts,omitempty"`
}

func (x *DrpcOpts) Reset() {
	*x = DrpcOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrpcOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrpcOpts) ProtoMessage() {}

func (x *DrpcOpts) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrpcOpts.ProtoReflect.Descriptor instead.
func (*DrpcOpts) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescGZIP(), []int{0}
}

func (x *DrpcOpts) GetManagerOpts() *ManagerOpts {
	if x != nil {
		return x.ManagerOpts
	}
	return nil
}

// ManagerOpts are drpc manager options.
type ManagerOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WriterBufferSize controls the size of the buffer that we will fill before
	// flushing. Normal writes to streams typically issue a flush explicitly.
	WriterBufferSize uint32 `protobuf:"varint,1,opt,name=writer_buffer_size,json=writerBufferSize,proto3" json:"writer_buffer_size,omitempty"`
	// StreamOpts are options for streams created by the manager.
	StreamOpts *StreamOpts `protobuf:"bytes,2,opt,name=stream_opts,json=streamOpts,proto3" json:"stream_opts,omitempty"`
	// InactivityTimeout is the amount of time the manager will wait when creating
	// a NewServerStream. It only includes the time it is reading packets from the
	// remote client. In other words, it only includes the time that the client
	// could delay before invoking an RPC. If zero or negative, no timeout.
	InactivityTimeout string `protobuf:"bytes,3,opt,name=inactivity_timeout,json=inactivityTimeout,proto3" json:"inactivity_timeout,omitempty"`
}

func (x *ManagerOpts) Reset() {
	*x = ManagerOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerOpts) ProtoMessage() {}

func (x *ManagerOpts) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerOpts.ProtoReflect.Descriptor instead.
func (*ManagerOpts) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescGZIP(), []int{1}
}

func (x *ManagerOpts) GetWriterBufferSize() uint32 {
	if x != nil {
		return x.WriterBufferSize
	}
	return 0
}

func (x *ManagerOpts) GetStreamOpts() *StreamOpts {
	if x != nil {
		return x.StreamOpts
	}
	return nil
}

func (x *ManagerOpts) GetInactivityTimeout() string {
	if x != nil {
		return x.InactivityTimeout
	}
	return ""
}

// StreamOpts are options for a drpc stream.
type StreamOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SplitSize controls the default size we split packets into frames.
	SplitSize uint32 `protobuf:"varint,1,opt,name=split_size,json=splitSize,proto3" json:"split_size,omitempty"`
}

func (x *StreamOpts) Reset() {
	*x = StreamOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOpts) ProtoMessage() {}

func (x *StreamOpts) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOpts.ProtoReflect.Descriptor instead.
func (*StreamOpts) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescGZIP(), []int{2}
}

func (x *StreamOpts) GetSplitSize() uint32 {
	if x != nil {
		return x.SplitSize
	}
	return 0
}

var File_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto protoreflect.FileDescriptor

var file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x64, 0x72, 0x70,
	0x63, 0x2f, 0x64, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x64, 0x72, 0x70, 0x63, 0x22, 0x47, 0x0a, 0x08, 0x44, 0x72, 0x70,
	0x63, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x64, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x64,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2b, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescOnce sync.Once
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescData = file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDesc
)

func file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescGZIP() []byte {
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescOnce.Do(func() {
		file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescData)
	})
	return file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDescData
}

var file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_goTypes = []interface{}{
	(*DrpcOpts)(nil),    // 0: stream.drpc.DrpcOpts
	(*ManagerOpts)(nil), // 1: stream.drpc.ManagerOpts
	(*StreamOpts)(nil),  // 2: stream.drpc.StreamOpts
}
var file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_depIdxs = []int32{
	1, // 0: stream.drpc.DrpcOpts.manager_opts:type_name -> stream.drpc.ManagerOpts
	2, // 1: stream.drpc.ManagerOpts.stream_opts:type_name -> stream.drpc.StreamOpts
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_init() }
func file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_init() {
	if File_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrpcOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_goTypes,
		DependencyIndexes: file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_depIdxs,
		MessageInfos:      file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_msgTypes,
	}.Build()
	File_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto = out.File
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_rawDesc = nil
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_goTypes = nil
	file_github_com_aperturerobotics_bifrost_stream_drpc_drpc_proto_depIdxs = nil
}
