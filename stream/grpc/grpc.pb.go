// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: github.com/aperturerobotics/bifrost/stream/grpc/grpc.proto

package stream_grpc

import (
	context "context"
	forwarding "github.com/aperturerobotics/bifrost/stream/forwarding"
	accept "github.com/aperturerobotics/bifrost/stream/grpc/accept"
	dial "github.com/aperturerobotics/bifrost/stream/grpc/dial"
	rpc "github.com/aperturerobotics/bifrost/stream/grpc/rpc"
	listening "github.com/aperturerobotics/bifrost/stream/listening"
	exec "github.com/aperturerobotics/controllerbus/controller/exec"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ForwardStreamsRequest is the request type for ForwardStreams.
type ForwardStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingConfig *forwarding.Config `protobuf:"bytes,1,opt,name=forwarding_config,json=forwardingConfig,proto3" json:"forwarding_config,omitempty"`
}

func (x *ForwardStreamsRequest) Reset() {
	*x = ForwardStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardStreamsRequest) ProtoMessage() {}

func (x *ForwardStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardStreamsRequest.ProtoReflect.Descriptor instead.
func (*ForwardStreamsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{0}
}

func (x *ForwardStreamsRequest) GetForwardingConfig() *forwarding.Config {
	if x != nil {
		return x.ForwardingConfig
	}
	return nil
}

// ForwardStreamsResponse is the response type for ForwardStreams.
type ForwardStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ControllerStatus is the status of the forwarding controller.
	ControllerStatus exec.ControllerStatus `protobuf:"varint,1,opt,name=controller_status,json=controllerStatus,proto3,enum=controller.exec.ControllerStatus" json:"controller_status,omitempty"`
}

func (x *ForwardStreamsResponse) Reset() {
	*x = ForwardStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardStreamsResponse) ProtoMessage() {}

func (x *ForwardStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardStreamsResponse.ProtoReflect.Descriptor instead.
func (*ForwardStreamsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *ForwardStreamsResponse) GetControllerStatus() exec.ControllerStatus {
	if x != nil {
		return x.ControllerStatus
	}
	return exec.ControllerStatus_ControllerStatus_UNKNOWN
}

// ListenStreamsRequest is the request type for ListenStreams.
type ListenStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListeningConfig *listening.Config `protobuf:"bytes,1,opt,name=listening_config,json=listeningConfig,proto3" json:"listening_config,omitempty"`
}

func (x *ListenStreamsRequest) Reset() {
	*x = ListenStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenStreamsRequest) ProtoMessage() {}

func (x *ListenStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenStreamsRequest.ProtoReflect.Descriptor instead.
func (*ListenStreamsRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *ListenStreamsRequest) GetListeningConfig() *listening.Config {
	if x != nil {
		return x.ListeningConfig
	}
	return nil
}

// ListenStreamsResponse is the response type for ListenStreams.
type ListenStreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ControllerStatus is the status of the forwarding controller.
	ControllerStatus exec.ControllerStatus `protobuf:"varint,1,opt,name=controller_status,json=controllerStatus,proto3,enum=controller.exec.ControllerStatus" json:"controller_status,omitempty"`
}

func (x *ListenStreamsResponse) Reset() {
	*x = ListenStreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenStreamsResponse) ProtoMessage() {}

func (x *ListenStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenStreamsResponse.ProtoReflect.Descriptor instead.
func (*ListenStreamsResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *ListenStreamsResponse) GetControllerStatus() exec.ControllerStatus {
	if x != nil {
		return x.ControllerStatus
	}
	return exec.ControllerStatus_ControllerStatus_UNKNOWN
}

// AcceptStreamRequest is the request type for AcceptStream.
type AcceptStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config is the configuration for the accept.
	// The first packet will contain this value.
	Config *accept.Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Data is a data packet.
	Data *rpc.Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AcceptStreamRequest) Reset() {
	*x = AcceptStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptStreamRequest) ProtoMessage() {}

func (x *AcceptStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptStreamRequest.ProtoReflect.Descriptor instead.
func (*AcceptStreamRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *AcceptStreamRequest) GetConfig() *accept.Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AcceptStreamRequest) GetData() *rpc.Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// AcceptStreamResponse is the response type for AcceptStream.
type AcceptStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is a data packet.
	Data *rpc.Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AcceptStreamResponse) Reset() {
	*x = AcceptStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptStreamResponse) ProtoMessage() {}

func (x *AcceptStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptStreamResponse.ProtoReflect.Descriptor instead.
func (*AcceptStreamResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *AcceptStreamResponse) GetData() *rpc.Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// DialStreamRequest is the request type for DialStream.
type DialStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Config is the configuration for the dial.
	// The first packet will contain this value.
	Config *dial.Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Data is a data packet.
	Data *rpc.Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DialStreamRequest) Reset() {
	*x = DialStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialStreamRequest) ProtoMessage() {}

func (x *DialStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialStreamRequest.ProtoReflect.Descriptor instead.
func (*DialStreamRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{6}
}

func (x *DialStreamRequest) GetConfig() *dial.Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DialStreamRequest) GetData() *rpc.Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// DialStreamResponse is the response type for DialStream.
type DialStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is a data packet.
	Data *rpc.Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DialStreamResponse) Reset() {
	*x = DialStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialStreamResponse) ProtoMessage() {}

func (x *DialStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialStreamResponse.ProtoReflect.Descriptor instead.
func (*DialStreamResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP(), []int{7}
}

func (x *DialStreamResponse) GetData() *rpc.Data {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto protoreflect.FileDescriptor

var file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x62, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x65, 0x78, 0x65, 0x63, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62,
	0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x68, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x67, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x11,
	0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x64, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f,
	0x0a, 0x12, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32,
	0xfa, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x5a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0c,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescOnce sync.Once
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescData = file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDesc
)

func file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescGZIP() []byte {
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescOnce.Do(func() {
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescData)
	})
	return file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDescData
}

var file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_goTypes = []interface{}{
	(*ForwardStreamsRequest)(nil),  // 0: stream.grpc.ForwardStreamsRequest
	(*ForwardStreamsResponse)(nil), // 1: stream.grpc.ForwardStreamsResponse
	(*ListenStreamsRequest)(nil),   // 2: stream.grpc.ListenStreamsRequest
	(*ListenStreamsResponse)(nil),  // 3: stream.grpc.ListenStreamsResponse
	(*AcceptStreamRequest)(nil),    // 4: stream.grpc.AcceptStreamRequest
	(*AcceptStreamResponse)(nil),   // 5: stream.grpc.AcceptStreamResponse
	(*DialStreamRequest)(nil),      // 6: stream.grpc.DialStreamRequest
	(*DialStreamResponse)(nil),     // 7: stream.grpc.DialStreamResponse
	(*forwarding.Config)(nil),      // 8: stream.forwarding.Config
	(exec.ControllerStatus)(0),     // 9: controller.exec.ControllerStatus
	(*listening.Config)(nil),       // 10: stream.listening.Config
	(*accept.Config)(nil),          // 11: stream.grpc.accept.Config
	(*rpc.Data)(nil),               // 12: stream.grpc.rpc.Data
	(*dial.Config)(nil),            // 13: stream.grpc.dial.Config
}
var file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_depIdxs = []int32{
	8,  // 0: stream.grpc.ForwardStreamsRequest.forwarding_config:type_name -> stream.forwarding.Config
	9,  // 1: stream.grpc.ForwardStreamsResponse.controller_status:type_name -> controller.exec.ControllerStatus
	10, // 2: stream.grpc.ListenStreamsRequest.listening_config:type_name -> stream.listening.Config
	9,  // 3: stream.grpc.ListenStreamsResponse.controller_status:type_name -> controller.exec.ControllerStatus
	11, // 4: stream.grpc.AcceptStreamRequest.config:type_name -> stream.grpc.accept.Config
	12, // 5: stream.grpc.AcceptStreamRequest.data:type_name -> stream.grpc.rpc.Data
	12, // 6: stream.grpc.AcceptStreamResponse.data:type_name -> stream.grpc.rpc.Data
	13, // 7: stream.grpc.DialStreamRequest.config:type_name -> stream.grpc.dial.Config
	12, // 8: stream.grpc.DialStreamRequest.data:type_name -> stream.grpc.rpc.Data
	12, // 9: stream.grpc.DialStreamResponse.data:type_name -> stream.grpc.rpc.Data
	0,  // 10: stream.grpc.StreamService.ForwardStreams:input_type -> stream.grpc.ForwardStreamsRequest
	2,  // 11: stream.grpc.StreamService.ListenStreams:input_type -> stream.grpc.ListenStreamsRequest
	4,  // 12: stream.grpc.StreamService.AcceptStream:input_type -> stream.grpc.AcceptStreamRequest
	6,  // 13: stream.grpc.StreamService.DialStream:input_type -> stream.grpc.DialStreamRequest
	1,  // 14: stream.grpc.StreamService.ForwardStreams:output_type -> stream.grpc.ForwardStreamsResponse
	3,  // 15: stream.grpc.StreamService.ListenStreams:output_type -> stream.grpc.ListenStreamsResponse
	5,  // 16: stream.grpc.StreamService.AcceptStream:output_type -> stream.grpc.AcceptStreamResponse
	7,  // 17: stream.grpc.StreamService.DialStream:output_type -> stream.grpc.DialStreamResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_init() }
func file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_init() {
	if File_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenStreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_goTypes,
		DependencyIndexes: file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_depIdxs,
		MessageInfos:      file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_msgTypes,
	}.Build()
	File_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto = out.File
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_rawDesc = nil
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_goTypes = nil
	file_github_com_aperturerobotics_bifrost_stream_grpc_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServiceClient interface {
	// ForwardStreams forwards streams to the target multiaddress.
	// Handles HandleMountedStream directives by contacting the target.
	ForwardStreams(ctx context.Context, in *ForwardStreamsRequest, opts ...grpc.CallOption) (StreamService_ForwardStreamsClient, error)
	// ListenStreams listens for connections to the multiaddress.
	// Forwards the connections to a remote peer with a protocol ID.
	ListenStreams(ctx context.Context, in *ListenStreamsRequest, opts ...grpc.CallOption) (StreamService_ListenStreamsClient, error)
	// AcceptStream accepts an incoming stream.
	// Stream data is sent over the request / response streams.
	AcceptStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_AcceptStreamClient, error)
	// DialStream dials a outgoing stream.
	// Stream data is sent over the request / response streams.
	DialStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_DialStreamClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) ForwardStreams(ctx context.Context, in *ForwardStreamsRequest, opts ...grpc.CallOption) (StreamService_ForwardStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[0], "/stream.grpc.StreamService/ForwardStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceForwardStreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ForwardStreamsClient interface {
	Recv() (*ForwardStreamsResponse, error)
	grpc.ClientStream
}

type streamServiceForwardStreamsClient struct {
	grpc.ClientStream
}

func (x *streamServiceForwardStreamsClient) Recv() (*ForwardStreamsResponse, error) {
	m := new(ForwardStreamsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ListenStreams(ctx context.Context, in *ListenStreamsRequest, opts ...grpc.CallOption) (StreamService_ListenStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[1], "/stream.grpc.StreamService/ListenStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceListenStreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_ListenStreamsClient interface {
	Recv() (*ListenStreamsResponse, error)
	grpc.ClientStream
}

type streamServiceListenStreamsClient struct {
	grpc.ClientStream
}

func (x *streamServiceListenStreamsClient) Recv() (*ListenStreamsResponse, error) {
	m := new(ListenStreamsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) AcceptStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_AcceptStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[2], "/stream.grpc.StreamService/AcceptStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceAcceptStreamClient{stream}
	return x, nil
}

type StreamService_AcceptStreamClient interface {
	Send(*AcceptStreamRequest) error
	Recv() (*AcceptStreamResponse, error)
	grpc.ClientStream
}

type streamServiceAcceptStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceAcceptStreamClient) Send(m *AcceptStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceAcceptStreamClient) Recv() (*AcceptStreamResponse, error) {
	m := new(AcceptStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) DialStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_DialStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamService_serviceDesc.Streams[3], "/stream.grpc.StreamService/DialStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceDialStreamClient{stream}
	return x, nil
}

type StreamService_DialStreamClient interface {
	Send(*DialStreamRequest) error
	Recv() (*DialStreamResponse, error)
	grpc.ClientStream
}

type streamServiceDialStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceDialStreamClient) Send(m *DialStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceDialStreamClient) Recv() (*DialStreamResponse, error) {
	m := new(DialStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
type StreamServiceServer interface {
	// ForwardStreams forwards streams to the target multiaddress.
	// Handles HandleMountedStream directives by contacting the target.
	ForwardStreams(*ForwardStreamsRequest, StreamService_ForwardStreamsServer) error
	// ListenStreams listens for connections to the multiaddress.
	// Forwards the connections to a remote peer with a protocol ID.
	ListenStreams(*ListenStreamsRequest, StreamService_ListenStreamsServer) error
	// AcceptStream accepts an incoming stream.
	// Stream data is sent over the request / response streams.
	AcceptStream(StreamService_AcceptStreamServer) error
	// DialStream dials a outgoing stream.
	// Stream data is sent over the request / response streams.
	DialStream(StreamService_DialStreamServer) error
}

// UnimplementedStreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (*UnimplementedStreamServiceServer) ForwardStreams(*ForwardStreamsRequest, StreamService_ForwardStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method ForwardStreams not implemented")
}
func (*UnimplementedStreamServiceServer) ListenStreams(*ListenStreamsRequest, StreamService_ListenStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenStreams not implemented")
}
func (*UnimplementedStreamServiceServer) AcceptStream(StreamService_AcceptStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AcceptStream not implemented")
}
func (*UnimplementedStreamServiceServer) DialStream(StreamService_DialStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DialStream not implemented")
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_ForwardStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForwardStreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ForwardStreams(m, &streamServiceForwardStreamsServer{stream})
}

type StreamService_ForwardStreamsServer interface {
	Send(*ForwardStreamsResponse) error
	grpc.ServerStream
}

type streamServiceForwardStreamsServer struct {
	grpc.ServerStream
}

func (x *streamServiceForwardStreamsServer) Send(m *ForwardStreamsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_ListenStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenStreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).ListenStreams(m, &streamServiceListenStreamsServer{stream})
}

type StreamService_ListenStreamsServer interface {
	Send(*ListenStreamsResponse) error
	grpc.ServerStream
}

type streamServiceListenStreamsServer struct {
	grpc.ServerStream
}

func (x *streamServiceListenStreamsServer) Send(m *ListenStreamsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_AcceptStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).AcceptStream(&streamServiceAcceptStreamServer{stream})
}

type StreamService_AcceptStreamServer interface {
	Send(*AcceptStreamResponse) error
	Recv() (*AcceptStreamRequest, error)
	grpc.ServerStream
}

type streamServiceAcceptStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceAcceptStreamServer) Send(m *AcceptStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceAcceptStreamServer) Recv() (*AcceptStreamRequest, error) {
	m := new(AcceptStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_DialStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).DialStream(&streamServiceDialStreamServer{stream})
}

type StreamService_DialStreamServer interface {
	Send(*DialStreamResponse) error
	Recv() (*DialStreamRequest, error)
	grpc.ServerStream
}

type streamServiceDialStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceDialStreamServer) Send(m *DialStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceDialStreamServer) Recv() (*DialStreamRequest, error) {
	m := new(DialStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.grpc.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ForwardStreams",
			Handler:       _StreamService_ForwardStreams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenStreams",
			Handler:       _StreamService_ListenStreams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AcceptStream",
			Handler:       _StreamService_AcceptStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DialStream",
			Handler:       _StreamService_DialStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/aperturerobotics/bifrost/stream/grpc/grpc.proto",
}
