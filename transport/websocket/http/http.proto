syntax = "proto3";
package websocket.http;

import "github.com/aperturerobotics/bifrost/transport/common/quic/quic.proto";
import "github.com/aperturerobotics/bifrost/transport/common/dialer/dialer.proto";

// Config is the configuration for the Websocket HTTP handler transport.
//
// Listen for incoming connections with bifrost/http/listener
// This controller resolves LookupHTTPHandler directives filtering by ServeMux patterns.
// Example: ["GET example.com/my/ws", "GET /other/path"]
message Config {
  // TransportPeerID sets the peer ID to attach the transport to.
  // If unset, attaches to any running peer with a private key.
  string transport_peer_id = 1;
  // HttpPatterns is the list of patterns to listen on.
  // Example: ["GET example.com/my/ws", "GET /other/path"]
  repeated string http_patterns = 2;
  // PeerHttpPatterns is the list of patterns to serve the peer ID on.
  // Example: ["GET example.com/my/ws/peer-id", "GET /other/path/peer-id"]
  repeated string peer_http_patterns = 3;
  // Quic contains the quic protocol options.
  //
  // The WebSocket transport always disables FEC and several other UDP-centric
  // features which are unnecessary due to the "reliable" nature of WebSockets.
  .transport.quic.Opts quic = 4;
  // Dialers maps peer IDs to dialers.
  map<string, .dialer.DialerOpts> dialers = 5;
}
