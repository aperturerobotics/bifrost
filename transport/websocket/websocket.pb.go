// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/websocket/websocket.proto

package websocket

import (
	fmt "fmt"
	dialer "github.com/aperturerobotics/bifrost/transport/common/dialer"
	quic "github.com/aperturerobotics/bifrost/transport/common/quic"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config is the configuration for the Websocket transport.
//
// Bifrost speaks Quic over the websocket. While this is not always necessary,
// especially when using wss transports, we still need to ensure end-to-end
// encryption to the peer that we handshake with on the other end, and to manage
// stream congestion control, multiplexing,
type Config struct {
	// TransportPeerID sets the peer ID to attach the transport to.
	// If unset, attaches to any running peer with a private key.
	TransportPeerId string `protobuf:"bytes,1,opt,name=transport_peer_id,json=transportPeerId,proto3" json:"transport_peer_id,omitempty"`
	// ListenAddr contains the address to listen on.
	// Has no effect in the browser.
	ListenAddr string `protobuf:"bytes,2,opt,name=listen_addr,json=listenAddr,proto3" json:"listen_addr,omitempty"`
	// QuicOpts are the quic protocol options.
	//
	// The WebSocket transport always disables FEC and several other UDP-centric
	// features which are unnecessary due to the "reliable" nature of WebSockets.
	Quic *quic.Opts `protobuf:"bytes,3,opt,name=quic,proto3" json:"quic,omitempty"`
	// Dialers maps peer IDs to dialers.
	Dialers map[string]*dialer.DialerOpts `protobuf:"bytes,4,rep,name=dialers,proto3" json:"dialers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// RestrictPeerId restricts all incoming peer IDs to the given ID.
	// Any other peers trying to connect will be disconneted at handshake time.
	RestrictPeerId       string   `protobuf:"bytes,5,opt,name=restrict_peer_id,json=restrictPeerId,proto3" json:"restrict_peer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd1c0afc3d9a579c, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTransportPeerId() string {
	if m != nil {
		return m.TransportPeerId
	}
	return ""
}

func (m *Config) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func (m *Config) GetQuic() *quic.Opts {
	if m != nil {
		return m.Quic
	}
	return nil
}

func (m *Config) GetDialers() map[string]*dialer.DialerOpts {
	if m != nil {
		return m.Dialers
	}
	return nil
}

func (m *Config) GetRestrictPeerId() string {
	if m != nil {
		return m.RestrictPeerId
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "websocket.Config")
	proto.RegisterMapType((map[string]*dialer.DialerOpts)(nil), "websocket.Config.DialersEntry")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/websocket/websocket.proto", fileDescriptor_fd1c0afc3d9a579c)
}

var fileDescriptor_fd1c0afc3d9a579c = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0x87, 0x95, 0xfe, 0x7b, 0x55, 0xe7, 0x15, 0x14, 0x8b, 0x21, 0xea, 0x00, 0x15, 0x93, 0xc5,
	0xe0, 0x48, 0x65, 0xa9, 0xd8, 0x10, 0x45, 0xc0, 0x02, 0x28, 0x5f, 0x20, 0x4a, 0xec, 0x6b, 0xb1,
	0x9a, 0xc4, 0xe1, 0xec, 0x80, 0xfa, 0xb9, 0xf8, 0x82, 0xa8, 0x76, 0x9a, 0x76, 0x85, 0x25, 0x39,
	0x9d, 0x7f, 0xf7, 0xe8, 0xb9, 0x23, 0x8f, 0x6b, 0x65, 0xdf, 0x9b, 0x9c, 0x0b, 0x5d, 0xc6, 0x59,
	0x0d, 0x68, 0x1b, 0x04, 0xd4, 0xb9, 0xb6, 0x4a, 0x98, 0x38, 0x57, 0x2b, 0xd4, 0xc6, 0xc6, 0x16,
	0xb3, 0xca, 0xd4, 0x1a, 0x6d, 0xfc, 0x05, 0xb9, 0xd1, 0x62, 0x03, 0x47, 0x15, 0xaf, 0x51, 0x5b,
	0x4d, 0xc7, 0x5d, 0x63, 0xba, 0xfc, 0x1d, 0x53, 0xe8, 0xb2, 0xd4, 0x55, 0xfc, 0xd1, 0x28, 0xe1,
	0x3e, 0x1e, 0x38, 0x7d, 0xfa, 0x13, 0x45, 0xaa, 0xac, 0x00, 0x6c, 0x7f, 0x9e, 0x74, 0xf5, 0xdd,
	0x23, 0xa3, 0x7b, 0x5d, 0xad, 0xd4, 0x9a, 0x5e, 0x93, 0xb3, 0x6e, 0x24, 0xad, 0x01, 0x30, 0x55,
	0x32, 0x0a, 0x66, 0x01, 0x1b, 0x27, 0xa7, 0xdd, 0xc3, 0x1b, 0x00, 0x3e, 0x4b, 0x7a, 0x49, 0xc2,
	0x42, 0x19, 0x0b, 0x55, 0x9a, 0x49, 0x89, 0x51, 0xcf, 0xa5, 0x88, 0x6f, 0xdd, 0x49, 0x89, 0x94,
	0x91, 0xc1, 0xce, 0x37, 0xea, 0xcf, 0x02, 0x16, 0xce, 0xcf, 0x79, 0x07, 0xe0, 0x6e, 0x8d, 0xd7,
	0xda, 0x9a, 0xc4, 0x25, 0xe8, 0x82, 0xfc, 0xf3, 0x46, 0x26, 0x1a, 0xcc, 0xfa, 0x2c, 0x9c, 0x5f,
	0xf0, 0xc3, 0xfd, 0xbc, 0x1a, 0x5f, 0xfa, 0xc0, 0x43, 0x65, 0x71, 0x9b, 0xec, 0xe3, 0x94, 0x91,
	0x09, 0x82, 0xb1, 0xa8, 0xc4, 0xc1, 0x77, 0xe8, 0x4c, 0x4e, 0xf6, 0x7d, 0xaf, 0x3b, 0x7d, 0x21,
	0xff, 0x8f, 0x11, 0x74, 0x42, 0xfa, 0x1b, 0xd8, 0xb6, 0xcb, 0xed, 0x4a, 0xca, 0xc8, 0xf0, 0x33,
	0x2b, 0x1a, 0x70, 0xab, 0x84, 0x73, 0xca, 0xdb, 0x2b, 0xf9, 0x31, 0xa7, 0xeb, 0x03, 0xb7, 0xbd,
	0x45, 0x90, 0x8f, 0xdc, 0xf1, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0x53, 0xa5, 0xe0,
	0x22, 0x02, 0x00, 0x00,
}
