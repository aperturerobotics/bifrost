// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/transport/common/conn/conn.proto (package conn, syntax proto3)
/* eslint-disable */

import { Opts as Opts$1 } from '../quic/quic.pb.js'
import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType, ScalarType } from '@aptre/protobuf-es-lite'

export const protobufPackage = 'conn'

/**
 * Opts are extra options for the conn.
 *
 * @generated from message conn.Opts
 */
export interface Opts {
  /**
   * Quic are the quic protocol options.
   *
   * @generated from field: transport.quic.Opts quic = 1;
   */
  quic?: Opts$1
  /**
   * Verbose turns on verbose debug logging.
   *
   * @generated from field: bool verbose = 2;
   */
  verbose?: boolean
  /**
   * Mtu sets the maximum size for a single packet.
   * Defaults to 65000.
   *
   * @generated from field: uint32 mtu = 3;
   */
  mtu?: number
  /**
   * BufSize is the number of packets to buffer.
   *
   * Total memory cap is mtu * bufSize.
   * Defaults to 10.
   *
   * @generated from field: uint32 buf_size = 4;
   */
  bufSize?: number
}

// Opts contains the message type declaration for Opts.
export const Opts: MessageType<Opts> = createMessageType({
  typeName: 'conn.Opts',
  fields: [
    { no: 1, name: 'quic', kind: 'message', T: () => Opts$1 },
    { no: 2, name: 'verbose', kind: 'scalar', T: ScalarType.BOOL },
    { no: 3, name: 'mtu', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 4, name: 'buf_size', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
