// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/common/kcp/packet_type.proto

package kcp

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PacketType is a one-byte trailer indicating the type of packet.
type PacketType int32

const (
	PacketType_PacketType_HANDSHAKE  PacketType = 0
	PacketType_PacketType_RAW        PacketType = 1
	PacketType_PacketType_KCP_SMUX   PacketType = 2
	PacketType_PacketType_CLOSE_LINK PacketType = 3
)

var PacketType_name = map[int32]string{
	0: "PacketType_HANDSHAKE",
	1: "PacketType_RAW",
	2: "PacketType_KCP_SMUX",
	3: "PacketType_CLOSE_LINK",
}

var PacketType_value = map[string]int32{
	"PacketType_HANDSHAKE":  0,
	"PacketType_RAW":        1,
	"PacketType_KCP_SMUX":   2,
	"PacketType_CLOSE_LINK": 3,
}

func (x PacketType) String() string {
	return proto.EnumName(PacketType_name, int32(x))
}

func (PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_99f309c931071904, []int{0}
}

func init() {
	proto.RegisterEnum("kcp.PacketType", PacketType_name, PacketType_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/common/kcp/packet_type.proto", fileDescriptor_99f309c931071904)
}

var fileDescriptor_99f309c931071904 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcd, 0xb1, 0xae, 0x82, 0x30,
	0x14, 0xc6, 0xf1, 0x7b, 0x2f, 0xc9, 0x1d, 0x3a, 0x98, 0xa6, 0x6a, 0xd4, 0x57, 0x70, 0xa0, 0x83,
	0x4f, 0x40, 0x90, 0x04, 0x05, 0x91, 0x88, 0x46, 0xb7, 0x86, 0x36, 0x55, 0x09, 0x81, 0x73, 0x52,
	0x0e, 0x03, 0x6f, 0x6f, 0xc2, 0x22, 0xe3, 0xf7, 0xfd, 0x86, 0x3f, 0x3b, 0xbe, 0x2a, 0x7a, 0xf7,
	0xda, 0x37, 0xd0, 0xc8, 0x12, 0xad, 0xa3, 0xde, 0x59, 0x07, 0x1a, 0xa8, 0x32, 0x9d, 0xd4, 0xd5,
	0xd3, 0x41, 0x47, 0x92, 0x5c, 0xd9, 0x76, 0x08, 0x8e, 0xa4, 0x81, 0xa6, 0x81, 0x56, 0xd6, 0x06,
	0x25, 0x96, 0xa6, 0xb6, 0xa4, 0x68, 0x40, 0xeb, 0xa3, 0x03, 0x02, 0xe1, 0xd5, 0x06, 0xb7, 0x2d,
	0x63, 0xf9, 0x28, 0xd7, 0x01, 0xad, 0x58, 0xb3, 0xc5, 0x77, 0xa9, 0x38, 0xc8, 0xf6, 0x45, 0x1c,
	0x24, 0x11, 0xff, 0x11, 0x82, 0xcd, 0x26, 0x72, 0x09, 0xee, 0xfc, 0x57, 0xac, 0xd8, 0x7c, 0xf2,
	0x25, 0x61, 0xae, 0x8a, 0xd3, 0xed, 0xc1, 0xff, 0xc4, 0x86, 0x2d, 0x27, 0x10, 0xa6, 0xe7, 0x22,
	0x52, 0xe9, 0x21, 0x4b, 0xb8, 0xa7, 0xff, 0xc7, 0xf6, 0xee, 0x13, 0x00, 0x00, 0xff, 0xff, 0x46,
	0xc5, 0xaa, 0xd8, 0xc9, 0x00, 0x00, 0x00,
}
