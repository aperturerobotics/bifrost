// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.3.1-0.20220531071333-dfd3d322ffb6
// source: github.com/aperturerobotics/bifrost/transport/common/kcp/kcp.proto

package kcp

import (
	fmt "fmt"
	io "io"

	blockcompress "github.com/aperturerobotics/bifrost/util/blockcompress"
	blockcrypt "github.com/aperturerobotics/bifrost/util/blockcrypt"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (this *Opts) EqualVT(that *Opts) bool {
	if this == nil {
		return that == nil || that.String() == ""
	} else if that == nil {
		return this.String() == ""
	}
	if this.DataShards != that.DataShards {
		return false
	}
	if this.ParityShards != that.ParityShards {
		return false
	}
	if this.Mtu != that.Mtu {
		return false
	}
	if this.KcpMode != that.KcpMode {
		return false
	}
	if this.BlockCrypt != that.BlockCrypt {
		return false
	}
	if this.BlockCompress != that.BlockCompress {
		return false
	}
	if this.StreamMuxer != that.StreamMuxer {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (m *Opts) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Opts) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Opts) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.StreamMuxer != 0 {
		i = encodeVarint(dAtA, i, uint64(m.StreamMuxer))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockCompress != 0 {
		i = encodeVarint(dAtA, i, uint64(m.BlockCompress))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockCrypt != 0 {
		i = encodeVarint(dAtA, i, uint64(m.BlockCrypt))
		i--
		dAtA[i] = 0x28
	}
	if m.KcpMode != 0 {
		i = encodeVarint(dAtA, i, uint64(m.KcpMode))
		i--
		dAtA[i] = 0x20
	}
	if m.Mtu != 0 {
		i = encodeVarint(dAtA, i, uint64(m.Mtu))
		i--
		dAtA[i] = 0x18
	}
	if m.ParityShards != 0 {
		i = encodeVarint(dAtA, i, uint64(m.ParityShards))
		i--
		dAtA[i] = 0x10
	}
	if m.DataShards != 0 {
		i = encodeVarint(dAtA, i, uint64(m.DataShards))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Opts) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataShards != 0 {
		n += 1 + sov(uint64(m.DataShards))
	}
	if m.ParityShards != 0 {
		n += 1 + sov(uint64(m.ParityShards))
	}
	if m.Mtu != 0 {
		n += 1 + sov(uint64(m.Mtu))
	}
	if m.KcpMode != 0 {
		n += 1 + sov(uint64(m.KcpMode))
	}
	if m.BlockCrypt != 0 {
		n += 1 + sov(uint64(m.BlockCrypt))
	}
	if m.BlockCompress != 0 {
		n += 1 + sov(uint64(m.BlockCompress))
	}
	if m.StreamMuxer != 0 {
		n += 1 + sov(uint64(m.StreamMuxer))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Opts) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Opts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Opts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataShards", wireType)
			}
			m.DataShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataShards |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParityShards", wireType)
			}
			m.ParityShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParityShards |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KcpMode", wireType)
			}
			m.KcpMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KcpMode |= KCPMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCrypt", wireType)
			}
			m.BlockCrypt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCrypt |= blockcrypt.BlockCrypt(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCompress", wireType)
			}
			m.BlockCompress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCompress |= blockcompress.BlockCompress(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamMuxer", wireType)
			}
			m.StreamMuxer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamMuxer |= StreamMuxer(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
