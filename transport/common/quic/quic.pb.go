// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/common/quic/quic.proto

package transport_quic

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Opts struct {
	// MaxIdleTimeoutDur is the duration of idle after which conn is closed.
	//
	// If unset, the max idle timeout will be disabled.
	MaxIdleTimeoutDur string `protobuf:"bytes,1,opt,name=max_idle_timeout_dur,json=maxIdleTimeoutDur,proto3" json:"max_idle_timeout_dur,omitempty"`
	// MaxIncomingStreams is the maximum number of concurrent bidirectional
	// streams that a peer is allowed to open.
	//
	// If unset or negative, defaults to 100000.
	MaxIncomingStreams int32 `protobuf:"varint,2,opt,name=max_incoming_streams,json=maxIncomingStreams,proto3" json:"max_incoming_streams,omitempty"`
	// DisableKeepAlive disables the keep alive packets.
	DisableKeepAlive bool `protobuf:"varint,3,opt,name=disable_keep_alive,json=disableKeepAlive,proto3" json:"disable_keep_alive,omitempty"`
	// DisableDatagrams disables the unreliable datagrams feature.
	// Both peers must support it for it to be enabled, regardless of this flag.
	DisableDatagrams bool `protobuf:"varint,4,opt,name=disable_datagrams,json=disableDatagrams,proto3" json:"disable_datagrams,omitempty"`
	// DisablePathMtuDiscovery disables sending packets to discover max packet size.
	DisablePathMtuDiscovery bool `protobuf:"varint,5,opt,name=disable_path_mtu_discovery,json=disablePathMtuDiscovery,proto3" json:"disable_path_mtu_discovery,omitempty"`
	// Verbose indicates to use verbose logging.
	// Note: this is VERY verbose, logs every packet sent.
	Verbose              bool     `protobuf:"varint,6,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Opts) Reset()         { *m = Opts{} }
func (m *Opts) String() string { return proto.CompactTextString(m) }
func (*Opts) ProtoMessage()    {}
func (*Opts) Descriptor() ([]byte, []int) {
	return fileDescriptor_684a33466d85b461, []int{0}
}

func (m *Opts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Opts.Unmarshal(m, b)
}
func (m *Opts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Opts.Marshal(b, m, deterministic)
}
func (m *Opts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Opts.Merge(m, src)
}
func (m *Opts) XXX_Size() int {
	return xxx_messageInfo_Opts.Size(m)
}
func (m *Opts) XXX_DiscardUnknown() {
	xxx_messageInfo_Opts.DiscardUnknown(m)
}

var xxx_messageInfo_Opts proto.InternalMessageInfo

func (m *Opts) GetMaxIdleTimeoutDur() string {
	if m != nil {
		return m.MaxIdleTimeoutDur
	}
	return ""
}

func (m *Opts) GetMaxIncomingStreams() int32 {
	if m != nil {
		return m.MaxIncomingStreams
	}
	return 0
}

func (m *Opts) GetDisableKeepAlive() bool {
	if m != nil {
		return m.DisableKeepAlive
	}
	return false
}

func (m *Opts) GetDisableDatagrams() bool {
	if m != nil {
		return m.DisableDatagrams
	}
	return false
}

func (m *Opts) GetDisablePathMtuDiscovery() bool {
	if m != nil {
		return m.DisablePathMtuDiscovery
	}
	return false
}

func (m *Opts) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func init() {
	proto.RegisterType((*Opts)(nil), "transport.quic.Opts")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/common/quic/quic.proto", fileDescriptor_684a33466d85b461)
}

var fileDescriptor_684a33466d85b461 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0x49, 0xbf, 0xb6, 0x9f, 0xee, 0x41, 0xec, 0x22, 0x18, 0x3c, 0x15, 0x4f, 0x05, 0xa5,
	0x11, 0x3c, 0x7a, 0x12, 0x72, 0x11, 0x11, 0xa5, 0x7a, 0x5f, 0x36, 0xbb, 0x63, 0xbb, 0x98, 0xcd,
	0xac, 0xb3, 0xb3, 0xa1, 0xfe, 0x16, 0xff, 0xac, 0x24, 0x4d, 0x04, 0x2f, 0x03, 0xf3, 0x3e, 0xcf,
	0x3b, 0x87, 0x11, 0xe5, 0xd6, 0xf1, 0x2e, 0x55, 0x6b, 0x83, 0xbe, 0xd0, 0x01, 0x88, 0x13, 0x01,
	0x61, 0x85, 0xec, 0x4c, 0x2c, 0x2a, 0xf7, 0x4e, 0x18, 0xb9, 0x60, 0xd2, 0x4d, 0x0c, 0x48, 0x5c,
	0x18, 0xf4, 0x1e, 0x9b, 0xe2, 0x33, 0x39, 0xd3, 0x8f, 0x75, 0x20, 0x64, 0x94, 0x27, 0xbf, 0xc6,
	0xba, 0x4b, 0x2f, 0xbf, 0x27, 0x62, 0xfa, 0x1c, 0x38, 0xca, 0x42, 0x9c, 0x79, 0xbd, 0x57, 0xce,
	0xd6, 0xa0, 0xd8, 0x79, 0xc0, 0xc4, 0xca, 0x26, 0xca, 0xb3, 0x65, 0xb6, 0x3a, 0xde, 0x2c, 0xbc,
	0xde, 0x3f, 0xd8, 0x1a, 0xde, 0x0e, 0xa4, 0x4c, 0x24, 0x6f, 0x86, 0x42, 0x63, 0xd0, 0xbb, 0x66,
	0xab, 0x22, 0x13, 0x68, 0x1f, 0xf3, 0xc9, 0x32, 0x5b, 0xcd, 0x36, 0xb2, 0x2b, 0x0c, 0xe8, 0xf5,
	0x40, 0xe4, 0xb5, 0x90, 0xd6, 0x45, 0x5d, 0xd5, 0xa0, 0x3e, 0x00, 0x82, 0xd2, 0xb5, 0x6b, 0x21,
	0xff, 0xb7, 0xcc, 0x56, 0x47, 0x9b, 0xd3, 0x81, 0x3c, 0x02, 0x84, 0xfb, 0x2e, 0x97, 0x57, 0x62,
	0x31, 0xda, 0x56, 0xb3, 0xde, 0x52, 0x77, 0x7c, 0xfa, 0x47, 0x2e, 0xc7, 0x5c, 0xde, 0x89, 0x8b,
	0x51, 0x0e, 0x9a, 0x77, 0xca, 0x73, 0x52, 0xd6, 0x45, 0x83, 0x2d, 0xd0, 0x57, 0x3e, 0xeb, 0x5b,
	0xe7, 0x83, 0xf1, 0xa2, 0x79, 0xf7, 0xc4, 0xa9, 0x1c, 0xb1, 0xcc, 0xc5, 0xff, 0x16, 0xa8, 0xc2,
	0x08, 0xf9, 0xbc, 0x37, 0xc7, 0xb5, 0x9a, 0xf7, 0x4f, 0xbb, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x16, 0xb3, 0x38, 0x21, 0x7c, 0x01, 0x00, 0x00,
}
