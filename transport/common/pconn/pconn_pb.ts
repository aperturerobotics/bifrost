// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/transport/common/pconn/pconn.proto (package pconn, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Opts as Opts$1 } from '../quic/quic_pb.js'

/**
 * Opts are extra options for the packet conn.
 *
 * @generated from message pconn.Opts
 */
export class Opts extends Message<Opts> {
  /**
   * Quic are the quic protocol options.
   *
   * @generated from field: transport.quic.Opts quic = 1;
   */
  quic?: Opts$1

  /**
   * Verbose turns on verbose debug logging.
   *
   * @generated from field: bool verbose = 2;
   */
  verbose = false

  constructor(data?: PartialMessage<Opts>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pconn.Opts'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'quic', kind: 'message', T: Opts$1 },
    { no: 2, name: 'verbose', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Opts {
    return new Opts().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Opts {
    return new Opts().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Opts {
    return new Opts().fromJsonString(jsonString, options)
  }

  static equals(
    a: Opts | PlainMessage<Opts> | undefined,
    b: Opts | PlainMessage<Opts> | undefined,
  ): boolean {
    return proto3.util.equals(Opts, a, b)
  }
}
