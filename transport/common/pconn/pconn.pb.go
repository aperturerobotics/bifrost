// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/common/pconn/pconn.proto

package pconn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Opts are extra options for the packet conn.
type Opts struct {
	// DataShards are the number of FEC data shards to use. By adding t check
	// symbols to the data, a Reed–Solomon code can detect any combination of up
	// to t erroneous symbols, or correct up to ⌊t/2⌋ symbols. As an erasure code,
	// it can correct up to t known erasures, or it can detect and correct
	// combinations of errors and erasures. Furthermore, Reed–Solomon codes are
	// suitable as multiple-burst bit-error correcting codes, since a sequence of
	// b + 1 consecutive bit errors can affect at most two symbols of size b. The
	// choice of t is up to the designer of the code, and may be selected within
	// wide limits. Maximum is 256.
	// Recommended: 10
	// If zero, FEC is disabled.
	DataShards uint32 `protobuf:"varint,1,opt,name=data_shards,json=dataShards" json:"data_shards,omitempty"`
	// ParityShards are the number of FEC parity shards to use.
	// Recommended: 3
	ParityShards uint32 `protobuf:"varint,2,opt,name=parity_shards,json=parityShards" json:"parity_shards,omitempty"`
	// Mtu is the maximum transmission unit to use.
	// Defaults to 1350 (UDP safe packet size).
	Mtu                  uint32   `protobuf:"varint,3,opt,name=mtu" json:"mtu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Opts) Reset()         { *m = Opts{} }
func (m *Opts) String() string { return proto.CompactTextString(m) }
func (*Opts) ProtoMessage()    {}
func (*Opts) Descriptor() ([]byte, []int) {
	return fileDescriptor_pconn_116a5ee20024a152, []int{0}
}
func (m *Opts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Opts.Unmarshal(m, b)
}
func (m *Opts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Opts.Marshal(b, m, deterministic)
}
func (dst *Opts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Opts.Merge(dst, src)
}
func (m *Opts) XXX_Size() int {
	return xxx_messageInfo_Opts.Size(m)
}
func (m *Opts) XXX_DiscardUnknown() {
	xxx_messageInfo_Opts.DiscardUnknown(m)
}

var xxx_messageInfo_Opts proto.InternalMessageInfo

func (m *Opts) GetDataShards() uint32 {
	if m != nil {
		return m.DataShards
	}
	return 0
}

func (m *Opts) GetParityShards() uint32 {
	if m != nil {
		return m.ParityShards
	}
	return 0
}

func (m *Opts) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func init() {
	proto.RegisterType((*Opts)(nil), "pconn.Opts")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/common/pconn/pconn.proto", fileDescriptor_pconn_116a5ee20024a152)
}

var fileDescriptor_pconn_116a5ee20024a152 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8d, 0xb1, 0xae, 0xc2, 0x30,
	0x0c, 0x45, 0xd5, 0xd7, 0x07, 0x43, 0xa0, 0x12, 0xea, 0xd4, 0x0d, 0x04, 0x0b, 0x53, 0x33, 0xf0,
	0x0f, 0xac, 0x48, 0xb0, 0x83, 0x9c, 0xb4, 0xd0, 0x0c, 0xa9, 0x2d, 0xdb, 0x19, 0xf8, 0x7b, 0xd4,
	0x50, 0x16, 0xcb, 0xf7, 0xdc, 0x23, 0x5d, 0x73, 0x7e, 0x05, 0x1d, 0x92, 0x6b, 0x3d, 0x46, 0x0b,
	0xd4, 0xb3, 0x26, 0xee, 0x19, 0x1d, 0x6a, 0xf0, 0x62, 0x5d, 0x78, 0x32, 0x8a, 0x5a, 0x65, 0x18,
	0x85, 0x90, 0xd5, 0x7a, 0x8c, 0x11, 0x47, 0x4b, 0x1e, 0xc7, 0xf9, 0xb6, 0xc4, 0xa8, 0x58, 0x2f,
	0x72, 0xd8, 0xdf, 0xcd, 0xff, 0x85, 0x54, 0xea, 0xad, 0x59, 0x75, 0xa0, 0xf0, 0x90, 0x01, 0xb8,
	0x93, 0xa6, 0xd8, 0x15, 0xc7, 0xea, 0x6a, 0x26, 0x74, 0xcb, 0xa4, 0x3e, 0x98, 0x8a, 0x80, 0x83,
	0xbe, 0x7f, 0xca, 0x5f, 0x56, 0xd6, 0x5f, 0x38, 0x4b, 0x1b, 0x53, 0x46, 0x4d, 0x4d, 0x99, 0xab,
	0xe9, 0x75, 0xcb, 0xbc, 0x76, 0xfa, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x9d, 0x0d, 0x78, 0xb7,
	0x00, 0x00, 0x00,
}
