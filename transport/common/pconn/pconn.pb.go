// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/common/pconn/pconn.proto

package pconn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// KCPMode is the mode to set KCP to.
type KCPMode int32

const (
	// KCPMode_UNKNOWN defaults to normal mode.
	KCPMode_KCPMode_UNKNOWN KCPMode = 0
	// KCPMode_NORMAL is the normal mode.
	// NoDelay = 0
	// Interval = 40
	// Resend = 2
	// NoCongestion = 1
	KCPMode_KCPMode_NORMAL KCPMode = 1
	// KCPMode_FAST is the "fast" mode.
	// NoDelay = 0
	// Interval = 30
	// Resend = 2
	// NoCongestion = 1
	KCPMode_KCPMode_FAST KCPMode = 2
	// KCPMode_FAST2 is the "fast2" mode.
	// NoDelay = 1
	// Interval = 20
	// Resend = 2
	// NoCongestion = 1
	KCPMode_KCPMode_FAST2 KCPMode = 3
	// KCPMode_FAST3 is the "fast3" mode.
	// NoDelay = 1
	// Interval = 10
	// Resend = 2
	// NoCongestion = 1
	KCPMode_KCPMode_FAST3 KCPMode = 4
	// KCPMode_SLOW1 is the slow 1 mode.
	// NoDelay = 0
	// Interval = 100
	// Resend = 0
	// NoCongestion = 0
	KCPMode_KCPMode_SLOW1 KCPMode = 5
)

var KCPMode_name = map[int32]string{
	0: "KCPMode_UNKNOWN",
	1: "KCPMode_NORMAL",
	2: "KCPMode_FAST",
	3: "KCPMode_FAST2",
	4: "KCPMode_FAST3",
	5: "KCPMode_SLOW1",
}
var KCPMode_value = map[string]int32{
	"KCPMode_UNKNOWN": 0,
	"KCPMode_NORMAL":  1,
	"KCPMode_FAST":    2,
	"KCPMode_FAST2":   3,
	"KCPMode_FAST3":   4,
	"KCPMode_SLOW1":   5,
}

func (x KCPMode) String() string {
	return proto.EnumName(KCPMode_name, int32(x))
}
func (KCPMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pconn_193b809645808d23, []int{0}
}

// BlockCompress sets the type of compression to use.
type BlockCompress int32

const (
	// BlockCompress_NONE indicates no compression.
	BlockCompress_BlockCompress_NONE BlockCompress = 0
	// BlockCompress_SNAPPY indicates Snappy compression.
	BlockCompress_BlockCompress_SNAPPY BlockCompress = 1
)

var BlockCompress_name = map[int32]string{
	0: "BlockCompress_NONE",
	1: "BlockCompress_SNAPPY",
}
var BlockCompress_value = map[string]int32{
	"BlockCompress_NONE":   0,
	"BlockCompress_SNAPPY": 1,
}

func (x BlockCompress) String() string {
	return proto.EnumName(BlockCompress_name, int32(x))
}
func (BlockCompress) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pconn_193b809645808d23, []int{1}
}

// StreamMuxer sets the type of stream muxer to use.
type StreamMuxer int32

const (
	// StreamMuxer_UNKNOWN defaults to StreamMuxer_XTACI_SMUX
	StreamMuxer_StreamMuxer_UNKNOWN StreamMuxer = 0
	// StreamMuxer_XTACI_SMUX is the xtaci/smux muxer.
	StreamMuxer_StreamMuxer_XTACI_SMUX StreamMuxer = 1
	// StreamMuxer_YAMUX is the yamux muxer.
	StreamMuxer_StreamMuxer_YAMUX StreamMuxer = 2
)

var StreamMuxer_name = map[int32]string{
	0: "StreamMuxer_UNKNOWN",
	1: "StreamMuxer_XTACI_SMUX",
	2: "StreamMuxer_YAMUX",
}
var StreamMuxer_value = map[string]int32{
	"StreamMuxer_UNKNOWN":    0,
	"StreamMuxer_XTACI_SMUX": 1,
	"StreamMuxer_YAMUX":      2,
}

func (x StreamMuxer) String() string {
	return proto.EnumName(StreamMuxer_name, int32(x))
}
func (StreamMuxer) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pconn_193b809645808d23, []int{2}
}

// BlockCrypt sets the type of block crypto to use.
type BlockCrypt int32

const (
	// BlockCrypt_UNKNOWN defaults to BlockCrypt_AES256
	BlockCrypt_BlockCrypt_UNKNOWN BlockCrypt = 0
	// BlockCrypt_AES256 is AES 256-bit block encryption.
	BlockCrypt_BlockCrypt_AES256 BlockCrypt = 1
	// BlockCrypt_AES128 is AES 128-bit block encryption.
	BlockCrypt_BlockCrypt_AES128 BlockCrypt = 2
	// BlockCrypt_AES192 is AES 192-bit block encryption.
	BlockCrypt_BlockCrypt_AES192 BlockCrypt = 3
	// BlockCrypt_SM4_16 is SM4 16-bit block encryption.
	BlockCrypt_BlockCrypt_SM4_16 BlockCrypt = 4
	// BlockCrypt_TEA16 is 16-bit TEA block encryption.
	BlockCrypt_BlockCrypt_TEA16 BlockCrypt = 5
	// BlockCrypt_XOR is simple XOR block encryption.
	BlockCrypt_BlockCrypt_XOR BlockCrypt = 6
	// BlockCrypt_NONE is unencrypted.
	BlockCrypt_BlockCrypt_NONE BlockCrypt = 7
	// BlockCrypt_BLOWFISH is blowfish 32-bit block encryption.
	BlockCrypt_BlockCrypt_BLOWFISH BlockCrypt = 8
	// BlockCrypt_TWOFISH is twofish 32-bit block encryption.
	BlockCrypt_BlockCrypt_TWOFISH BlockCrypt = 9
	// BlockCrypt_CAST5 is cast5 16bit block encryption.
	BlockCrypt_BlockCrypt_CAST5 BlockCrypt = 10
	// BlockCrypt_3DES is 3des 24-bit block encryption.
	BlockCrypt_BlockCrypt_3DES BlockCrypt = 11
	// BlockCrypt_XTEA is xtea 16-bit block encryption.
	BlockCrypt_BlockCrypt_XTEA BlockCrypt = 12
	// BlockCrypt_SALSA20 is salsa20 32-bit block encryption.
	BlockCrypt_BlockCrypt_SALSA20 BlockCrypt = 13
)

var BlockCrypt_name = map[int32]string{
	0:  "BlockCrypt_UNKNOWN",
	1:  "BlockCrypt_AES256",
	2:  "BlockCrypt_AES128",
	3:  "BlockCrypt_AES192",
	4:  "BlockCrypt_SM4_16",
	5:  "BlockCrypt_TEA16",
	6:  "BlockCrypt_XOR",
	7:  "BlockCrypt_NONE",
	8:  "BlockCrypt_BLOWFISH",
	9:  "BlockCrypt_TWOFISH",
	10: "BlockCrypt_CAST5",
	11: "BlockCrypt_3DES",
	12: "BlockCrypt_XTEA",
	13: "BlockCrypt_SALSA20",
}
var BlockCrypt_value = map[string]int32{
	"BlockCrypt_UNKNOWN":  0,
	"BlockCrypt_AES256":   1,
	"BlockCrypt_AES128":   2,
	"BlockCrypt_AES192":   3,
	"BlockCrypt_SM4_16":   4,
	"BlockCrypt_TEA16":    5,
	"BlockCrypt_XOR":      6,
	"BlockCrypt_NONE":     7,
	"BlockCrypt_BLOWFISH": 8,
	"BlockCrypt_TWOFISH":  9,
	"BlockCrypt_CAST5":    10,
	"BlockCrypt_3DES":     11,
	"BlockCrypt_XTEA":     12,
	"BlockCrypt_SALSA20":  13,
}

func (x BlockCrypt) String() string {
	return proto.EnumName(BlockCrypt_name, int32(x))
}
func (BlockCrypt) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pconn_193b809645808d23, []int{3}
}

// Opts are extra options for the packet conn.
type Opts struct {
	// DataShards are the number of FEC data shards to use. By adding t check
	// symbols to the data, a Reed–Solomon code can detect any combination of up
	// to t erroneous symbols, or correct up to ⌊t/2⌋ symbols. As an erasure code,
	// it can correct up to t known erasures, or it can detect and correct
	// combinations of errors and erasures. Furthermore, Reed–Solomon codes are
	// suitable as multiple-burst bit-error correcting codes, since a sequence of
	// b + 1 consecutive bit errors can affect at most two symbols of size b. The
	// choice of t is up to the designer of the code, and may be selected within
	// wide limits. Maximum is 256.
	// Recommended: 10
	// If zero, FEC is disabled.
	DataShards uint32 `protobuf:"varint,1,opt,name=data_shards,json=dataShards" json:"data_shards,omitempty"`
	// ParityShards are the number of FEC parity shards to use.
	// Recommended: 3
	ParityShards uint32 `protobuf:"varint,2,opt,name=parity_shards,json=parityShards" json:"parity_shards,omitempty"`
	// Mtu is the maximum transmission unit to use.
	// Defaults to 1350 (UDP safe packet size).
	Mtu uint32 `protobuf:"varint,3,opt,name=mtu" json:"mtu,omitempty"`
	// KcpMode is the KCP mode.
	KcpMode KCPMode `protobuf:"varint,4,opt,name=kcp_mode,json=kcpMode,enum=pconn.KCPMode" json:"kcp_mode,omitempty"`
	// BlockCrypt is the block crypto to use.
	// Defaults to AES256.
	// Uses the handshake-negotiated session key.
	BlockCrypt BlockCrypt `protobuf:"varint,5,opt,name=block_crypt,json=blockCrypt,enum=pconn.BlockCrypt" json:"block_crypt,omitempty"`
	// BlockCompress is the block compression to use.
	BlockCompress BlockCompress `protobuf:"varint,6,opt,name=block_compress,json=blockCompress,enum=pconn.BlockCompress" json:"block_compress,omitempty"`
	// StreamMuxer is the stream muxer to use.
	// Defaults to smux.
	StreamMuxer          StreamMuxer `protobuf:"varint,7,opt,name=stream_muxer,json=streamMuxer,enum=pconn.StreamMuxer" json:"stream_muxer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Opts) Reset()         { *m = Opts{} }
func (m *Opts) String() string { return proto.CompactTextString(m) }
func (*Opts) ProtoMessage()    {}
func (*Opts) Descriptor() ([]byte, []int) {
	return fileDescriptor_pconn_193b809645808d23, []int{0}
}
func (m *Opts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Opts.Unmarshal(m, b)
}
func (m *Opts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Opts.Marshal(b, m, deterministic)
}
func (dst *Opts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Opts.Merge(dst, src)
}
func (m *Opts) XXX_Size() int {
	return xxx_messageInfo_Opts.Size(m)
}
func (m *Opts) XXX_DiscardUnknown() {
	xxx_messageInfo_Opts.DiscardUnknown(m)
}

var xxx_messageInfo_Opts proto.InternalMessageInfo

func (m *Opts) GetDataShards() uint32 {
	if m != nil {
		return m.DataShards
	}
	return 0
}

func (m *Opts) GetParityShards() uint32 {
	if m != nil {
		return m.ParityShards
	}
	return 0
}

func (m *Opts) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Opts) GetKcpMode() KCPMode {
	if m != nil {
		return m.KcpMode
	}
	return KCPMode_KCPMode_UNKNOWN
}

func (m *Opts) GetBlockCrypt() BlockCrypt {
	if m != nil {
		return m.BlockCrypt
	}
	return BlockCrypt_BlockCrypt_UNKNOWN
}

func (m *Opts) GetBlockCompress() BlockCompress {
	if m != nil {
		return m.BlockCompress
	}
	return BlockCompress_BlockCompress_NONE
}

func (m *Opts) GetStreamMuxer() StreamMuxer {
	if m != nil {
		return m.StreamMuxer
	}
	return StreamMuxer_StreamMuxer_UNKNOWN
}

func init() {
	proto.RegisterType((*Opts)(nil), "pconn.Opts")
	proto.RegisterEnum("pconn.KCPMode", KCPMode_name, KCPMode_value)
	proto.RegisterEnum("pconn.BlockCompress", BlockCompress_name, BlockCompress_value)
	proto.RegisterEnum("pconn.StreamMuxer", StreamMuxer_name, StreamMuxer_value)
	proto.RegisterEnum("pconn.BlockCrypt", BlockCrypt_name, BlockCrypt_value)
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/common/pconn/pconn.proto", fileDescriptor_pconn_193b809645808d23)
}

var fileDescriptor_pconn_193b809645808d23 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x4d, 0x6f, 0xda, 0x4c,
	0x10, 0xc7, 0x63, 0x07, 0x42, 0x9e, 0x01, 0xf3, 0x2c, 0x9b, 0x97, 0x5a, 0xbd, 0x34, 0x6a, 0x2f,
	0x29, 0x87, 0x50, 0x9c, 0x26, 0x6a, 0xd5, 0xd3, 0x86, 0x12, 0x35, 0x0a, 0xd8, 0x91, 0xd7, 0x11,
	0x70, 0xb2, 0x6c, 0xe3, 0x36, 0x88, 0x9a, 0xb5, 0xd6, 0x8b, 0xd4, 0x1c, 0xfa, 0xa1, 0xfa, 0x2d,
	0xfa, 0xb1, 0xaa, 0x35, 0xa6, 0xac, 0xad, 0x5e, 0xac, 0x99, 0xdf, 0x7f, 0x66, 0x3c, 0x2f, 0x5a,
	0xb8, 0xfd, 0xb6, 0x10, 0x4f, 0xeb, 0xf0, 0x22, 0x62, 0x49, 0x2f, 0x48, 0x63, 0x2e, 0xd6, 0x3c,
	0xe6, 0x2c, 0x64, 0x62, 0x11, 0x65, 0xbd, 0x70, 0xf1, 0x95, 0xb3, 0x4c, 0xf4, 0x04, 0x0f, 0x56,
	0x59, 0xca, 0xb8, 0xe8, 0x45, 0x2c, 0x49, 0xd8, 0xaa, 0x97, 0x46, 0x6c, 0x55, 0x7c, 0x2f, 0x52,
	0xce, 0x04, 0xc3, 0xf5, 0xdc, 0x79, 0xfd, 0x4b, 0x87, 0x9a, 0x93, 0x8a, 0x0c, 0xbf, 0x82, 0xe6,
	0x3c, 0x10, 0x81, 0x9f, 0x3d, 0x05, 0x7c, 0x9e, 0x99, 0xda, 0x99, 0x76, 0x6e, 0xb8, 0x20, 0x11,
	0xcd, 0x09, 0x7e, 0x03, 0x46, 0x1a, 0xf0, 0x85, 0x78, 0xde, 0x86, 0xe8, 0x79, 0x48, 0x6b, 0x03,
	0x8b, 0x20, 0x04, 0xfb, 0x89, 0x58, 0x9b, 0xfb, 0xb9, 0x24, 0x4d, 0xfc, 0x16, 0x0e, 0x97, 0x51,
	0xea, 0x27, 0x6c, 0x1e, 0x9b, 0xb5, 0x33, 0xed, 0xbc, 0x6d, 0xb5, 0x2f, 0x36, 0x7d, 0xdc, 0x0f,
	0x1e, 0xc6, 0x6c, 0x1e, 0xbb, 0x8d, 0x65, 0x94, 0x4a, 0x03, 0x5b, 0xd0, 0x0c, 0xbf, 0xb3, 0x68,
	0xe9, 0x47, 0xfc, 0x39, 0x15, 0x66, 0x3d, 0x8f, 0xee, 0x14, 0xd1, 0x37, 0x52, 0x19, 0x48, 0xc1,
	0x85, 0xf0, 0xaf, 0x8d, 0x3f, 0x41, 0xbb, 0xc8, 0x61, 0x49, 0xca, 0xe3, 0x2c, 0x33, 0x0f, 0xf2,
	0xb4, 0xe3, 0x52, 0x5a, 0xa1, 0xb9, 0x46, 0xa8, 0xba, 0xf8, 0x0a, 0x5a, 0x99, 0xe0, 0x71, 0x90,
	0xf8, 0xc9, 0xfa, 0x47, 0xcc, 0xcd, 0x46, 0x9e, 0x8a, 0x8b, 0x54, 0x9a, 0x4b, 0x63, 0xa9, 0xb8,
	0xcd, 0x6c, 0xe7, 0x74, 0x7f, 0x42, 0xa3, 0xe8, 0x1d, 0x1f, 0xc1, 0xff, 0x85, 0xe9, 0x3f, 0xda,
	0xf7, 0xb6, 0x33, 0xb1, 0xd1, 0x1e, 0xc6, 0xd0, 0xde, 0x42, 0xdb, 0x71, 0xc7, 0x64, 0x84, 0x34,
	0x8c, 0xa0, 0xb5, 0x65, 0xb7, 0x84, 0x7a, 0x48, 0xc7, 0x1d, 0x30, 0x54, 0x62, 0xa1, 0xfd, 0x2a,
	0xba, 0x44, 0x35, 0x15, 0xd1, 0x91, 0x33, 0xe9, 0xa3, 0x7a, 0x97, 0x80, 0x51, 0x9a, 0x0a, 0x9f,
	0x02, 0x2e, 0x01, 0xdf, 0x76, 0xec, 0x21, 0xda, 0xc3, 0x26, 0x1c, 0x97, 0x39, 0xb5, 0xc9, 0xc3,
	0xc3, 0x0c, 0x69, 0xdd, 0x19, 0x34, 0x95, 0xe9, 0xf0, 0x0b, 0x38, 0x52, 0x5c, 0x65, 0x92, 0x97,
	0x70, 0xaa, 0x0a, 0x53, 0x8f, 0x0c, 0xee, 0x7c, 0x3a, 0x7e, 0x9c, 0x22, 0x0d, 0x9f, 0x40, 0x47,
	0xd5, 0x66, 0x44, 0x62, 0xbd, 0xfb, 0x5b, 0x07, 0xd8, 0xdd, 0x6a, 0xd7, 0x9b, 0xf4, 0x94, 0xca,
	0x27, 0xd0, 0x51, 0x38, 0x19, 0x52, 0xeb, 0xea, 0x7a, 0x53, 0xb4, 0x8c, 0xfb, 0xd6, 0x07, 0xa4,
	0xff, 0x03, 0x7f, 0x94, 0xfb, 0x2a, 0x63, 0x3a, 0x7e, 0xef, 0xf7, 0xaf, 0x51, 0x0d, 0x1f, 0x03,
	0x52, 0xb0, 0x37, 0x24, 0xfd, 0x6b, 0x54, 0x97, 0x57, 0x51, 0xe8, 0xd4, 0x71, 0xd1, 0x81, 0x3c,
	0x9f, 0xc2, 0xf2, 0xb5, 0x35, 0xe4, 0x36, 0x14, 0x78, 0x33, 0x72, 0x26, 0xb7, 0x77, 0xf4, 0x0b,
	0x3a, 0xac, 0xcc, 0xe2, 0x4d, 0x9c, 0x9c, 0xff, 0x57, 0xf9, 0xdf, 0x80, 0x50, 0xef, 0x0a, 0x41,
	0xa5, 0xf6, 0xe5, 0xe7, 0x21, 0x45, 0xcd, 0x0a, 0x9c, 0x7a, 0x43, 0x82, 0x5a, 0x95, 0xba, 0x94,
	0x8c, 0x28, 0xb1, 0xde, 0x21, 0x23, 0x3c, 0xc8, 0x5f, 0xea, 0xe5, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa6, 0x5a, 0x1f, 0x0c, 0xf3, 0x03, 0x00, 0x00,
}
