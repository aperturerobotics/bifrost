// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/common/pconn/coord_stream.proto

package pconn

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CoordPacketType is the packet type of a coordination stream packet.
type CoordPacketType int32

const (
	CoordPacketType_CoordPacketType_UNKNOWN           CoordPacketType = 0
	CoordPacketType_CoordPacketType_RSTREAM_ESTABLISH CoordPacketType = 1
	CoordPacketType_CoordPacketType_RSTREAM_ACK       CoordPacketType = 2
	CoordPacketType_CoordPacketType_RSTREAM_CLOSE     CoordPacketType = 3
	CoordPacketType_CoordPacketType_RSTREAM_NOOP      CoordPacketType = 4
)

var CoordPacketType_name = map[int32]string{
	0: "CoordPacketType_UNKNOWN",
	1: "CoordPacketType_RSTREAM_ESTABLISH",
	2: "CoordPacketType_RSTREAM_ACK",
	3: "CoordPacketType_RSTREAM_CLOSE",
	4: "CoordPacketType_RSTREAM_NOOP",
}

var CoordPacketType_value = map[string]int32{
	"CoordPacketType_UNKNOWN":           0,
	"CoordPacketType_RSTREAM_ESTABLISH": 1,
	"CoordPacketType_RSTREAM_ACK":       2,
	"CoordPacketType_RSTREAM_CLOSE":     3,
	"CoordPacketType_RSTREAM_NOOP":      4,
}

func (x CoordPacketType) String() string {
	return proto.EnumName(CoordPacketType_name, int32(x))
}

func (CoordPacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c55809ead6d73baa, []int{0}
}

// CoordinationStreamPacket is the packet wrapper for a coordination stream
// packet.
type CoordinationStreamPacket struct {
	// PacketType is the coordination stream packet type.
	PacketType CoordPacketType `protobuf:"varint,1,opt,name=packet_type,json=packetType,proto3,enum=pconn.CoordPacketType" json:"packet_type,omitempty"`
	// RawStreamEstablish is the raw stream establish packet.
	RawStreamEstablish *RawStreamEstablish `protobuf:"bytes,2,opt,name=raw_stream_establish,json=rawStreamEstablish,proto3" json:"raw_stream_establish,omitempty"`
	// RawStreamAck is the raw stream ack packet.
	RawStreamAck *RawStreamAck `protobuf:"bytes,3,opt,name=raw_stream_ack,json=rawStreamAck,proto3" json:"raw_stream_ack,omitempty"`
	// RawStreamClose is the raw stream close packet.
	RawStreamClose       *RawStreamClose `protobuf:"bytes,4,opt,name=raw_stream_close,json=rawStreamClose,proto3" json:"raw_stream_close,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CoordinationStreamPacket) Reset()         { *m = CoordinationStreamPacket{} }
func (m *CoordinationStreamPacket) String() string { return proto.CompactTextString(m) }
func (*CoordinationStreamPacket) ProtoMessage()    {}
func (*CoordinationStreamPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c55809ead6d73baa, []int{0}
}

func (m *CoordinationStreamPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoordinationStreamPacket.Unmarshal(m, b)
}
func (m *CoordinationStreamPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoordinationStreamPacket.Marshal(b, m, deterministic)
}
func (m *CoordinationStreamPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinationStreamPacket.Merge(m, src)
}
func (m *CoordinationStreamPacket) XXX_Size() int {
	return xxx_messageInfo_CoordinationStreamPacket.Size(m)
}
func (m *CoordinationStreamPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinationStreamPacket.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinationStreamPacket proto.InternalMessageInfo

func (m *CoordinationStreamPacket) GetPacketType() CoordPacketType {
	if m != nil {
		return m.PacketType
	}
	return CoordPacketType_CoordPacketType_UNKNOWN
}

func (m *CoordinationStreamPacket) GetRawStreamEstablish() *RawStreamEstablish {
	if m != nil {
		return m.RawStreamEstablish
	}
	return nil
}

func (m *CoordinationStreamPacket) GetRawStreamAck() *RawStreamAck {
	if m != nil {
		return m.RawStreamAck
	}
	return nil
}

func (m *CoordinationStreamPacket) GetRawStreamClose() *RawStreamClose {
	if m != nil {
		return m.RawStreamClose
	}
	return nil
}

// RawStreamEstablish is a coordination stream raw-stream establish message.
type RawStreamEstablish struct {
	// InitiatorStreamId is the stream ID the initiator wants to use.
	InitiatorStreamId    uint32   `protobuf:"varint,1,opt,name=initiator_stream_id,json=initiatorStreamId,proto3" json:"initiator_stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawStreamEstablish) Reset()         { *m = RawStreamEstablish{} }
func (m *RawStreamEstablish) String() string { return proto.CompactTextString(m) }
func (*RawStreamEstablish) ProtoMessage()    {}
func (*RawStreamEstablish) Descriptor() ([]byte, []int) {
	return fileDescriptor_c55809ead6d73baa, []int{1}
}

func (m *RawStreamEstablish) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawStreamEstablish.Unmarshal(m, b)
}
func (m *RawStreamEstablish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawStreamEstablish.Marshal(b, m, deterministic)
}
func (m *RawStreamEstablish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawStreamEstablish.Merge(m, src)
}
func (m *RawStreamEstablish) XXX_Size() int {
	return xxx_messageInfo_RawStreamEstablish.Size(m)
}
func (m *RawStreamEstablish) XXX_DiscardUnknown() {
	xxx_messageInfo_RawStreamEstablish.DiscardUnknown(m)
}

var xxx_messageInfo_RawStreamEstablish proto.InternalMessageInfo

func (m *RawStreamEstablish) GetInitiatorStreamId() uint32 {
	if m != nil {
		return m.InitiatorStreamId
	}
	return 0
}

// RawStreamAck is a coordination stream raw-stream acknowledge message.
type RawStreamAck struct {
	// InitiatorStreamId is the stream ID the initiator wanted to use.
	InitiatorStreamId uint32 `protobuf:"varint,1,opt,name=initiator_stream_id,json=initiatorStreamId,proto3" json:"initiator_stream_id,omitempty"`
	// AckStreamId is the stream ID the responder wants to use.
	// Zero if the stream was rejected.
	AckStreamId uint32 `protobuf:"varint,2,opt,name=ack_stream_id,json=ackStreamId,proto3" json:"ack_stream_id,omitempty"`
	// AckError indicates an error establishing the stream, rejecting the stream.
	AckError             string   `protobuf:"bytes,3,opt,name=ack_error,json=ackError,proto3" json:"ack_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawStreamAck) Reset()         { *m = RawStreamAck{} }
func (m *RawStreamAck) String() string { return proto.CompactTextString(m) }
func (*RawStreamAck) ProtoMessage()    {}
func (*RawStreamAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_c55809ead6d73baa, []int{2}
}

func (m *RawStreamAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawStreamAck.Unmarshal(m, b)
}
func (m *RawStreamAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawStreamAck.Marshal(b, m, deterministic)
}
func (m *RawStreamAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawStreamAck.Merge(m, src)
}
func (m *RawStreamAck) XXX_Size() int {
	return xxx_messageInfo_RawStreamAck.Size(m)
}
func (m *RawStreamAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RawStreamAck.DiscardUnknown(m)
}

var xxx_messageInfo_RawStreamAck proto.InternalMessageInfo

func (m *RawStreamAck) GetInitiatorStreamId() uint32 {
	if m != nil {
		return m.InitiatorStreamId
	}
	return 0
}

func (m *RawStreamAck) GetAckStreamId() uint32 {
	if m != nil {
		return m.AckStreamId
	}
	return 0
}

func (m *RawStreamAck) GetAckError() string {
	if m != nil {
		return m.AckError
	}
	return ""
}

// RawStreamClose indicates an intent to close a raw stream.
type RawStreamClose struct {
	// StreamId is the stream ID the reciever indicated to use.
	StreamId uint32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// CloseError indicates an error included with the stream close.
	CloseError           string   `protobuf:"bytes,2,opt,name=close_error,json=closeError,proto3" json:"close_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawStreamClose) Reset()         { *m = RawStreamClose{} }
func (m *RawStreamClose) String() string { return proto.CompactTextString(m) }
func (*RawStreamClose) ProtoMessage()    {}
func (*RawStreamClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_c55809ead6d73baa, []int{3}
}

func (m *RawStreamClose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawStreamClose.Unmarshal(m, b)
}
func (m *RawStreamClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawStreamClose.Marshal(b, m, deterministic)
}
func (m *RawStreamClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawStreamClose.Merge(m, src)
}
func (m *RawStreamClose) XXX_Size() int {
	return xxx_messageInfo_RawStreamClose.Size(m)
}
func (m *RawStreamClose) XXX_DiscardUnknown() {
	xxx_messageInfo_RawStreamClose.DiscardUnknown(m)
}

var xxx_messageInfo_RawStreamClose proto.InternalMessageInfo

func (m *RawStreamClose) GetStreamId() uint32 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *RawStreamClose) GetCloseError() string {
	if m != nil {
		return m.CloseError
	}
	return ""
}

func init() {
	proto.RegisterEnum("pconn.CoordPacketType", CoordPacketType_name, CoordPacketType_value)
	proto.RegisterType((*CoordinationStreamPacket)(nil), "pconn.CoordinationStreamPacket")
	proto.RegisterType((*RawStreamEstablish)(nil), "pconn.RawStreamEstablish")
	proto.RegisterType((*RawStreamAck)(nil), "pconn.RawStreamAck")
	proto.RegisterType((*RawStreamClose)(nil), "pconn.RawStreamClose")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/common/pconn/coord_stream.proto", fileDescriptor_c55809ead6d73baa)
}

var fileDescriptor_c55809ead6d73baa = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x4d, 0x5a, 0xa5, 0x3d, 0xdb, 0xae, 0x71, 0xea, 0x9f, 0xc8, 0x2a, 0xdd, 0x06, 0x84,
	0xe2, 0x45, 0x02, 0xf5, 0x42, 0xbc, 0x92, 0x75, 0x0d, 0x58, 0xb6, 0xcd, 0x96, 0xc9, 0x8a, 0x97,
	0x61, 0x32, 0x3b, 0xda, 0x21, 0x4d, 0x26, 0x9c, 0x99, 0x52, 0x7a, 0xe5, 0x8b, 0xf8, 0x26, 0xbe,
	0x9c, 0x64, 0xf6, 0x0f, 0x69, 0x96, 0xbd, 0xf0, 0x6e, 0xce, 0xf9, 0x7e, 0xdf, 0x77, 0x26, 0x27,
	0x0c, 0x5c, 0xfe, 0x92, 0xe6, 0xfa, 0x36, 0x0f, 0xb9, 0x2a, 0x23, 0x56, 0x0b, 0x34, 0xb7, 0x28,
	0x50, 0xe5, 0xca, 0x48, 0xae, 0xa3, 0x5c, 0xfe, 0x44, 0xa5, 0x4d, 0x64, 0x90, 0x55, 0xba, 0x56,
	0x68, 0x22, 0xae, 0xca, 0x52, 0x55, 0x51, 0xcd, 0x55, 0x55, 0x45, 0x5c, 0x29, 0x9c, 0x67, 0xda,
	0xa0, 0x60, 0x65, 0x58, 0xa3, 0x32, 0x8a, 0x3c, 0xb6, 0x4a, 0xf0, 0xc7, 0x05, 0x7f, 0xdc, 0xa8,
	0xb2, 0x62, 0x46, 0xaa, 0x2a, 0xb5, 0xcc, 0x15, 0xe3, 0x85, 0x30, 0xe4, 0x23, 0xf4, 0x6a, 0x7b,
	0xca, 0xcc, 0x7d, 0x2d, 0x7c, 0x67, 0xe8, 0x9c, 0xf6, 0xcf, 0x5e, 0x86, 0xd6, 0x19, 0x5a, 0xd7,
	0x02, 0x9c, 0xdd, 0xd7, 0x82, 0x42, 0xbd, 0x3e, 0x93, 0x09, 0x3c, 0x47, 0x76, 0xb7, 0x1c, 0x98,
	0x09, 0x6d, 0x58, 0x7e, 0x23, 0xf5, 0xb5, 0xef, 0x0e, 0x9d, 0xd3, 0xde, 0xd9, 0xeb, 0x65, 0x02,
	0x65, 0x77, 0x8b, 0x71, 0xf1, 0x0a, 0xa0, 0x04, 0x37, 0x7a, 0xe4, 0x13, 0xf4, 0x5b, 0x61, 0x8c,
	0x17, 0xfe, 0x8e, 0x8d, 0x39, 0xea, 0xc6, 0x8c, 0x78, 0x41, 0x0f, 0xb0, 0x55, 0x91, 0xcf, 0xe0,
	0xb5, 0xac, 0xfc, 0x46, 0x69, 0xe1, 0xef, 0x5a, 0xf3, 0x8b, 0xae, 0x79, 0xdc, 0x88, 0xb4, 0x8f,
	0x0f, 0xea, 0xe0, 0x2b, 0x90, 0xcd, 0x5b, 0x92, 0x10, 0x8e, 0x64, 0x25, 0x8d, 0x64, 0x46, 0xe1,
	0x2a, 0x5c, 0xce, 0xed, 0x7e, 0x0e, 0xe9, 0xb3, 0xb5, 0xb4, 0xb0, 0x9d, 0xcf, 0x83, 0xdf, 0x70,
	0xd0, 0xbe, 0xe4, 0xff, 0xfa, 0x49, 0x00, 0x87, 0x8c, 0x17, 0x2d, 0xd2, 0xb5, 0x64, 0x8f, 0xf1,
	0x62, 0xcd, 0x0c, 0x60, 0xbf, 0x61, 0x04, 0xa2, 0x42, 0xbb, 0xa0, 0x7d, 0xba, 0xc7, 0x78, 0x11,
	0x37, 0x75, 0x90, 0x40, 0xff, 0xe1, 0x87, 0x36, 0x78, 0x77, 0xf0, 0x9e, 0x5e, 0x65, 0x1d, 0x43,
	0xcf, 0xee, 0x6a, 0x99, 0xe6, 0xda, 0x34, 0xb0, 0x2d, 0x9b, 0xf7, 0xfe, 0xaf, 0x03, 0x4f, 0x3b,
	0xff, 0x9f, 0x0c, 0xe0, 0x55, 0xa7, 0x95, 0x7d, 0x4f, 0x26, 0xc9, 0xf4, 0x47, 0xe2, 0x3d, 0x22,
	0xef, 0xe0, 0xa4, 0x2b, 0xd2, 0x74, 0x46, 0xe3, 0xd1, 0x65, 0x16, 0xa7, 0xb3, 0xd1, 0x97, 0x8b,
	0xf3, 0xf4, 0x9b, 0xe7, 0x90, 0x63, 0x18, 0x6c, 0xc3, 0x46, 0xe3, 0x89, 0xe7, 0x92, 0x13, 0x78,
	0xbb, 0x0d, 0x18, 0x5f, 0x4c, 0xd3, 0xd8, 0xdb, 0x21, 0x43, 0x78, 0xb3, 0x0d, 0x49, 0xa6, 0xd3,
	0x2b, 0x6f, 0x37, 0x7f, 0x62, 0x5f, 0xc0, 0x87, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0x30,
	0x54, 0xf7, 0x52, 0x03, 0x00, 0x00,
}
