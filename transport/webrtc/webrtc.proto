syntax = "proto3";
package webrtc;

import "github.com/aperturerobotics/bifrost/transport/common/quic/quic.proto";
import "github.com/aperturerobotics/bifrost/transport/common/dialer/dialer.proto";
import "github.com/aperturerobotics/bifrost/stream/srpc/client/client.proto";
import "github.com/aperturerobotics/util/backoff/backoff.proto";

// Config is the configuration for the WebRTC Signal RPC transport.
message Config {
  // SignalingId is the signaling channel identifier.
  // Cannot be empty.
  string signaling_id = 1;
  // TransportPeerId sets the peer ID to attach the transport to.
  // If unset, attaches to any running peer with a private key.
  // Must match the transport peer ID of the signaling transport.
  string transport_peer_id = 2;
  // TransportType overrides the transport type id for dial addresses.
  // Defaults to "webrtc"
  // Configures the scheme for addr matching to this transport.
	// E.x.: webrtc://
  string transport_type = 3;
  // Quic contains the quic protocol options.
  //
  // The WebRTC transport always disables FEC and several other UDP-centric
  // features which are unnecessary due to the "reliable" nature of WebRTC.
  .transport.quic.Opts quic = 4;
  // WebRtc contains the WebRTC protocol options.
  WebRtcConfig web_rtc = 5;
  // Backoff is the backoff config for connecting to a PeerConnection.
  // If unset, defaults to reasonable defaults.
  .backoff.Backoff backoff = 6;
  // Dialers maps peer IDs to dialers.
  // This allows mapping which peer ID should be dialed via this transport.
  map<string, dialer.DialerOpts> dialers = 7;
  // AllPeers tells the transport to attempt to negotiate a WebRTC session with
  // any peer, even those not listed in the Dialers map.
  bool all_peers = 8;
  // DisableListen disables listening for incoming Links.
  // If set, we will only dial out, not accept incoming links.
  bool disable_listen = 9;
  // BlockPeers is a list of peer ids that will not be contacted via this transport.
  repeated string block_peers = 10;
  // Verbose enables very verbose logging.
  bool verbose = 11;
}

// WebRtcConfig configures the WebRTC PeerConnection.
message WebRtcConfig {
  // IceServers contains the list of ICE servers to use.
  repeated IceServerConfig ice_servers = 1;
  // IceTransportPolicy defines the policy for permitted ICE candidates.
  // Optional.
  IceTransportPolicy ice_transport_policy = 2;
  // IceCandidatePoolSize defines the size of the prefetched ICE pool.
  // Optional.
  uint32 ice_candidate_pool_size = 3;
}

// IceTransportPolicy contains the set of allowed ICE transport policies.
enum IceTransportPolicy {
  // IceTransportPolicy_ALL allows any kind of ICE candidate.
  IceTransportPolicy_ALL = 0;
  // IceTransportPolicy_RELAY allows only media relay candidates (TURN).
  IceTransportPolicy_RELAY = 1;
}

// IceServer is a WebRTC ICE server config.
message IceServerConfig {
  // Urls is the list of URLs for the ICE server.
  //
  // Format: stun:{url} or turn:{url} or turns:{url}?transport=tcp
  // Examples:
  // - stun:stun.l.google.com:19302
  // - stun:stun.stunprotocol.org:3478
  // - turns:google.de?transport=tcp
  repeated string urls = 1;
  // Username is the username for the ICE server.
  string username = 2;
  // Credential contains the ice server credential, if any.
  oneof credential {
    // Password contains the ICE server password.
    string password = 3;
    // Oauth contains an OAuth credential.
    OauthCredential oauth = 4;
  }

  // OauthCredential is an OAuth credential information for the ICE server.
  message OauthCredential {
    // MacKey is a base64-url format.
    string mac_key = 1;
    // AccessToken is the access token in base64-encoded format.
    string access_token = 2;
  }
}

// WebRtcSignal is a WebRTC Signaling message sent via the Signaling channel.
message WebRtcSignal {
  // Body is the body of the message.
  oneof body {
    // RequestOffer requests a new offer from the offerer with the local session seqno.
    // Incremented when negotiation is needed (something changes about the session).
    uint64 request_offer = 1;
    // Sdp contains the sdp offer or answer.
    WebRtcSdp sdp = 2;
    // Ice contains an ICE candidate.
    WebRtcIce ice = 3;
  }
}

// WebRtcSdp contains the SDP offer or answer.
message WebRtcSdp {
  // TxSeqno is the sequence number of the transmitting peer.
  // The receiver should update the local seqno to match.
  uint64 tx_seqno = 1;
  // SdpType is the string encoded type of the sdp.
  // Examples: "offer" "answer"
  string sdp_type = 2;
  // Sdp contains the WebRTC session description.
  string sdp = 3;
}

// WebRtcIce contains an ICE candidate.
message WebRtcIce {
  // Candidate contains the JSON-encoded ICE candidate.
  string candidate = 1;
}
