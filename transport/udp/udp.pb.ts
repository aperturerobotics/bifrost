// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/transport/udp/udp.proto (package udp, syntax proto3)
/* eslint-disable */

import { Opts } from '../common/pconn/pconn.pb.js'
import { DialerOpts } from '../common/dialer/dialer.pb.js'
import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType, ScalarType } from '@aptre/protobuf-es-lite'

export const protobufPackage = 'udp'

/**
 * Config is the configuration for the udp transport.
 *
 * @generated from message udp.Config
 */
export interface Config {
  /**
   * TransportPeerID sets the peer ID to attach the transport to.
   * If unset, attaches to any running peer with a private key.
   *
   * @generated from field: string transport_peer_id = 1;
   */
  transportPeerId?: string
  /**
   * ListenAddr contains the address to listen on.
   * Has no effect in the browser.
   *
   * @generated from field: string listen_addr = 2;
   */
  listenAddr?: string
  /**
   * PacketOpts are options to set on the packet connection.
   *
   * @generated from field: pconn.Opts packet_opts = 4;
   */
  packetOpts?: Opts
  /**
   * Dialers maps peer IDs to dialers.
   *
   * @generated from field: map<string, dialer.DialerOpts> dialers = 5;
   */
  dialers?: { [key: string]: DialerOpts }
}

// Config contains the message type declaration for Config.
export const Config: MessageType<Config> = createMessageType({
  typeName: 'udp.Config',
  fields: [
    { no: 1, name: 'transport_peer_id', kind: 'scalar', T: ScalarType.STRING },
    { no: 2, name: 'listen_addr', kind: 'scalar', T: ScalarType.STRING },
    { no: 4, name: 'packet_opts', kind: 'message', T: () => Opts },
    {
      no: 5,
      name: 'dialers',
      kind: 'map',
      K: ScalarType.STRING,
      V: { kind: 'message', T: () => DialerOpts },
    },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})
