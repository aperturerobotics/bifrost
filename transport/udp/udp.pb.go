// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/udp/udp.proto

package udp

import (
	fmt "fmt"
	dialer "github.com/aperturerobotics/bifrost/transport/common/dialer"
	pconn "github.com/aperturerobotics/bifrost/transport/common/pconn"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config is the configuration for the udp transport.
type Config struct {
	// NodePeerID constrains the node peer ID.
	// If empty, attaches to whatever node is running.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId,proto3" json:"node_peer_id,omitempty"`
	// ListenAddr contains the address to listen on.
	// Has no effect in the browser.
	ListenAddr string `protobuf:"bytes,2,opt,name=listen_addr,json=listenAddr,proto3" json:"listen_addr,omitempty"`
	// PacketOpts are options to set on the packet connection.
	// On lossy transports, set the data shards for FEC.
	PacketOpts *pconn.Opts `protobuf:"bytes,4,opt,name=packet_opts,json=packetOpts,proto3" json:"packet_opts,omitempty"`
	// Dialers maps peer IDs to dialers.
	Dialers              map[string]*dialer.DialerOpts `protobuf:"bytes,5,rep,name=dialers,proto3" json:"dialers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_15ae03e7392b37de, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

func (m *Config) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func (m *Config) GetPacketOpts() *pconn.Opts {
	if m != nil {
		return m.PacketOpts
	}
	return nil
}

func (m *Config) GetDialers() map[string]*dialer.DialerOpts {
	if m != nil {
		return m.Dialers
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "udp.Config")
	proto.RegisterMapType((map[string]*dialer.DialerOpts)(nil), "udp.Config.DialersEntry")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/udp/udp.proto", fileDescriptor_15ae03e7392b37de)
}

var fileDescriptor_15ae03e7392b37de = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xd9, 0xf6, 0x6d, 0x5f, 0x4c, 0x7a, 0x90, 0x9c, 0x96, 0x5e, 0x5c, 0x3c, 0xed, 0x41,
	0xb2, 0xb0, 0x5e, 0x44, 0x4f, 0xe2, 0x1f, 0xf4, 0xa2, 0xd2, 0x2f, 0xb0, 0x64, 0x37, 0xd3, 0x1a,
	0xda, 0x66, 0xc2, 0x64, 0x56, 0xe8, 0x87, 0x17, 0x64, 0x9b, 0x15, 0xbc, 0xea, 0x21, 0xc9, 0x30,
	0xcf, 0x93, 0x87, 0xdf, 0x8c, 0xb8, 0xd9, 0x38, 0x7e, 0xef, 0x5b, 0xdd, 0xe1, 0xbe, 0x32, 0x01,
	0x88, 0x7b, 0x02, 0xc2, 0x16, 0xd9, 0x75, 0xb1, 0x6a, 0xdd, 0x9a, 0x30, 0x72, 0xc5, 0x64, 0x7c,
	0x0c, 0x48, 0x5c, 0xf5, 0x36, 0x0c, 0x47, 0x07, 0x42, 0x46, 0x35, 0xed, 0x6d, 0x58, 0x3e, 0xfe,
	0x2e, 0xa1, 0xc3, 0xfd, 0x1e, 0x7d, 0x15, 0x3a, 0xf4, 0xe3, 0x9d, 0xc2, 0x96, 0x4f, 0x7f, 0xca,
	0xb1, 0xce, 0xec, 0x80, 0xc6, 0x27, 0x25, 0x9d, 0x7f, 0x66, 0x62, 0x7e, 0x87, 0x7e, 0xed, 0x36,
	0xaa, 0x10, 0x0b, 0x8f, 0x16, 0x9a, 0x00, 0x40, 0x8d, 0xb3, 0x79, 0x56, 0x64, 0xe5, 0xc9, 0x4a,
	0x0c, 0xbd, 0x37, 0x00, 0x7a, 0xb6, 0xea, 0x4c, 0xc8, 0x9d, 0x8b, 0x0c, 0xbe, 0x31, 0xd6, 0x52,
	0x3e, 0x49, 0x86, 0xd4, 0xba, 0xb5, 0x96, 0xd4, 0x85, 0x90, 0xc1, 0x74, 0x5b, 0xe0, 0x06, 0x03,
	0xc7, 0xfc, 0x5f, 0x91, 0x95, 0xb2, 0x96, 0x3a, 0xa1, 0xbf, 0x06, 0x8e, 0x2b, 0x91, 0xf4, 0xa1,
	0x56, 0xb5, 0xf8, 0x9f, 0x58, 0x62, 0x3e, 0x2b, 0xa6, 0xa5, 0xac, 0x73, 0x3d, 0xec, 0x2b, 0xe1,
	0xe8, 0xfb, 0x24, 0x3d, 0x78, 0xa6, 0xc3, 0xea, 0xdb, 0xb8, 0x7c, 0x11, 0x8b, 0x9f, 0x82, 0x3a,
	0x15, 0xd3, 0x2d, 0x1c, 0x46, 0xd6, 0xa1, 0x54, 0xa5, 0x98, 0x7d, 0x98, 0x5d, 0x0f, 0x47, 0x3c,
	0x59, 0x2b, 0x3d, 0xce, 0x9b, 0xbe, 0x1d, 0x21, 0x92, 0xe1, 0x7a, 0x72, 0x95, 0xb5, 0xf3, 0xe3,
	0x1a, 0x2e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x71, 0xc3, 0xe5, 0x24, 0xdc, 0x01, 0x00, 0x00,
}
