// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/transport/udp/udp.proto

package udp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pconn "github.com/aperturerobotics/bifrost/transport/common/pconn"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Config is the configuration for the udp transport.
type Config struct {
	// NodePeerID constrains the node peer ID.
	// If empty, attaches to whatever node is running.
	NodePeerId string `protobuf:"bytes,1,opt,name=node_peer_id,json=nodePeerId" json:"node_peer_id,omitempty"`
	// ListenAddr contains the address to listen on.
	// Has no effect in the browser.
	ListenAddr string `protobuf:"bytes,2,opt,name=listen_addr,json=listenAddr" json:"listen_addr,omitempty"`
	// DialAddrs contain the addresses to dial on startup.
	// Failure to connect is not a fatal error.
	// Note: may be removed.
	DialAddrs []string `protobuf:"bytes,3,rep,name=dial_addrs,json=dialAddrs" json:"dial_addrs,omitempty"`
	// PacketOpts are options to set on the packet connection.
	// On lossy transports, set the data shards for FEC.
	PacketOpts           *pconn.Opts `protobuf:"bytes,4,opt,name=packet_opts,json=packetOpts" json:"packet_opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_udp_512f76a6594cf7c8, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetNodePeerId() string {
	if m != nil {
		return m.NodePeerId
	}
	return ""
}

func (m *Config) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func (m *Config) GetDialAddrs() []string {
	if m != nil {
		return m.DialAddrs
	}
	return nil
}

func (m *Config) GetPacketOpts() *pconn.Opts {
	if m != nil {
		return m.PacketOpts
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "udp.Config")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/transport/udp/udp.proto", fileDescriptor_udp_512f76a6594cf7c8)
}

var fileDescriptor_udp_512f76a6594cf7c8 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8e, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xa9, 0x95, 0x85, 0xa6, 0x9e, 0x72, 0x2a, 0x82, 0x58, 0x3c, 0xf5, 0x20, 0x0d, 0xe8,
	0xd1, 0x93, 0x08, 0x82, 0x27, 0xa5, 0x2f, 0x50, 0xd2, 0x4c, 0x76, 0x0d, 0x6e, 0x33, 0xc3, 0x64,
	0xfa, 0x2e, 0x3e, 0xae, 0xa4, 0xf1, 0x05, 0xf6, 0x30, 0xc3, 0xf0, 0x7d, 0xc3, 0xcf, 0xaf, 0x5e,
	0x4e, 0x41, 0xbe, 0xb7, 0x65, 0x74, 0xb8, 0x1a, 0x4b, 0x9e, 0x65, 0x63, 0xcf, 0xb8, 0xa0, 0x04,
	0x97, 0xcc, 0x12, 0x8e, 0x8c, 0x49, 0x8c, 0xb0, 0x8d, 0x89, 0x90, 0xc5, 0x6c, 0x40, 0x79, 0x46,
	0x62, 0x14, 0xd4, 0xf5, 0x06, 0x74, 0xfb, 0x7e, 0x59, 0x82, 0xc3, 0x75, 0xc5, 0x68, 0xc8, 0x61,
	0xfc, 0xdf, 0x25, 0xec, 0xe1, 0xb7, 0x52, 0x87, 0x37, 0x8c, 0xc7, 0x70, 0xd2, 0xbd, 0xba, 0x89,
	0x08, 0x7e, 0x26, 0xef, 0x79, 0x0e, 0xd0, 0x55, 0x7d, 0x35, 0x34, 0x93, 0xca, 0xec, 0xcb, 0x7b,
	0xfe, 0x00, 0x7d, 0xaf, 0xda, 0x73, 0x48, 0xe2, 0xe3, 0x6c, 0x01, 0xb8, 0xbb, 0x2a, 0x0f, 0x05,
	0xbd, 0x02, 0xb0, 0xbe, 0x53, 0x0a, 0x82, 0x3d, 0xef, 0x3a, 0x75, 0x75, 0x5f, 0x0f, 0xcd, 0xd4,
	0x64, 0x92, 0x6d, 0xd2, 0x8f, 0xaa, 0x25, 0xeb, 0x7e, 0xbc, 0xcc, 0x48, 0x92, 0xba, 0xeb, 0xbe,
	0x1a, 0xda, 0xa7, 0x76, 0x2c, 0x7d, 0x3e, 0x49, 0xd2, 0xa4, 0x8a, 0xcf, 0xf7, 0x72, 0xd8, 0x1b,
	0x3e, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x7a, 0x3e, 0xf5, 0x2d, 0x01, 0x00, 0x00,
}
