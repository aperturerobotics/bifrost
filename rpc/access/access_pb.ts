// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/rpc/access/access.proto (package bifrost.rpc.access, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * LookupRpcServiceRequest is a request to lookup an rpc service.
 *
 * @generated from message bifrost.rpc.access.LookupRpcServiceRequest
 */
export class LookupRpcServiceRequest extends Message<LookupRpcServiceRequest> {
  /**
   * ServiceId is the service identifier.
   *
   * @generated from field: string service_id = 1;
   */
  serviceId = ''

  /**
   * ServerId is the identifier of the server requesting the service.
   * Can be empty.
   *
   * @generated from field: string server_id = 2;
   */
  serverId = ''

  constructor(data?: PartialMessage<LookupRpcServiceRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bifrost.rpc.access.LookupRpcServiceRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'service_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'server_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LookupRpcServiceRequest {
    return new LookupRpcServiceRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LookupRpcServiceRequest {
    return new LookupRpcServiceRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LookupRpcServiceRequest {
    return new LookupRpcServiceRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | LookupRpcServiceRequest
      | PlainMessage<LookupRpcServiceRequest>
      | undefined,
    b:
      | LookupRpcServiceRequest
      | PlainMessage<LookupRpcServiceRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(LookupRpcServiceRequest, a, b)
  }
}

/**
 * LookupRpcServiceResponse is a response to LookupRpcService
 *
 * @generated from message bifrost.rpc.access.LookupRpcServiceResponse
 */
export class LookupRpcServiceResponse extends Message<LookupRpcServiceResponse> {
  /**
   * Idle indicates the directive is now idle.
   *
   * @generated from field: bool idle = 1;
   */
  idle = false

  /**
   * Exists indicates we found the service on the remote.
   *
   * @generated from field: bool exists = 2;
   */
  exists = false

  /**
   * Removed indicates the value no longer exists.
   *
   * @generated from field: bool removed = 3;
   */
  removed = false

  constructor(data?: PartialMessage<LookupRpcServiceResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'bifrost.rpc.access.LookupRpcServiceResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'idle', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'exists', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'removed', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LookupRpcServiceResponse {
    return new LookupRpcServiceResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LookupRpcServiceResponse {
    return new LookupRpcServiceResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LookupRpcServiceResponse {
    return new LookupRpcServiceResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | LookupRpcServiceResponse
      | PlainMessage<LookupRpcServiceResponse>
      | undefined,
    b:
      | LookupRpcServiceResponse
      | PlainMessage<LookupRpcServiceResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(LookupRpcServiceResponse, a, b)
  }
}
