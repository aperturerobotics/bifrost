// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.26
// source: github.com/aperturerobotics/bifrost/examples/toys/drpc-demo/pb/pb.drpc.proto

package pb

import (
	context "context"
	errors "errors"
	proto "github.com/golang/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto struct{}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg)
}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg)
}

type DRPCExampleServiceClient interface {
	DRPCConn() drpc.Conn

	DoSomething(ctx context.Context, in *DoSomethingReq) (*DoSomethingResp, error)
}

type drpcExampleServiceClient struct {
	cc drpc.Conn
}

func NewDRPCExampleServiceClient(cc drpc.Conn) DRPCExampleServiceClient {
	return &drpcExampleServiceClient{cc}
}

func (c *drpcExampleServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcExampleServiceClient) DoSomething(ctx context.Context, in *DoSomethingReq) (*DoSomethingResp, error) {
	out := new(DoSomethingResp)
	err := c.cc.Invoke(ctx, "/pb.ExampleService/DoSomething", drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCExampleServiceServer interface {
	DoSomething(context.Context, *DoSomethingReq) (*DoSomethingResp, error)
}

type DRPCExampleServiceUnimplementedServer struct{}

func (s *DRPCExampleServiceUnimplementedServer) DoSomething(context.Context, *DoSomethingReq) (*DoSomethingResp, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCExampleServiceDescription struct{}

func (DRPCExampleServiceDescription) NumMethods() int { return 1 }

func (DRPCExampleServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/pb.ExampleService/DoSomething", drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCExampleServiceServer).
					DoSomething(
						ctx,
						in1.(*DoSomethingReq),
					)
			}, DRPCExampleServiceServer.DoSomething, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterExampleService(mux drpc.Mux, impl DRPCExampleServiceServer) error {
	return mux.Register(impl, DRPCExampleServiceDescription{})
}

type DRPCExampleService_DoSomethingStream interface {
	drpc.Stream
	SendAndClose(*DoSomethingResp) error
}

type drpcExampleService_DoSomethingStream struct {
	drpc.Stream
}

func (x *drpcExampleService_DoSomethingStream) SendAndClose(m *DoSomethingResp) error {
	if err := x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_examples_toys_drpc_demo_pb_pb_drpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
