* SSH over Xbee Example

** Xbee Setup

Reset the xbees to default values, then set:

 - AP: 2 (API mode with escapes)
 - Baud: 115200
 
You may need to edit the yaml files to change the path to the serial device.

** Node 1

Peer ID: 12D3KooWC9dBAEoTHbEXq2aaTeFit7QVdvPcb6Yf76oGQZ6dGf8N 
SSH daemon listening on port 22
XBee at /dev/ttyUSB0

#+BEGIN_SRC
  bifrost daemon --node-priv ../priv/node-1.pem -c node-1.yaml
#+END_SRC

When you execute the daemon, the address is printed:

#+BEGIN_SRC text
INFO[0000] opened xbee device successfully
               controller=bifrost/xbee/1
               device-address=0013a20040db7492 
               device-baud=115200 device-path=/dev/ttyUSB0
#+END_SRC

You should copy the address into the node-2.yaml file for your xbee setup.

** Node 2

Peer ID: 12D3KooWJukwYJ46o4uYSApGHAZrjrZPLHqt3EVy1etas2KVn9RP 

Port 8084 forwards through to port 8080 on node 1.

Remember to edit node-2.yaml and change the xbee address for node-1.

#+BEGIN_SRC
bifrost daemon --api-listen :5111 --node-priv ../priv/node-2.pem -c node-2.yaml
ssh -p 2000 root@localhost
#+END_SRC

Bifrost will listen on port 2000, accept the TCP connection, forward it through
to node-1, and proxy the SSH session over the wire.

Experiment with editing the configs and changing the block crypto and
compression settings.

** Adding additional controllers at runtime

You can run additional controllers with the client:

#+BEGIN_SRC textNAME:
   bifrost client - client sub-commands

USAGE:
   bifrost client command [command options] [arguments...]

COMMANDS:
     local-peers  returns local peer info
     bus-info     returns bus information
     identify     Private key will be loaded with a peer controller
     subscribe    Subscribe to a pubsub channel and publish with identified peers
     forward      Protocol ID will be forwarded to the target multiaddress
     accept       Single incoming stream with Protocol ID will be accepted
     dial         Single outgoing stream with Protocol ID will be dialed
     listen       Listen on the multiaddress and forward the connection to a remote stream.

OPTIONS:
   --dial-addr value  address to dial API on (default: "127.0.0.1:5110")
   --help, -h         show help
   
#+END_SRC

Examples:

#+BEGIN_SRC bash
  # On node 1:
  python -m SimpleHTTPServer 8080 & # example workload
  ./bifrost client forward --protocol-id "http-proxy/1" --target /ip4/127.0.0.1/tcp/8080
  # On node 2:
  # localhost:8084 is forwarded to localhost:8080 on node 1.
  ./bifrost client --dial-addr 127.0.0.1:5112 listen \
             --peer-id "12D3KooWC9dBAEoTHbEXq2aaTeFit7QVdvPcb6Yf76oGQZ6dGf8N " \
             --protocol-id http-proxy/1 \
             --listen /ip4/127.0.0.1/tcp/8084
#+END_SRC

These commands will instruct the daemon to run extra controllers whilst the
client commands are active. Exiting the client commands with ctrl+c will cancel
the controllers.

You can also add more controller definitions to the yaml daemon configuration.
The root level keys are user-specified controller IDs (arbitrary keys). An
unlimited number of controller configurations can be added - listeners on
various ports, devices, etc.
