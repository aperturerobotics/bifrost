syntax = "proto3";
package api;

import "github.com/aperturerobotics/controllerbus/controller/controller.proto";
import "github.com/aperturerobotics/bifrost/stream/forwarding/forwarding.proto";
import "github.com/aperturerobotics/bifrost/stream/listening/listening.proto";

import "github.com/aperturerobotics/bifrost/stream/grpc/grpc.proto";
import "github.com/aperturerobotics/bifrost/stream/grpc/accept/accept.proto";
import "github.com/aperturerobotics/bifrost/stream/grpc/dial/dial.proto";

// GetPeerInfoRequest is the request type for GetPeerInfo.
message GetPeerInfoRequest {
  // PeerId restricts the response to a specific peer ID.
  string peer_id = 1;
}

// PeerInfo is basic information about a peer.
message PeerInfo {
  // PeerId is the b58 peer ID.
  string peer_id = 1;
}

// GetPeerInfoResponse is the response type for GetPeerInfo.
message GetPeerInfoResponse {
  // LocalPeers is the set of peers loaded.
  repeated PeerInfo local_peers = 1;
}

// GetBusInfoRequest is the request type for GetBusInfo.
message GetBusInfoRequest {
}

// DebugValue is a debug value.
message DebugValue {
  // Key is the debug value key.
  string key = 1;
  // Values are the debug value values.
  repeated string values = 2;
}

// DirectiveInfo contains directive information.
message DirectiveInfo {
  // Name is the directive name.
  string name = 1;
  // DebugVals contains the directive debug values.
  repeated DebugValue debug_vals = 2;
}

// GetBusInfoResponse is the response type for GetBusInfo.
message GetBusInfoResponse {
  // RunningControllers is the list of running controllers.
  repeated controller.Info running_controllers = 1;
  // RunningDirectives is the list of running directives.
  repeated DirectiveInfo running_directives = 2;
}

// ControllerStatus holds basic status for a controller.
enum ControllerStatus {
  // ControllerStatus_UNKNOWN is unrecognized.
  ControllerStatus_UNKNOWN = 0;
  // ControllerStatus_CONFIGURING indicates the controller is configuring.
  ControllerStatus_CONFIGURING = 1;
  // ControllerStatus_RUNNING indicates the controller is running.
  ControllerStatus_RUNNING = 2;
}

// ForwardStreamsRequest is the request type for ForwardStreams.
message ForwardStreamsRequest {
  stream.forwarding.Config forwarding_config = 1;
}

// ForwardStreamsResponse is the response type for ForwardStreams.
message ForwardStreamsResponse {
  // ControllerStatus is the status of the forwarding controller.
  ControllerStatus controller_status = 1;
}

// ListenStreamsRequest is the request type for ListenStreams.
message ListenStreamsRequest {
  stream.listening.Config listening_config = 1;
}

// ListenStreamsResponse is the response type for ListenStreams.
message ListenStreamsResponse {
  // ControllerStatus is the status of the forwarding controller.
  ControllerStatus controller_status = 1;
}

// AcceptStreamRequest is the request type for AcceptStream.
message AcceptStreamRequest {
  // Config is the configuration for the accept.
  // The first packet will contain this value.
  stream.grpc.accept.Config config = 1;
  // Data is a data packet.
  stream.grpc.Data data = 2;
}

// AcceptStreamResponse is the response type for AcceptStream.
message AcceptStreamResponse {
  // Data is a data packet.
  stream.grpc.Data data = 1;
}

// DialStreamRequest is the request type for DialStream.
message DialStreamRequest {
  // Config is the configuration for the dial.
  // The first packet will contain this value.
  stream.grpc.dial.Config config = 1;
  // Data is a data packet.
  stream.grpc.Data data = 2;
}

// DialStreamResponse is the response type for DialStream.
message DialStreamResponse {
  // Data is a data packet.
  stream.grpc.Data data = 1;
}

// BifrostDaemonService is the control service for a daemon, contacted by the CLI.
service BifrostDaemonService {
  // GetPeerInfo returns information about attached peers.
  rpc GetPeerInfo(GetPeerInfoRequest) returns (GetPeerInfoResponse) {}
  // GetBusInfo requests information about the controller bus.
  rpc GetBusInfo(GetBusInfoRequest) returns (GetBusInfoResponse) {}
  // ForwardStreams forwards streams to the target multiaddress.
  // Handles HandleMountedStream directives by contacting the target.
  rpc ForwardStreams(ForwardStreamsRequest) returns (stream ForwardStreamsResponse) {}
  // ListenStreams listens for connections to the multiaddress.
  // Forwards the connections to a remote peer with a protocol ID.
  rpc ListenStreams(ListenStreamsRequest) returns (stream ListenStreamsResponse) {}
  // AcceptStream accepts an incoming stream.
  // Stream data is sent over the request / response streams.
  rpc AcceptStream(stream AcceptStreamRequest) returns (stream AcceptStreamResponse) {}
  // DialStream dials a outgoing stream.
  // Stream data is sent over the request / response streams.
  rpc DialStream(stream DialStreamRequest) returns (stream DialStreamResponse) {}
}
