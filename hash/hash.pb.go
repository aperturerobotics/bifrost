// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/hash/hash.proto

package hash

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HashType identifies the hash type in use.
type HashType int32

const (
	// HashType_UNKNOWN is an unknown hash type.
	HashType_HashType_UNKNOWN HashType = 0
	// HashType_SHA256 is the sha256 hash type.
	HashType_HashType_SHA256 HashType = 1
	// HashType_SHA1 is the sha1 hash type.
	// Note: this is not recommended for use outside of backwards-compat.
	HashType_HashType_SHA1 HashType = 2
	// HashType_BLAKE3 is the blake3 hash type.
	HashType_HashType_BLAKE3 HashType = 3
)

var HashType_name = map[int32]string{
	0: "HashType_UNKNOWN",
	1: "HashType_SHA256",
	2: "HashType_SHA1",
	3: "HashType_BLAKE3",
}

var HashType_value = map[string]int32{
	"HashType_UNKNOWN": 0,
	"HashType_SHA256":  1,
	"HashType_SHA1":    2,
	"HashType_BLAKE3":  3,
}

func (x HashType) String() string {
	return proto.EnumName(HashType_name, int32(x))
}

func (HashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79657252606e4824, []int{0}
}

// Hash is a hash of a binary blob.
type Hash struct {
	// HashType is the hash type in use.
	HashType HashType `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3,enum=hash.HashType" json:"hash_type,omitempty"`
	// Hash is the hash value.
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_79657252606e4824, []int{0}
}

func (m *Hash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hash.Unmarshal(m, b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return xxx_messageInfo_Hash.Size(m)
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetHashType() HashType {
	if m != nil {
		return m.HashType
	}
	return HashType_HashType_UNKNOWN
}

func (m *Hash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterEnum("hash.HashType", HashType_name, HashType_value)
	proto.RegisterType((*Hash)(nil), "hash.Hash")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/hash/hash.proto", fileDescriptor_79657252606e4824)
}

var fileDescriptor_79657252606e4824 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0x48, 0x2d, 0x2a, 0x29, 0x2d, 0x4a, 0x2d,
	0xca, 0x4f, 0xca, 0x2f, 0xc9, 0x4c, 0x2e, 0xd6, 0x4f, 0xca, 0x4c, 0x2b, 0xca, 0x2f, 0x2e, 0xd1,
	0xcf, 0x48, 0x2c, 0xce, 0x00, 0x13, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6,
	0x92, 0x3b, 0x17, 0x8b, 0x47, 0x62, 0x71, 0x86, 0x90, 0x36, 0x17, 0x27, 0x88, 0x1f, 0x5f, 0x52,
	0x59, 0x90, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x67, 0xc4, 0xa7, 0x07, 0x56, 0x0d, 0x92, 0x0e,
	0xa9, 0x2c, 0x48, 0x0d, 0xe2, 0xc8, 0x80, 0xb2, 0x84, 0x84, 0xb8, 0xc0, 0x9a, 0x25, 0x98, 0x14,
	0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0xad, 0x58, 0x2e, 0x0e, 0x98, 0x4a, 0x21, 0x11, 0x2e, 0x01,
	0x18, 0x3b, 0x3e, 0xd4, 0xcf, 0xdb, 0xcf, 0x3f, 0xdc, 0x4f, 0x80, 0x41, 0x48, 0x98, 0x8b, 0x1f,
	0x2e, 0x1a, 0xec, 0xe1, 0x68, 0x64, 0x6a, 0x26, 0xc0, 0x28, 0x24, 0xc8, 0xc5, 0x8b, 0x2c, 0x68,
	0x28, 0xc0, 0x84, 0xa2, 0xce, 0xc9, 0xc7, 0xd1, 0xdb, 0xd5, 0x58, 0x80, 0x39, 0x89, 0x0d, 0xec,
	0x68, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x50, 0x67, 0x4b, 0xeb, 0x00, 0x00, 0x00,
}
