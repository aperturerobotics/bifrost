// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/peer/peer.proto (package peer, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { HashType } from '../hash/hash_pb.js'

/**
 * Signature contains a signature by a peer.
 *
 * @generated from message peer.Signature
 */
export class Signature extends Message<Signature> {
  /**
   * PubKey is the public key of the peer.
   * May be empty if the public key is to be inferred from context.
   *
   * @generated from field: bytes pub_key = 1;
   */
  pubKey = new Uint8Array(0)

  /**
   * HashType is the hash type used to hash the data.
   * The signature is then of the hash bytes (usually 32).
   *
   * @generated from field: hash.HashType hash_type = 2;
   */
  hashType = HashType.HashType_UNKNOWN

  /**
   * SigData contains the signature data.
   * The format is defined by the key type.
   *
   * @generated from field: bytes sig_data = 3;
   */
  sigData = new Uint8Array(0)

  constructor(data?: PartialMessage<Signature>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'peer.Signature'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pub_key', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'hash_type', kind: 'enum', T: proto3.getEnumType(HashType) },
    { no: 3, name: 'sig_data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Signature {
    return new Signature().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Signature {
    return new Signature().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Signature {
    return new Signature().fromJsonString(jsonString, options)
  }

  static equals(
    a: Signature | PlainMessage<Signature> | undefined,
    b: Signature | PlainMessage<Signature> | undefined,
  ): boolean {
    return proto3.util.equals(Signature, a, b)
  }
}

/**
 * SignedMsg is a message from a peer with a signature.
 *
 * @generated from message peer.SignedMsg
 */
export class SignedMsg extends Message<SignedMsg> {
  /**
   * FromPeerId is the peer identifier of the sender.
   *
   * @generated from field: string from_peer_id = 1;
   */
  fromPeerId = ''

  /**
   * Signature is the sender signature.
   * Should not contain PubKey, which is inferred from peer id.
   *
   * @generated from field: peer.Signature signature = 2;
   */
  signature?: Signature

  /**
   * Data is the signed data.
   *
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0)

  constructor(data?: PartialMessage<SignedMsg>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'peer.SignedMsg'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'from_peer_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'signature', kind: 'message', T: Signature },
    { no: 3, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SignedMsg {
    return new SignedMsg().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SignedMsg {
    return new SignedMsg().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SignedMsg {
    return new SignedMsg().fromJsonString(jsonString, options)
  }

  static equals(
    a: SignedMsg | PlainMessage<SignedMsg> | undefined,
    b: SignedMsg | PlainMessage<SignedMsg> | undefined,
  ): boolean {
    return proto3.util.equals(SignedMsg, a, b)
  }
}
