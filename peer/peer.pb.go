// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/peer/peer.proto

package peer

import (
	fmt "fmt"
	hash "github.com/aperturerobotics/bifrost/hash"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Signature contains a signature by a peer.
type Signature struct {
	// PubKey is the public key of the peer.
	// May be empty if the public key is to be inferred from context.
	PubKey []byte `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// HashType is the hash type used to hash the data.
	// The signature is then of the hash bytes (usually 32).
	HashType hash.HashType `protobuf:"varint,2,opt,name=hash_type,json=hashType,proto3,enum=hash.HashType" json:"hash_type,omitempty"`
	// SigData contains the signature data.
	// The format is defined by the key type.
	SigData              []byte   `protobuf:"bytes,3,opt,name=sig_data,json=sigData,proto3" json:"sig_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec16e5b0f2a2ffce, []int{0}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Signature) GetHashType() hash.HashType {
	if m != nil {
		return m.HashType
	}
	return hash.HashType_HashType_UNKNOWN
}

func (m *Signature) GetSigData() []byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

func init() {
	proto.RegisterType((*Signature)(nil), "peer.Signature")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/peer/peer.proto", fileDescriptor_ec16e5b0f2a2ffce)
}

var fileDescriptor_ec16e5b0f2a2ffce = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8d, 0xbd, 0x6a, 0xc3, 0x30,
	0x14, 0x46, 0x71, 0x5b, 0xfc, 0x23, 0x8a, 0x07, 0x2d, 0x75, 0x3b, 0x99, 0x4e, 0x86, 0x82, 0x0d,
	0xf5, 0x2b, 0x64, 0x08, 0x64, 0x73, 0xb2, 0x9b, 0x2b, 0xe7, 0x46, 0x12, 0xf9, 0x91, 0x90, 0xae,
	0x06, 0xbd, 0x7d, 0xb0, 0x92, 0x07, 0xc8, 0xf2, 0x71, 0x86, 0x7b, 0xce, 0x65, 0xa3, 0xd4, 0xa4,
	0x82, 0xe8, 0x17, 0x73, 0x1d, 0xc0, 0xa2, 0xa3, 0xe0, 0xd0, 0x19, 0x61, 0x48, 0x2f, 0x7e, 0x10,
	0xfa, 0xe4, 0x8c, 0xa7, 0xc1, 0x22, 0xba, 0x34, 0xbd, 0x75, 0x86, 0x0c, 0xff, 0x58, 0xf9, 0xe7,
	0x25, 0x55, 0x81, 0x57, 0x69, 0x1e, 0xea, 0xef, 0x85, 0x55, 0x7b, 0x2d, 0x6f, 0xb0, 0x1e, 0xf3,
	0x2f, 0x56, 0xd8, 0x20, 0xe6, 0x33, 0xc6, 0x26, 0x6b, 0xb3, 0xee, 0x73, 0xca, 0x6d, 0x10, 0x3b,
	0x8c, 0xfc, 0x8f, 0x55, 0xab, 0x33, 0x53, 0xb4, 0xd8, 0xbc, 0xb5, 0x59, 0x57, 0xff, 0xd7, 0x7d,
	0xaa, 0x6c, 0xc1, 0xab, 0x43, 0xb4, 0x38, 0x95, 0xea, 0x49, 0xfc, 0x9b, 0x95, 0x5e, 0xcb, 0xf9,
	0x08, 0x04, 0xcd, 0x7b, 0xca, 0x14, 0x5e, 0xcb, 0x0d, 0x10, 0x88, 0x3c, 0x3d, 0x1d, 0xef, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x86, 0x1c, 0xf8, 0x72, 0xe6, 0x00, 0x00, 0x00,
}
