// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/peer/api/api.proto (package peer.api, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType, Message, ScalarType } from '@aptre/protobuf-es-lite'
import { Config } from '../controller/config.pb.js'
import type { ControllerStatus } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec.pb.js'
import { ControllerStatus_Enum } from '@go/github.com/aperturerobotics/controllerbus/controller/exec/exec.pb.js'

export const protobufPackage = 'peer.api'

/**
 * IdentifyRequest is a request to load an identity.
 *
 * @generated from message peer.api.IdentifyRequest
 */
export type IdentifyRequest = Message<{
  /**
   * Config is the request to configure the peer controller.
   *
   * @generated from field: peer.controller.Config config = 1;
   */
  config?: Config
}>

// IdentifyRequest contains the message type declaration for IdentifyRequest.
export const IdentifyRequest: MessageType<IdentifyRequest> = createMessageType({
  typeName: 'peer.api.IdentifyRequest',
  fields: [
    { no: 1, name: 'config', kind: 'message', T: () => Config },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * IdentifyResponse is a response to an identify request.
 *
 * @generated from message peer.api.IdentifyResponse
 */
export type IdentifyResponse = Message<{
  /**
   * ControllerStatus is the status of the peer controller.
   *
   * @generated from field: controller.exec.ControllerStatus controller_status = 1;
   */
  controllerStatus?: ControllerStatus
}>

// IdentifyResponse contains the message type declaration for IdentifyResponse.
export const IdentifyResponse: MessageType<IdentifyResponse> =
  createMessageType({
    typeName: 'peer.api.IdentifyResponse',
    fields: [
      {
        no: 1,
        name: 'controller_status',
        kind: 'enum',
        T: ControllerStatus_Enum,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * GetPeerInfoRequest is the request type for GetPeerInfo.
 *
 * @generated from message peer.api.GetPeerInfoRequest
 */
export type GetPeerInfoRequest = Message<{
  /**
   * PeerId restricts the response to a specific peer ID.
   *
   * @generated from field: string peer_id = 1;
   */
  peerId?: string
}>

// GetPeerInfoRequest contains the message type declaration for GetPeerInfoRequest.
export const GetPeerInfoRequest: MessageType<GetPeerInfoRequest> =
  createMessageType({
    typeName: 'peer.api.GetPeerInfoRequest',
    fields: [
      { no: 1, name: 'peer_id', kind: 'scalar', T: ScalarType.STRING },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * PeerInfo is basic information about a peer.
 *
 * @generated from message peer.api.PeerInfo
 */
export type PeerInfo = Message<{
  /**
   * PeerId is the b58 peer ID.
   *
   * @generated from field: string peer_id = 1;
   */
  peerId?: string
}>

// PeerInfo contains the message type declaration for PeerInfo.
export const PeerInfo: MessageType<PeerInfo> = createMessageType({
  typeName: 'peer.api.PeerInfo',
  fields: [
    { no: 1, name: 'peer_id', kind: 'scalar', T: ScalarType.STRING },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * GetPeerInfoResponse is the response type for GetPeerInfo.
 *
 * @generated from message peer.api.GetPeerInfoResponse
 */
export type GetPeerInfoResponse = Message<{
  /**
   * LocalPeers is the set of peers loaded.
   *
   * @generated from field: repeated peer.api.PeerInfo local_peers = 1;
   */
  localPeers?: PeerInfo[]
}>

// GetPeerInfoResponse contains the message type declaration for GetPeerInfoResponse.
export const GetPeerInfoResponse: MessageType<GetPeerInfoResponse> =
  createMessageType({
    typeName: 'peer.api.GetPeerInfoResponse',
    fields: [
      {
        no: 1,
        name: 'local_peers',
        kind: 'message',
        T: () => PeerInfo,
        repeated: true,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })
