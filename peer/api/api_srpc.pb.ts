// @generated by protoc-gen-es-starpc none with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/peer/api/api.proto (package peer.api, syntax proto3)
/* eslint-disable */

import {
  GetPeerInfoRequest,
  GetPeerInfoResponse,
  IdentifyRequest,
  IdentifyResponse,
} from './api_pb.js'
import { MethodKind } from '@bufbuild/protobuf'
import { Message } from '@aptre/protobuf-es-lite'
import { buildDecodeMessageTransform, MessageStream, ProtoRpc } from 'starpc'

/**
 * PeerService implements a bifrost peer service.
 *
 * @generated from service peer.api.PeerService
 */
export const PeerServiceDefinition = {
  typeName: 'peer.api.PeerService',
  methods: {
    /**
     * Identify loads and manages a private key identity.
     *
     * @generated from rpc peer.api.PeerService.Identify
     */
    Identify: {
      name: 'Identify',
      I: IdentifyRequest,
      O: IdentifyResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * GetPeerInfo returns information about attached peers.
     *
     * @generated from rpc peer.api.PeerService.GetPeerInfo
     */
    GetPeerInfo: {
      name: 'GetPeerInfo',
      I: GetPeerInfoRequest,
      O: GetPeerInfoResponse,
      kind: MethodKind.Unary,
    },
  },
} as const

/**
 * PeerService implements a bifrost peer service.
 *
 * @generated from service peer.api.PeerService
 */
export interface PeerService {
  /**
   * Identify loads and manages a private key identity.
   *
   * @generated from rpc peer.api.PeerService.Identify
   */
  Identify(
    request: Message<IdentifyRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<IdentifyResponse>

  /**
   * GetPeerInfo returns information about attached peers.
   *
   * @generated from rpc peer.api.PeerService.GetPeerInfo
   */
  GetPeerInfo(
    request: Message<GetPeerInfoRequest>,
    abortSignal?: AbortSignal,
  ): Promise<Message<GetPeerInfoResponse>>
}

export const PeerServiceServiceName = PeerServiceDefinition.typeName

export class PeerServiceClient implements PeerService {
  private readonly rpc: ProtoRpc
  private readonly service: string
  constructor(rpc: ProtoRpc, opts?: { service?: string }) {
    this.service = opts?.service || PeerServiceServiceName
    this.rpc = rpc
    this.Identify = this.Identify.bind(this)
    this.GetPeerInfo = this.GetPeerInfo.bind(this)
  }
  /**
   * Identify loads and manages a private key identity.
   *
   * @generated from rpc peer.api.PeerService.Identify
   */
  Identify(
    request: Message<IdentifyRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<IdentifyResponse> {
    const requestMsg = IdentifyRequest.create(request)
    const result = this.rpc.serverStreamingRequest(
      this.service,
      PeerServiceDefinition.methods.Identify.name,
      IdentifyRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(IdentifyResponse)(result)
  }

  /**
   * GetPeerInfo returns information about attached peers.
   *
   * @generated from rpc peer.api.PeerService.GetPeerInfo
   */
  async GetPeerInfo(
    request: Message<GetPeerInfoRequest>,
    abortSignal?: AbortSignal,
  ): Promise<Message<GetPeerInfoResponse>> {
    const requestMsg = GetPeerInfoRequest.create(request)
    const result = await this.rpc.request(
      this.service,
      PeerServiceDefinition.methods.GetPeerInfo.name,
      GetPeerInfoRequest.toBinary(requestMsg),
      abortSignal || undefined,
    )
    return GetPeerInfoResponse.fromBinary(result)
  }
}
