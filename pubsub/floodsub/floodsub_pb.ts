// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/floodsub/floodsub.proto (package floodsub, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { HashType } from '../../hash/hash_pb.js'
import { SignedMsg } from '../../peer/peer_pb.js'

/**
 * Config configures the floodsub router.
 *
 * @generated from message floodsub.Config
 */
export class Config extends Message<Config> {
  /**
   * PublishHashType is the hash type to use when signing published messages.
   * Defaults to sha256
   *
   * @generated from field: hash.HashType publish_hash_type = 1;
   */
  publishHashType = HashType.HashType_UNKNOWN

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'floodsub.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'publish_hash_type',
      kind: 'enum',
      T: proto3.getEnumType(HashType),
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined,
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}

/**
 * Packet is the floodsub packet.
 *
 * @generated from message floodsub.Packet
 */
export class Packet extends Message<Packet> {
  /**
   * Subscriptions contains any new subscription changes.
   *
   * @generated from field: repeated floodsub.SubscriptionOpts subscriptions = 1;
   */
  subscriptions: SubscriptionOpts[] = []

  /**
   * Publish contains messages we are publishing.
   *
   * @generated from field: repeated peer.SignedMsg publish = 2;
   */
  publish: SignedMsg[] = []

  constructor(data?: PartialMessage<Packet>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'floodsub.Packet'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'subscriptions',
      kind: 'message',
      T: SubscriptionOpts,
      repeated: true,
    },
    { no: 2, name: 'publish', kind: 'message', T: SignedMsg, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Packet {
    return new Packet().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Packet {
    return new Packet().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Packet {
    return new Packet().fromJsonString(jsonString, options)
  }

  static equals(
    a: Packet | PlainMessage<Packet> | undefined,
    b: Packet | PlainMessage<Packet> | undefined,
  ): boolean {
    return proto3.util.equals(Packet, a, b)
  }
}

/**
 * SubscriptionOpts are subscription options.
 *
 * @generated from message floodsub.SubscriptionOpts
 */
export class SubscriptionOpts extends Message<SubscriptionOpts> {
  /**
   * Subscribe indicates if we are subscribing to this channel ID.
   *
   * @generated from field: bool subscribe = 1;
   */
  subscribe = false

  /**
   * ChannelId is the channel to subscribe to.
   *
   * @generated from field: string channel_id = 2;
   */
  channelId = ''

  constructor(data?: PartialMessage<SubscriptionOpts>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'floodsub.SubscriptionOpts'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subscribe', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'channel_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SubscriptionOpts {
    return new SubscriptionOpts().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SubscriptionOpts {
    return new SubscriptionOpts().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SubscriptionOpts {
    return new SubscriptionOpts().fromJsonString(jsonString, options)
  }

  static equals(
    a: SubscriptionOpts | PlainMessage<SubscriptionOpts> | undefined,
    b: SubscriptionOpts | PlainMessage<SubscriptionOpts> | undefined,
  ): boolean {
    return proto3.util.equals(SubscriptionOpts, a, b)
  }
}
