// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/pubsub/floodsub/floodsub.proto

package floodsub

import (
	fmt "fmt"
	hash "github.com/aperturerobotics/bifrost/hash"
	pubmessage "github.com/aperturerobotics/bifrost/pubsub/util/pubmessage"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config configures the floodsub router.
type Config struct {
	// PublishHashType is the hash type to use when signing published messages.
	// Defaults to sha256
	PublishHashType      hash.HashType `protobuf:"varint,1,opt,name=publish_hash_type,json=publishHashType,proto3,enum=hash.HashType" json:"publish_hash_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_b604b3634b345d9a, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetPublishHashType() hash.HashType {
	if m != nil {
		return m.PublishHashType
	}
	return hash.HashType_HashType_UNKNOWN
}

// Packet is the floodsub packet.
type Packet struct {
	// Subscriptions contains any new subscription changes.
	Subscriptions []*SubscriptionOpts `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Publish contains messages we are publishing.
	Publish              []*pubmessage.PubMessage `protobuf:"bytes,2,rep,name=publish,proto3" json:"publish,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b604b3634b345d9a, []int{1}
}

func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetSubscriptions() []*SubscriptionOpts {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Packet) GetPublish() []*pubmessage.PubMessage {
	if m != nil {
		return m.Publish
	}
	return nil
}

// SubscriptionOpts are subscription options.
type SubscriptionOpts struct {
	// Subscribe indicates if we are subscribing to this channel ID.
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// ChannelId is the channel to subscribe to.
	ChannelId            string   `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionOpts) Reset()         { *m = SubscriptionOpts{} }
func (m *SubscriptionOpts) String() string { return proto.CompactTextString(m) }
func (*SubscriptionOpts) ProtoMessage()    {}
func (*SubscriptionOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_b604b3634b345d9a, []int{2}
}

func (m *SubscriptionOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionOpts.Unmarshal(m, b)
}
func (m *SubscriptionOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionOpts.Marshal(b, m, deterministic)
}
func (m *SubscriptionOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionOpts.Merge(m, src)
}
func (m *SubscriptionOpts) XXX_Size() int {
	return xxx_messageInfo_SubscriptionOpts.Size(m)
}
func (m *SubscriptionOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionOpts.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionOpts proto.InternalMessageInfo

func (m *SubscriptionOpts) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *SubscriptionOpts) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "floodsub.Config")
	proto.RegisterType((*Packet)(nil), "floodsub.Packet")
	proto.RegisterType((*SubscriptionOpts)(nil), "floodsub.SubscriptionOpts")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/pubsub/floodsub/floodsub.proto", fileDescriptor_b604b3634b345d9a)
}

var fileDescriptor_b604b3634b345d9a = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xe9, 0x0a, 0x75, 0x1b, 0x71, 0xd5, 0x1c, 0xa4, 0x14, 0x85, 0xd2, 0x53, 0x4f, 0xad,
	0xec, 0xde, 0x3c, 0x89, 0x7a, 0x50, 0x44, 0x76, 0xa9, 0xde, 0x4b, 0xd2, 0xa6, 0x4d, 0xb0, 0xdb,
	0x84, 0x4c, 0x72, 0x58, 0xf0, 0xc3, 0xcb, 0xf6, 0x8f, 0x56, 0x4f, 0xee, 0x25, 0xbc, 0xbc, 0x99,
	0xf7, 0x83, 0x79, 0xe8, 0xbe, 0x16, 0x86, 0x5b, 0x9a, 0x14, 0x72, 0x9b, 0x12, 0xc5, 0xb4, 0xb1,
	0x9a, 0x69, 0x49, 0xa5, 0x11, 0x05, 0xa4, 0x54, 0x54, 0x5a, 0x82, 0x49, 0x95, 0xa5, 0x60, 0x69,
	0x5a, 0x35, 0x52, 0x96, 0x53, 0x91, 0x28, 0x2d, 0x8d, 0xc4, 0xf3, 0xf1, 0x1f, 0xbc, 0x1c, 0x40,
	0xb3, 0x46, 0x34, 0x7b, 0xbd, 0x65, 0x00, 0xa4, 0x66, 0x13, 0xd9, 0x63, 0x83, 0xd5, 0x7f, 0x60,
	0x9c, 0x00, 0xef, 0x9e, 0x3e, 0x14, 0x3d, 0x22, 0xf7, 0x41, 0xb6, 0x95, 0xa8, 0xf1, 0x2d, 0xba,
	0x50, 0x96, 0x36, 0x02, 0x78, 0xbe, 0x9f, 0xe7, 0x66, 0xa7, 0x98, 0xef, 0x84, 0x4e, 0xbc, 0x58,
	0x2e, 0x92, 0x2e, 0xf1, 0x44, 0x80, 0xbf, 0xef, 0x14, 0xcb, 0xce, 0x86, 0xc5, 0xd1, 0x88, 0x3e,
	0x91, 0xbb, 0x21, 0xc5, 0x07, 0x33, 0xf8, 0x0e, 0x9d, 0x82, 0xa5, 0x50, 0x68, 0xa1, 0x8c, 0x90,
	0x2d, 0xf8, 0x4e, 0x78, 0x14, 0x9f, 0x2c, 0x83, 0xe4, 0xbb, 0x83, 0xb7, 0xc9, 0x78, 0xad, 0x0c,
	0x64, 0xbf, 0x03, 0xf8, 0x06, 0x1d, 0x0f, 0x78, 0x7f, 0xd6, 0x65, 0x2f, 0x93, 0xc9, 0xa9, 0x1b,
	0x4b, 0x5f, 0x7b, 0x99, 0x8d, 0x6b, 0xd1, 0x1a, 0x9d, 0xff, 0x85, 0xe2, 0x2b, 0xe4, 0x0d, 0x58,
	0xda, 0x5f, 0x31, 0xcf, 0x7e, 0x0c, 0x7c, 0x8d, 0x50, 0xc1, 0x49, 0xdb, 0xb2, 0x26, 0x17, 0xa5,
	0x3f, 0x0b, 0x9d, 0xd8, 0xcb, 0xbc, 0xc1, 0x79, 0x2e, 0xa9, 0xdb, 0x75, 0xb3, 0xfa, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xe8, 0xb7, 0x75, 0x98, 0xed, 0x01, 0x00, 0x00,
}
