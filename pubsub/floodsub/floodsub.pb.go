// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/pubsub/floodsub/floodsub.proto

package floodsub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hash "github.com/aperturerobotics/bifrost/hash"
import peer "github.com/aperturerobotics/bifrost/peer"
import timestamp "github.com/aperturerobotics/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Config configures the floodsub router.
type Config struct {
	// Degree is the target degree.
	// Defaults to 6.
	Degree uint32 `protobuf:"varint,1,opt,name=degree" json:"degree,omitempty"`
	// DegreeLow is the low water mark degree.
	// Defaults to 4.
	// Must be less than degree.
	DegreeLow uint32 `protobuf:"varint,2,opt,name=degree_low,json=degreeLow" json:"degree_low,omitempty"`
	// DegreeHigh is the high water mark degree.
	// Defaults to 12.
	// Must be greater than degree.
	DegreeHigh uint32 `protobuf:"varint,3,opt,name=degree_high,json=degreeHigh" json:"degree_high,omitempty"`
	// HistoryLen is the window size of the message cache.
	// Hard capped to 10000
	HistoryLen uint32 `protobuf:"varint,4,opt,name=history_len,json=historyLen" json:"history_len,omitempty"`
	// HistoryGossip is the number of historic messages to opportunistically
	// gossip to peers.
	// Defaults to 3.
	// Hard capped to 50.
	HistoryGossip uint32 `protobuf:"varint,5,opt,name=history_gossip,json=historyGossip" json:"history_gossip,omitempty"`
	// PublishHashType is the hash type to use when signing published messages.
	// Defaults to sha256
	PublishHashType      hash.HashType `protobuf:"varint,6,opt,name=publish_hash_type,json=publishHashType,enum=hash.HashType" json:"publish_hash_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_floodsub_88ba93fb630c8290, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetDegree() uint32 {
	if m != nil {
		return m.Degree
	}
	return 0
}

func (m *Config) GetDegreeLow() uint32 {
	if m != nil {
		return m.DegreeLow
	}
	return 0
}

func (m *Config) GetDegreeHigh() uint32 {
	if m != nil {
		return m.DegreeHigh
	}
	return 0
}

func (m *Config) GetHistoryLen() uint32 {
	if m != nil {
		return m.HistoryLen
	}
	return 0
}

func (m *Config) GetHistoryGossip() uint32 {
	if m != nil {
		return m.HistoryGossip
	}
	return 0
}

func (m *Config) GetPublishHashType() hash.HashType {
	if m != nil {
		return m.PublishHashType
	}
	return hash.HashType_HashType_UNKNOWN
}

// Packet is the floodsub packet.
type Packet struct {
	// Subscriptions contains any new subscription changes.
	Subscriptions []*SubscriptionOpts `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	// Publish contains messages we are publishing.
	Publish              []*PubMessage `protobuf:"bytes,2,rep,name=publish" json:"publish,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_floodsub_88ba93fb630c8290, []int{1}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (dst *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(dst, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetSubscriptions() []*SubscriptionOpts {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Packet) GetPublish() []*PubMessage {
	if m != nil {
		return m.Publish
	}
	return nil
}

// SubscriptionOpts are subscription options.
type SubscriptionOpts struct {
	// Subscribe indicates if we are subscribing to this channel ID.
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe" json:"subscribe,omitempty"`
	// ChannelId is the channel to subscribe to.
	ChannelId            string   `protobuf:"bytes,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionOpts) Reset()         { *m = SubscriptionOpts{} }
func (m *SubscriptionOpts) String() string { return proto.CompactTextString(m) }
func (*SubscriptionOpts) ProtoMessage()    {}
func (*SubscriptionOpts) Descriptor() ([]byte, []int) {
	return fileDescriptor_floodsub_88ba93fb630c8290, []int{2}
}
func (m *SubscriptionOpts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionOpts.Unmarshal(m, b)
}
func (m *SubscriptionOpts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionOpts.Marshal(b, m, deterministic)
}
func (dst *SubscriptionOpts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionOpts.Merge(dst, src)
}
func (m *SubscriptionOpts) XXX_Size() int {
	return xxx_messageInfo_SubscriptionOpts.Size(m)
}
func (m *SubscriptionOpts) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionOpts.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionOpts proto.InternalMessageInfo

func (m *SubscriptionOpts) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *SubscriptionOpts) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// PubMessageInner is the signed inner portion of the message.
type PubMessageInner struct {
	// Data is the message data.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Channel is the channel.
	Channel string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	// Timestamp is the message timestamp.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Salt is a random int32.
	Salt                 uint32   `protobuf:"fixed32,4,opt,name=salt" json:"salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMessageInner) Reset()         { *m = PubMessageInner{} }
func (m *PubMessageInner) String() string { return proto.CompactTextString(m) }
func (*PubMessageInner) ProtoMessage()    {}
func (*PubMessageInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_floodsub_88ba93fb630c8290, []int{3}
}
func (m *PubMessageInner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMessageInner.Unmarshal(m, b)
}
func (m *PubMessageInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMessageInner.Marshal(b, m, deterministic)
}
func (dst *PubMessageInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMessageInner.Merge(dst, src)
}
func (m *PubMessageInner) XXX_Size() int {
	return xxx_messageInfo_PubMessageInner.Size(m)
}
func (m *PubMessageInner) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMessageInner.DiscardUnknown(m)
}

var xxx_messageInfo_PubMessageInner proto.InternalMessageInfo

func (m *PubMessageInner) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubMessageInner) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PubMessageInner) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PubMessageInner) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

// PubMessage is a message published via the pubsub channel.
type PubMessage struct {
	// FromPeerId is the peer identifier of the sender.
	FromPeerId string `protobuf:"bytes,1,opt,name=from_peer_id,json=fromPeerId" json:"from_peer_id,omitempty"`
	// Signature is the sender signature.
	// Should not contain PubKey, which is inferred from peer id.
	Signature *peer.Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	// Data is the PubMessageInner data.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMessage) Reset()         { *m = PubMessage{} }
func (m *PubMessage) String() string { return proto.CompactTextString(m) }
func (*PubMessage) ProtoMessage()    {}
func (*PubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_floodsub_88ba93fb630c8290, []int{4}
}
func (m *PubMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMessage.Unmarshal(m, b)
}
func (m *PubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMessage.Marshal(b, m, deterministic)
}
func (dst *PubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMessage.Merge(dst, src)
}
func (m *PubMessage) XXX_Size() int {
	return xxx_messageInfo_PubMessage.Size(m)
}
func (m *PubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubMessage proto.InternalMessageInfo

func (m *PubMessage) GetFromPeerId() string {
	if m != nil {
		return m.FromPeerId
	}
	return ""
}

func (m *PubMessage) GetSignature() *peer.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "floodsub.Config")
	proto.RegisterType((*Packet)(nil), "floodsub.Packet")
	proto.RegisterType((*SubscriptionOpts)(nil), "floodsub.SubscriptionOpts")
	proto.RegisterType((*PubMessageInner)(nil), "floodsub.PubMessageInner")
	proto.RegisterType((*PubMessage)(nil), "floodsub.PubMessage")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/pubsub/floodsub/floodsub.proto", fileDescriptor_floodsub_88ba93fb630c8290)
}

var fileDescriptor_floodsub_88ba93fb630c8290 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0xc5, 0x9b, 0xad, 0xb3, 0x9e, 0x6c, 0x92, 0x56, 0x94, 0x62, 0x96, 0x96, 0x06, 0x43, 0x21,
	0x97, 0x3a, 0x90, 0xa5, 0x97, 0x9e, 0x4a, 0x7b, 0xe8, 0x06, 0xb6, 0x6c, 0xd0, 0xee, 0xdd, 0x48,
	0xb6, 0x62, 0x89, 0x3a, 0x96, 0x2a, 0xc9, 0x2c, 0xe9, 0x0f, 0xf4, 0x47, 0xfb, 0x21, 0xc5, 0xb2,
	0x1c, 0x6f, 0x7b, 0x28, 0xb9, 0x88, 0xd1, 0x9b, 0xf7, 0x46, 0x9a, 0x99, 0x07, 0x9f, 0x4b, 0x61,
	0x79, 0x43, 0xd3, 0x5c, 0xee, 0x57, 0x44, 0x31, 0x6d, 0x1b, 0xcd, 0xb4, 0xa4, 0xd2, 0x8a, 0xdc,
	0xac, 0xa8, 0xd8, 0x69, 0x69, 0xec, 0x4a, 0x35, 0xd4, 0x34, 0x74, 0xb5, 0xab, 0xa4, 0x2c, 0x9e,
	0x06, 0xa9, 0xd2, 0xd2, 0x4a, 0x74, 0xd1, 0xdf, 0xaf, 0xae, 0x4f, 0xaa, 0xc6, 0x98, 0x76, 0x47,
	0x27, 0x3f, 0x4d, 0xc4, 0x89, 0xe1, 0xee, 0xf0, 0xa2, 0x0f, 0xff, 0x13, 0x59, 0xb1, 0x67, 0xc6,
	0x92, 0xbd, 0x1a, 0xa2, 0x4e, 0x96, 0xfc, 0x0e, 0x20, 0xfc, 0x22, 0xeb, 0x9d, 0x28, 0xd1, 0x2b,
	0x08, 0x0b, 0x56, 0x6a, 0xc6, 0xe2, 0x60, 0x11, 0x2c, 0xa7, 0xd8, 0xdf, 0xd0, 0x1b, 0x80, 0x2e,
	0xca, 0x2a, 0xf9, 0x18, 0x9f, 0xb9, 0x5c, 0xd4, 0x21, 0xb7, 0xf2, 0x11, 0xbd, 0x85, 0x89, 0x4f,
	0x73, 0x51, 0xf2, 0x78, 0xe4, 0xf2, 0x5e, 0x71, 0x23, 0x4a, 0xde, 0x12, 0xb8, 0x30, 0x56, 0xea,
	0x43, 0x56, 0xb1, 0x3a, 0x3e, 0xef, 0x08, 0x1e, 0xba, 0x65, 0x35, 0x7a, 0x07, 0xb3, 0x9e, 0x50,
	0x4a, 0x63, 0x84, 0x8a, 0x9f, 0x39, 0xce, 0xd4, 0xa3, 0x5f, 0x1d, 0x88, 0x3e, 0xc2, 0x0b, 0xd5,
	0xd0, 0x4a, 0x18, 0x9e, 0xb5, 0x7d, 0x67, 0xf6, 0xa0, 0x58, 0x1c, 0x2e, 0x82, 0xe5, 0x6c, 0x3d,
	0x4b, 0xdd, 0x24, 0x6e, 0x88, 0xe1, 0x0f, 0x07, 0xc5, 0xf0, 0xdc, 0x13, 0x7b, 0x20, 0xf9, 0x09,
	0xe1, 0x96, 0xe4, 0xdf, 0x99, 0x45, 0x9f, 0x60, 0x6a, 0x1a, 0x6a, 0x72, 0x2d, 0x94, 0x15, 0xb2,
	0x36, 0x71, 0xb0, 0x18, 0x2d, 0x27, 0xeb, 0xab, 0xf4, 0xb8, 0xc3, 0xfb, 0x27, 0xe9, 0x3b, 0x65,
	0x0d, 0xfe, 0x5b, 0x80, 0x52, 0x18, 0xfb, 0xf2, 0xf1, 0x99, 0xd3, 0xbe, 0x1c, 0xb4, 0xdb, 0x86,
	0x7e, 0x63, 0xc6, 0x90, 0x92, 0xe1, 0x9e, 0x94, 0xdc, 0xc1, 0xf3, 0x7f, 0x4b, 0xa2, 0xd7, 0x10,
	0xf9, 0xa2, 0xb4, 0x1b, 0xf7, 0x05, 0x1e, 0x80, 0x76, 0xe2, 0x39, 0x27, 0x75, 0xcd, 0xaa, 0x4c,
	0x14, 0x6e, 0xe2, 0x11, 0x8e, 0x3c, 0xb2, 0x29, 0x92, 0x5f, 0x01, 0xcc, 0x87, 0x87, 0x36, 0x75,
	0xcd, 0x34, 0x42, 0x70, 0x5e, 0x10, 0x4b, 0x5c, 0xad, 0x4b, 0xec, 0x62, 0x14, 0xc3, 0xd8, 0x8b,
	0x7c, 0x8d, 0xfe, 0x8a, 0xd6, 0x10, 0x1d, 0x8d, 0xe0, 0x36, 0xd6, 0x36, 0x31, 0x58, 0xe3, 0xa1,
	0x8f, 0xf0, 0x40, 0x6b, 0x5f, 0x30, 0xa4, 0xb2, 0x6e, 0x7f, 0x63, 0xec, 0xe2, 0xe4, 0x07, 0xc0,
	0xf0, 0x11, 0xb4, 0x80, 0xcb, 0x9d, 0x96, 0xfb, 0xac, 0xb5, 0x72, 0xfb, 0xf1, 0xc0, 0x3d, 0x0a,
	0x2d, 0xb6, 0x65, 0x4c, 0x6f, 0x0a, 0xf4, 0x1e, 0x22, 0x23, 0xca, 0x9a, 0xb4, 0xe6, 0x74, 0x7f,
	0x9a, 0xac, 0xe7, 0xa9, 0x73, 0xfe, 0x7d, 0x0f, 0xe3, 0x81, 0x71, 0x6c, 0x6a, 0x34, 0x34, 0x45,
	0x43, 0xe7, 0xdb, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x5a, 0x75, 0x64, 0xa8, 0x03,
	0x00, 0x00,
}
