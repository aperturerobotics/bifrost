// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto (package nats, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { HashType } from '../../hash/hash_pb.js'

/**
 * NatsConnType indicates the type of nats conn a stream represents.
 *
 * @generated from enum nats.NatsConnType
 */
export enum NatsConnType {
  /**
   * NatsConnType_UNKNOWN is the unknown type.
   *
   * @generated from enum value: NatsConnType_UNKNOWN = 0;
   */
  NatsConnType_UNKNOWN = 0,

  /**
   * NatsConnType_CLIENT is the client connection type.
   *
   * @generated from enum value: NatsConnType_CLIENT = 1;
   */
  NatsConnType_CLIENT = 1,

  /**
   * NatsConnType_ROUTER is the router-router connection type.
   *
   * TODO other types
   *
   * @generated from enum value: NatsConnType_ROUTER = 2;
   */
  NatsConnType_ROUTER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NatsConnType)
proto3.util.setEnumType(NatsConnType, 'nats.NatsConnType', [
  { no: 0, name: 'NatsConnType_UNKNOWN' },
  { no: 1, name: 'NatsConnType_CLIENT' },
  { no: 2, name: 'NatsConnType_ROUTER' },
])

/**
 * Config configures the nats router, hosting a nats.io routing node.
 * This uses nats 2.0 accounts - an Account maps to a Peer.
 *
 * @generated from message nats.Config
 */
export class Config extends Message<Config> {
  /**
   * ClusterName is the cluster ID string to use.
   * This must be the same on all nodes.
   * If unset, uses the protocol ID.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName = ''

  /**
   * PublishHashType is the hash type to use when signing published messages.
   * Defaults to sha256
   *
   * @generated from field: hash.HashType publish_hash_type = 2;
   */
  publishHashType = HashType.HashType_UNKNOWN

  /**
   * LogDebug turns on extended debugging logging.
   *
   * @generated from field: bool log_debug = 3;
   */
  logDebug = false

  /**
   * LogTrace turns on tracing logging.
   * implies log_debug.
   *
   * @generated from field: bool log_trace = 4;
   */
  logTrace = false

  /**
   * LogTraceVrebose turns on verbose tracing logging.
   * Implies log_trace and log_debug.
   *
   * @generated from field: bool log_trace_verbose = 5;
   */
  logTraceVerbose = false

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'nats.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'cluster_name',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'publish_hash_type',
      kind: 'enum',
      T: proto3.getEnumType(HashType),
    },
    { no: 3, name: 'log_debug', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'log_trace', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 5,
      name: 'log_trace_verbose',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined,
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}
