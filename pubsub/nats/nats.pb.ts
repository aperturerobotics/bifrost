// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto (package nats, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from "@aptre/protobuf-es-lite";
import { createEnumType, createMessageType, Message } from "@aptre/protobuf-es-lite";
import type { HashType } from "../../hash/hash.pb.js";
import { HashType_Enum } from "../../hash/hash.pb.js";

export const protobufPackage = "nats";

/**
 * NatsConnType indicates the type of nats conn a stream represents.
 *
 * @generated from enum nats.NatsConnType
 */
export enum NatsConnType {
  /**
   * NatsConnType_UNKNOWN is the unknown type.
   *
   * @generated from enum value: NatsConnType_UNKNOWN = 0;
   */
  NatsConnType_UNKNOWN = 0,

  /**
   * NatsConnType_CLIENT is the client connection type.
   *
   * @generated from enum value: NatsConnType_CLIENT = 1;
   */
  NatsConnType_CLIENT = 1,

  /**
   * NatsConnType_ROUTER is the router-router connection type.
   *
   * TODO other types
   *
   * @generated from enum value: NatsConnType_ROUTER = 2;
   */
  NatsConnType_ROUTER = 2,
}

// NatsConnType_Enum is the enum type for NatsConnType.
export const NatsConnType_Enum = createEnumType("nats.NatsConnType", [
  { no: 0, name: "NatsConnType_UNKNOWN" },
  { no: 1, name: "NatsConnType_CLIENT" },
  { no: 2, name: "NatsConnType_ROUTER" },
]);

/**
 * Config configures the nats router, hosting a nats.io routing node.
 * This uses nats 2.0 accounts - an Account maps to a Peer.
 *
 * @generated from message nats.Config
 */
export type Config = Message<{
  /**
   * ClusterName is the cluster ID string to use.
   * This must be the same on all nodes.
   * If unset, uses the protocol ID.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName?: string;
  /**
   * PublishHashType is the hash type to use when signing published messages.
   * Defaults to sha256
   *
   * @generated from field: hash.HashType publish_hash_type = 2;
   */
  publishHashType?: HashType;
  /**
   * LogDebug turns on extended debugging logging.
   *
   * @generated from field: bool log_debug = 3;
   */
  logDebug?: boolean;
  /**
   * LogTrace turns on tracing logging.
   * implies log_debug.
   *
   * @generated from field: bool log_trace = 4;
   */
  logTrace?: boolean;
  /**
   * LogTraceVrebose turns on verbose tracing logging.
   * Implies log_trace and log_debug.
   *
   * @generated from field: bool log_trace_verbose = 5;
   */
  logTraceVerbose?: boolean;

}>;

export const Config: MessageType<Config> = createMessageType(
  {
    typeName: "nats.Config",
    fields: [
        { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "publish_hash_type", kind: "enum", T: HashType_Enum },
        { no: 3, name: "log_debug", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 4, name: "log_trace", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 5, name: "log_trace_verbose", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  },
);

