// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto

package nats

import (
	fmt "fmt"
	hash "github.com/aperturerobotics/bifrost/hash"
	_ "github.com/aperturerobotics/bifrost/peer"
	_ "github.com/aperturerobotics/timestamp"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// NatsConnType indicates the type of nats conn a stream represents.
type NatsConnType int32

const (
	// NatsConnType_UNKNOWN is the unknown type.
	NatsConnType_NatsConnType_UNKNOWN NatsConnType = 0
	// NatsConnType_CLIENT is the client connection type.
	NatsConnType_NatsConnType_CLIENT NatsConnType = 1
	// NatsConnType_ROUTER is the router-router connection type.
	NatsConnType_NatsConnType_ROUTER NatsConnType = 2
)

var NatsConnType_name = map[int32]string{
	0: "NatsConnType_UNKNOWN",
	1: "NatsConnType_CLIENT",
	2: "NatsConnType_ROUTER",
}

var NatsConnType_value = map[string]int32{
	"NatsConnType_UNKNOWN": 0,
	"NatsConnType_CLIENT":  1,
	"NatsConnType_ROUTER":  2,
}

func (x NatsConnType) String() string {
	return proto.EnumName(NatsConnType_name, int32(x))
}

func (NatsConnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{0}
}

// Config configures the nats router, hosting a nats.io routing node.
// This uses nats 2.0 accounts - an Account maps to a Peer.
type Config struct {
	// ClusterName is the cluster ID string to use.
	// This must be the same on all nodes.
	// If unset, uses the protocol ID.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// PublishHashType is the hash type to use when signing published messages.
	// Defaults to sha256
	PublishHashType hash.HashType `protobuf:"varint,2,opt,name=publish_hash_type,json=publishHashType,proto3,enum=hash.HashType" json:"publish_hash_type,omitempty"`
	// LogDebug turns on extended debugging logging.
	LogDebug bool `protobuf:"varint,3,opt,name=log_debug,json=logDebug,proto3" json:"log_debug,omitempty"`
	// LogTrace turns on tracing logging.
	// implies log_debug.
	LogTrace bool `protobuf:"varint,4,opt,name=log_trace,json=logTrace,proto3" json:"log_trace,omitempty"`
	// LogTraceVrebose turns on verbose tracing logging.
	// Implies log_trace and log_debug.
	LogTraceVerbose      bool     `protobuf:"varint,5,opt,name=log_trace_verbose,json=logTraceVerbose,proto3" json:"log_trace_verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *Config) GetPublishHashType() hash.HashType {
	if m != nil {
		return m.PublishHashType
	}
	return hash.HashType_HashType_UNKNOWN
}

func (m *Config) GetLogDebug() bool {
	if m != nil {
		return m.LogDebug
	}
	return false
}

func (m *Config) GetLogTrace() bool {
	if m != nil {
		return m.LogTrace
	}
	return false
}

func (m *Config) GetLogTraceVerbose() bool {
	if m != nil {
		return m.LogTraceVerbose
	}
	return false
}

func init() {
	proto.RegisterEnum("nats.NatsConnType", NatsConnType_name, NatsConnType_value)
	proto.RegisterType((*Config)(nil), "nats.Config")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto", fileDescriptor_c35526bf3a448caa)
}

var fileDescriptor_c35526bf3a448caa = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xcd, 0x4b, 0xc3, 0x30,
	0x14, 0xb7, 0x73, 0x8e, 0x2d, 0x8e, 0x7d, 0x54, 0xc1, 0xa2, 0x97, 0xe9, 0x69, 0xec, 0xb0, 0x82,
	0xc3, 0xcb, 0xae, 0x73, 0xa0, 0x28, 0x1d, 0x94, 0x4e, 0xc1, 0x4b, 0x49, 0xea, 0x5b, 0x1b, 0x68,
	0x9b, 0x90, 0xbc, 0x08, 0xfb, 0x23, 0xfd, 0x9f, 0xa4, 0xd9, 0x87, 0x8a, 0x20, 0xbb, 0xfc, 0x78,
	0xbf, 0xaf, 0xbc, 0xf0, 0xc8, 0x34, 0xe5, 0x98, 0x19, 0x36, 0x4e, 0x44, 0xe1, 0x53, 0x09, 0x0a,
	0x8d, 0x02, 0x25, 0x98, 0x40, 0x9e, 0x68, 0x9f, 0xf1, 0x95, 0x12, 0x1a, 0x7d, 0x69, 0x98, 0x36,
	0xcc, 0x2f, 0x29, 0x6a, 0x0b, 0x63, 0xa9, 0x04, 0x0a, 0xb7, 0x5e, 0xcd, 0x97, 0x93, 0x83, 0x5e,
	0x00, 0x50, 0x16, 0x36, 0xd5, 0xc3, 0x4a, 0x19, 0xd5, 0x99, 0x85, 0x6d, 0xe9, 0xee, 0xbf, 0x12,
	0xf2, 0x02, 0x34, 0xd2, 0x42, 0x7e, 0x4f, 0x9b, 0xda, 0xcd, 0xa7, 0x43, 0x1a, 0x33, 0x51, 0xae,
	0x78, 0xea, 0x5e, 0x93, 0x76, 0x92, 0x1b, 0x8d, 0xa0, 0xe2, 0x92, 0x16, 0xe0, 0x39, 0x03, 0x67,
	0xd8, 0x0a, 0x4f, 0xb7, 0x5a, 0x40, 0x0b, 0x70, 0xa7, 0xa4, 0x2f, 0x0d, 0xcb, 0xb9, 0xce, 0xe2,
	0x6a, 0x75, 0x8c, 0x6b, 0x09, 0x5e, 0x6d, 0xe0, 0x0c, 0x3b, 0xb7, 0x9d, 0xb1, 0xfd, 0xcc, 0x03,
	0xd5, 0x59, 0xb4, 0x96, 0x10, 0x76, 0xb7, 0xc1, 0x9d, 0xe0, 0x5e, 0x91, 0x56, 0x2e, 0xd2, 0xf8,
	0x1d, 0x98, 0x49, 0xbd, 0xe3, 0x81, 0x33, 0x6c, 0x86, 0xcd, 0x5c, 0xa4, 0xf7, 0x15, 0xdf, 0x99,
	0xa8, 0x68, 0x02, 0x5e, 0x7d, 0x6f, 0x46, 0x15, 0x77, 0x47, 0xa4, 0xbf, 0x37, 0xe3, 0x0f, 0x50,
	0x4c, 0x68, 0xf0, 0x4e, 0x6c, 0xa8, 0xbb, 0x0b, 0xbd, 0x6c, 0xe4, 0xd1, 0x1b, 0x69, 0x07, 0x14,
	0xf5, 0x4c, 0x94, 0xa5, 0xdd, 0xea, 0x91, 0xf3, 0x9f, 0x3c, 0x5e, 0x06, 0x4f, 0xc1, 0xe2, 0x35,
	0xe8, 0x1d, 0xb9, 0x17, 0xe4, 0xec, 0x97, 0x33, 0x7b, 0x7e, 0x9c, 0x07, 0x51, 0xcf, 0xf9, 0x63,
	0x84, 0x8b, 0x65, 0x34, 0x0f, 0x7b, 0x35, 0xd6, 0xb0, 0x27, 0x9b, 0x7c, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x9d, 0xe6, 0xf6, 0xb5, 0x17, 0x02, 0x00, 0x00,
}
