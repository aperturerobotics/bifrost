// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto

package nats

import (
	fmt "fmt"
	_ "github.com/aperturerobotics/bifrost/hash"
	peer "github.com/aperturerobotics/bifrost/peer"
	timestamp "github.com/aperturerobotics/timestamp"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// NatsConnType indicates the type of nats conn a stream represents.
type NatsConnType int32

const (
	// NatsConnType_UNKNOWN is the unknown type.
	NatsConnType_NatsConnType_UNKNOWN NatsConnType = 0
	// NatsConnType_CLIENT is the client connection type.
	NatsConnType_NatsConnType_CLIENT NatsConnType = 1
	// NatsConnType_ROUTER is the router-router connection type.
	NatsConnType_NatsConnType_ROUTER NatsConnType = 2
)

var NatsConnType_name = map[int32]string{
	0: "NatsConnType_UNKNOWN",
	1: "NatsConnType_CLIENT",
	2: "NatsConnType_ROUTER",
}

var NatsConnType_value = map[string]int32{
	"NatsConnType_UNKNOWN": 0,
	"NatsConnType_CLIENT":  1,
	"NatsConnType_ROUTER":  2,
}

func (x NatsConnType) String() string {
	return proto.EnumName(NatsConnType_name, int32(x))
}

func (NatsConnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{0}
}

// Config configures the nats router, hosting a nats.io routing node.
// This uses nats 2.0 accounts - an Account maps to a Peer.
type Config struct {
	// Trace turns on trace mode for logging.
	Trace bool `protobuf:"varint,1,opt,name=trace,proto3" json:"trace,omitempty"`
	// ClusterName is the cluster ID string to use.
	// This must be the same on all nodes.
	// If unset, uses the protocol ID.
	ClusterName          string   `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetTrace() bool {
	if m != nil {
		return m.Trace
	}
	return false
}

func (m *Config) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

// PubMessageInner is the signed inner portion of the message.
type PubMessageInner struct {
	// Data is the message data.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Channel is the channel.
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Timestamp is the message timestamp.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Salt is a random int32.
	Salt                 uint32   `protobuf:"fixed32,4,opt,name=salt,proto3" json:"salt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMessageInner) Reset()         { *m = PubMessageInner{} }
func (m *PubMessageInner) String() string { return proto.CompactTextString(m) }
func (*PubMessageInner) ProtoMessage()    {}
func (*PubMessageInner) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{1}
}

func (m *PubMessageInner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMessageInner.Unmarshal(m, b)
}
func (m *PubMessageInner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMessageInner.Marshal(b, m, deterministic)
}
func (m *PubMessageInner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMessageInner.Merge(m, src)
}
func (m *PubMessageInner) XXX_Size() int {
	return xxx_messageInfo_PubMessageInner.Size(m)
}
func (m *PubMessageInner) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMessageInner.DiscardUnknown(m)
}

var xxx_messageInfo_PubMessageInner proto.InternalMessageInfo

func (m *PubMessageInner) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubMessageInner) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *PubMessageInner) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *PubMessageInner) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

// PubMessage is a message published via the pubsub channel.
type PubMessage struct {
	// FromPeerId is the peer identifier of the sender.
	FromPeerId string `protobuf:"bytes,1,opt,name=from_peer_id,json=fromPeerId,proto3" json:"from_peer_id,omitempty"`
	// Signature is the sender signature.
	// Should not contain PubKey, which is inferred from peer id.
	Signature *peer.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Data is the PubMessageInner data.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubMessage) Reset()         { *m = PubMessage{} }
func (m *PubMessage) String() string { return proto.CompactTextString(m) }
func (*PubMessage) ProtoMessage()    {}
func (*PubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35526bf3a448caa, []int{2}
}

func (m *PubMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubMessage.Unmarshal(m, b)
}
func (m *PubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubMessage.Marshal(b, m, deterministic)
}
func (m *PubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubMessage.Merge(m, src)
}
func (m *PubMessage) XXX_Size() int {
	return xxx_messageInfo_PubMessage.Size(m)
}
func (m *PubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PubMessage proto.InternalMessageInfo

func (m *PubMessage) GetFromPeerId() string {
	if m != nil {
		return m.FromPeerId
	}
	return ""
}

func (m *PubMessage) GetSignature() *peer.Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("nats.NatsConnType", NatsConnType_name, NatsConnType_value)
	proto.RegisterType((*Config)(nil), "nats.Config")
	proto.RegisterType((*PubMessageInner)(nil), "nats.PubMessageInner")
	proto.RegisterType((*PubMessage)(nil), "nats.PubMessage")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto", fileDescriptor_c35526bf3a448caa)
}

var fileDescriptor_c35526bf3a448caa = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x4d, 0x8b, 0xdb, 0x30,
	0x10, 0xad, 0x93, 0x34, 0xa9, 0x27, 0x86, 0x04, 0x35, 0x50, 0xd3, 0x93, 0x9b, 0x93, 0x29, 0xd4,
	0x86, 0x84, 0x5e, 0x7a, 0x2b, 0x21, 0x87, 0xd0, 0xd6, 0x09, 0xaa, 0x43, 0xa1, 0x17, 0x23, 0x3b,
	0x13, 0xdb, 0x10, 0x4b, 0xae, 0x24, 0x1f, 0xfa, 0x0b, 0xf6, 0x6f, 0x2f, 0x56, 0x3e, 0xbc, 0xcb,
	0xc2, 0x92, 0xcb, 0xf0, 0x66, 0x34, 0xef, 0xe9, 0xcd, 0x0c, 0x7c, 0xcb, 0x4b, 0x5d, 0x34, 0x69,
	0x90, 0x89, 0x2a, 0x64, 0x35, 0x4a, 0xdd, 0x48, 0x94, 0x22, 0x15, 0xba, 0xcc, 0x54, 0x98, 0x96,
	0x47, 0x29, 0x94, 0x0e, 0xeb, 0x26, 0x55, 0x4d, 0x1a, 0x72, 0xa6, 0x95, 0x09, 0x41, 0x2d, 0x85,
	0x16, 0x64, 0xd0, 0xe2, 0x8f, 0xcb, 0xbb, 0x14, 0x10, 0xa5, 0x09, 0x67, 0xea, 0x7d, 0xa4, 0x82,
	0xa9, 0xc2, 0x84, 0x0b, 0xe9, 0xeb, 0x6b, 0x24, 0x5d, 0x56, 0xa8, 0x34, 0xab, 0xea, 0x0e, 0x9d,
	0x69, 0xf3, 0xef, 0x30, 0x5c, 0x09, 0x7e, 0x2c, 0x73, 0x32, 0x83, 0xb7, 0x5a, 0xb2, 0x0c, 0x5d,
	0xcb, 0xb3, 0xfc, 0x77, 0xf4, 0x9c, 0x90, 0x4f, 0xe0, 0x64, 0xa7, 0x46, 0x69, 0x94, 0x09, 0x67,
	0x15, 0xba, 0x3d, 0xcf, 0xf2, 0x6d, 0x3a, 0xbe, 0xd4, 0x22, 0x56, 0xe1, 0xfc, 0xc1, 0x82, 0xc9,
	0xae, 0x49, 0x7f, 0xa1, 0x52, 0x2c, 0xc7, 0x0d, 0xe7, 0x28, 0x09, 0x81, 0xc1, 0x81, 0x69, 0x66,
	0xb4, 0x1c, 0x6a, 0x30, 0x71, 0x61, 0x94, 0x15, 0x8c, 0x73, 0x3c, 0x5d, 0x54, 0xae, 0x29, 0x59,
	0x80, 0x7d, 0xf3, 0xe5, 0xf6, 0x3d, 0xcb, 0x1f, 0x2f, 0x66, 0x41, 0xe7, 0x34, 0xbe, 0x22, 0xda,
	0xb5, 0xb5, 0x3f, 0x28, 0x76, 0xd2, 0xee, 0xc0, 0xb3, 0xfc, 0x11, 0x35, 0x78, 0xfe, 0x0f, 0xa0,
	0x33, 0x42, 0x3c, 0x70, 0x8e, 0x52, 0x54, 0x49, 0xbb, 0xd9, 0xa4, 0x3c, 0x18, 0x2f, 0x36, 0x85,
	0xb6, 0xb6, 0x43, 0x94, 0x9b, 0x03, 0xf9, 0x02, 0xb6, 0x2a, 0x73, 0xce, 0xda, 0x5d, 0x19, 0x4f,
	0xe3, 0xc5, 0x24, 0x30, 0x87, 0xf8, 0x7d, 0x2d, 0xd3, 0xae, 0xe3, 0x36, 0x54, 0xbf, 0x1b, 0xea,
	0xf3, 0x5f, 0x70, 0x22, 0xa6, 0xd5, 0x4a, 0x70, 0x1e, 0xff, 0xaf, 0x91, 0xb8, 0x30, 0x7b, 0x9a,
	0x27, 0xfb, 0xe8, 0x47, 0xb4, 0xfd, 0x13, 0x4d, 0xdf, 0x90, 0x0f, 0xf0, 0xfe, 0xd9, 0xcb, 0xea,
	0xe7, 0x66, 0x1d, 0xc5, 0x53, 0xeb, 0xc5, 0x03, 0xdd, 0xee, 0xe3, 0x35, 0x9d, 0xf6, 0xd2, 0xa1,
	0x39, 0xd1, 0xf2, 0x31, 0x00, 0x00, 0xff, 0xff, 0x61, 0x29, 0xb6, 0x39, 0x87, 0x02, 0x00, 0x00,
}
