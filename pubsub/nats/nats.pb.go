// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.8.0
// source: github.com/aperturerobotics/bifrost/pubsub/nats/nats.proto

package nats

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	hash "github.com/aperturerobotics/bifrost/hash"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
)

// NatsConnType indicates the type of nats conn a stream represents.
type NatsConnType int32

const (
	// NatsConnType_UNKNOWN is the unknown type.
	NatsConnType_NatsConnType_UNKNOWN NatsConnType = 0
	// NatsConnType_CLIENT is the client connection type.
	NatsConnType_NatsConnType_CLIENT NatsConnType = 1
	// NatsConnType_ROUTER is the router-router connection type.
	NatsConnType_NatsConnType_ROUTER NatsConnType = 2 // TODO other types
)

// Enum value maps for NatsConnType.
var (
	NatsConnType_name = map[int32]string{
		0: "NatsConnType_UNKNOWN",
		1: "NatsConnType_CLIENT",
		2: "NatsConnType_ROUTER",
	}
	NatsConnType_value = map[string]int32{
		"NatsConnType_UNKNOWN": 0,
		"NatsConnType_CLIENT":  1,
		"NatsConnType_ROUTER":  2,
	}
)

func (x NatsConnType) Enum() *NatsConnType {
	p := new(NatsConnType)
	*p = x
	return p
}

func (x NatsConnType) String() string {
	name, valid := NatsConnType_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Config configures the nats router, hosting a nats.io routing node.
// This uses nats 2.0 accounts - an Account maps to a Peer.
type Config struct {
	unknownFields []byte
	// ClusterName is the cluster ID string to use.
	// This must be the same on all nodes.
	// If unset, uses the protocol ID.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"clusterName,omitempty"`
	// PublishHashType is the hash type to use when signing published messages.
	// Defaults to sha256
	PublishHashType hash.HashType `protobuf:"varint,2,opt,name=publish_hash_type,json=publishHashType,proto3" json:"publishHashType,omitempty"`
	// LogDebug turns on extended debugging logging.
	LogDebug bool `protobuf:"varint,3,opt,name=log_debug,json=logDebug,proto3" json:"logDebug,omitempty"`
	// LogTrace turns on tracing logging.
	// implies log_debug.
	LogTrace bool `protobuf:"varint,4,opt,name=log_trace,json=logTrace,proto3" json:"logTrace,omitempty"`
	// LogTraceVrebose turns on verbose tracing logging.
	// Implies log_trace and log_debug.
	LogTraceVerbose bool `protobuf:"varint,5,opt,name=log_trace_verbose,json=logTraceVerbose,proto3" json:"logTraceVerbose,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
}

func (*Config) ProtoMessage() {}

func (x *Config) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *Config) GetPublishHashType() hash.HashType {
	if x != nil {
		return x.PublishHashType
	}
	return hash.HashType(0)
}

func (x *Config) GetLogDebug() bool {
	if x != nil {
		return x.LogDebug
	}
	return false
}

func (x *Config) GetLogTrace() bool {
	if x != nil {
		return x.LogTrace
	}
	return false
}

func (x *Config) GetLogTraceVerbose() bool {
	if x != nil {
		return x.LogTraceVerbose
	}
	return false
}

func (m *Config) CloneVT() *Config {
	if m == nil {
		return (*Config)(nil)
	}
	r := new(Config)
	r.ClusterName = m.ClusterName
	r.PublishHashType = m.PublishHashType
	r.LogDebug = m.LogDebug
	r.LogTrace = m.LogTrace
	r.LogTraceVerbose = m.LogTraceVerbose
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Config) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Config) EqualVT(that *Config) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.ClusterName != that.ClusterName {
		return false
	}
	if this.PublishHashType != that.PublishHashType {
		return false
	}
	if this.LogDebug != that.LogDebug {
		return false
	}
	if this.LogTrace != that.LogTrace {
		return false
	}
	if this.LogTraceVerbose != that.LogTraceVerbose {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Config) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Config)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the NatsConnType to JSON.
func (x NatsConnType) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), NatsConnType_name)
}

// MarshalText marshals the NatsConnType to text.
func (x NatsConnType) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), NatsConnType_name)), nil
}

// MarshalJSON marshals the NatsConnType to JSON.
func (x NatsConnType) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the NatsConnType from JSON.
func (x *NatsConnType) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(NatsConnType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read NatsConnType enum: %v", err)
		return
	}
	*x = NatsConnType(v)
}

// UnmarshalText unmarshals the NatsConnType from text.
func (x *NatsConnType) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), NatsConnType_value)
	if err != nil {
		return err
	}
	*x = NatsConnType(i)
	return nil
}

// UnmarshalJSON unmarshals the NatsConnType from JSON.
func (x *NatsConnType) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Config message to JSON.
func (x *Config) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ClusterName != "" || s.HasField("clusterName") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("clusterName")
		s.WriteString(x.ClusterName)
	}
	if x.PublishHashType != 0 || s.HasField("publishHashType") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("publishHashType")
		x.PublishHashType.MarshalProtoJSON(s)
	}
	if x.LogDebug || s.HasField("logDebug") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("logDebug")
		s.WriteBool(x.LogDebug)
	}
	if x.LogTrace || s.HasField("logTrace") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("logTrace")
		s.WriteBool(x.LogTrace)
	}
	if x.LogTraceVerbose || s.HasField("logTraceVerbose") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("logTraceVerbose")
		s.WriteBool(x.LogTraceVerbose)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Config to JSON.
func (x *Config) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Config message from JSON.
func (x *Config) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "cluster_name", "clusterName":
			s.AddField("cluster_name")
			x.ClusterName = s.ReadString()
		case "publish_hash_type", "publishHashType":
			s.AddField("publish_hash_type")
			x.PublishHashType.UnmarshalProtoJSON(s)
		case "log_debug", "logDebug":
			s.AddField("log_debug")
			x.LogDebug = s.ReadBool()
		case "log_trace", "logTrace":
			s.AddField("log_trace")
			x.LogTrace = s.ReadBool()
		case "log_trace_verbose", "logTraceVerbose":
			s.AddField("log_trace_verbose")
			x.LogTraceVerbose = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the Config from JSON.
func (x *Config) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Config) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Config) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.LogTraceVerbose {
		i--
		if m.LogTraceVerbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.LogTrace {
		i--
		if m.LogTrace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LogDebug {
		i--
		if m.LogDebug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PublishHashType != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.PublishHashType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Config) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.PublishHashType != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.PublishHashType))
	}
	if m.LogDebug {
		n += 2
	}
	if m.LogTrace {
		n += 2
	}
	if m.LogTraceVerbose {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (x NatsConnType) MarshalProtoText() string {
	return x.String()
}
func (x *Config) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Config {")
	if x.ClusterName != "" {
		if sb.Len() > 8 {
			sb.WriteString(" ")
		}
		sb.WriteString("cluster_name: ")
		sb.WriteString(strconv.Quote(x.ClusterName))
	}
	if x.PublishHashType != 0 {
		if sb.Len() > 8 {
			sb.WriteString(" ")
		}
		sb.WriteString("publish_hash_type: ")
		sb.WriteString("\"")
		sb.WriteString(hash.HashType(x.PublishHashType).String())
		sb.WriteString("\"")
	}
	if x.LogDebug != false {
		if sb.Len() > 8 {
			sb.WriteString(" ")
		}
		sb.WriteString("log_debug: ")
		sb.WriteString(strconv.FormatBool(x.LogDebug))
	}
	if x.LogTrace != false {
		if sb.Len() > 8 {
			sb.WriteString(" ")
		}
		sb.WriteString("log_trace: ")
		sb.WriteString(strconv.FormatBool(x.LogTrace))
	}
	if x.LogTraceVerbose != false {
		if sb.Len() > 8 {
			sb.WriteString(" ")
		}
		sb.WriteString("log_trace_verbose: ")
		sb.WriteString(strconv.FormatBool(x.LogTraceVerbose))
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *Config) String() string {
	return x.MarshalProtoText()
}
func (m *Config) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishHashType", wireType)
			}
			m.PublishHashType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishHashType |= hash.HashType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogDebug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogDebug = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTrace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogTrace = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogTraceVerbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogTraceVerbose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
