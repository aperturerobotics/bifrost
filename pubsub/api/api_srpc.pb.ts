// @generated by protoc-gen-es-starpc none with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/api/api.proto (package pubsub.api, syntax proto3)
/* eslint-disable */

import { SubscribeRequest, SubscribeResponse } from './api_pb.js'
import { MethodKind } from '@bufbuild/protobuf'
import {
  buildDecodeMessageTransform,
  buildEncodeMessageTransform,
  MessageStream,
  ProtoRpc,
} from 'starpc'

/**
 * PubSubService is the bifrost pubsub service.
 *
 * @generated from service pubsub.api.PubSubService
 */
export const PubSubServiceDefinition = {
  typeName: 'pubsub.api.PubSubService',
  methods: {
    /**
     * Subscribe subscribes to a channel, allowing the subscriber to publish
     * messages over the same channel.
     *
     * @generated from rpc pubsub.api.PubSubService.Subscribe
     */
    Subscribe: {
      name: 'Subscribe',
      I: SubscribeRequest,
      O: SubscribeResponse,
      kind: MethodKind.BiDiStreaming,
    },
  },
} as const

/**
 * PubSubService is the bifrost pubsub service.
 *
 * @generated from service pubsub.api.PubSubService
 */
export interface PubSubService {
  /**
   * Subscribe subscribes to a channel, allowing the subscriber to publish
   * messages over the same channel.
   *
   * @generated from rpc pubsub.api.PubSubService.Subscribe
   */
  Subscribe(
    request: MessageStream<SubscribeRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<SubscribeResponse>
}

export const PubSubServiceServiceName = PubSubServiceDefinition.typeName

export class PubSubServiceClient implements PubSubService {
  private readonly rpc: ProtoRpc
  private readonly service: string
  constructor(rpc: ProtoRpc, opts?: { service?: string }) {
    this.service = opts?.service || PubSubServiceServiceName
    this.rpc = rpc
    this.Subscribe = this.Subscribe.bind(this)
  }
  /**
   * Subscribe subscribes to a channel, allowing the subscriber to publish
   * messages over the same channel.
   *
   * @generated from rpc pubsub.api.PubSubService.Subscribe
   */
  Subscribe(
    request: MessageStream<SubscribeRequest>,
    abortSignal?: AbortSignal,
  ): MessageStream<SubscribeResponse> {
    const result = this.rpc.bidirectionalStreamingRequest(
      this.service,
      PubSubServiceDefinition.methods.Subscribe.name,
      buildEncodeMessageTransform(SubscribeRequest)(request),
      abortSignal || undefined,
    )
    return buildDecodeMessageTransform(SubscribeResponse)(result)
  }
}
