// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/api/api.proto (package pubsub.api, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from '@aptre/protobuf-es-lite'
import { createMessageType, ScalarType } from '@aptre/protobuf-es-lite'

export const protobufPackage = 'pubsub.api'

/**
 * PublishRequest is a message published via the subscribe channel.
 *
 * @generated from message pubsub.api.PublishRequest
 */
export interface PublishRequest {
  /**
   * Data is the published data.
   *
   * @generated from field: bytes data = 1;
   */
  data?: Uint8Array
  /**
   * Identifier is a uint32 identifier to use for outgoing status.
   * If zero, no outgoing status response will be sent.
   *
   * @generated from field: uint32 identifier = 2;
   */
  identifier?: number
}

// PublishRequest contains the message type declaration for PublishRequest.
export const PublishRequest: MessageType<PublishRequest> = createMessageType({
  typeName: 'pubsub.api.PublishRequest',
  fields: [
    { no: 1, name: 'data', kind: 'scalar', T: ScalarType.BYTES },
    { no: 2, name: 'identifier', kind: 'scalar', T: ScalarType.UINT32 },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * SubcribeRequest is a pubsub subscription request message.
 *
 * @generated from message pubsub.api.SubscribeRequest
 */
export interface SubscribeRequest {
  /**
   * ChannelId is the channel id to subscribe to.
   * Must be sent before / with publish.
   * Cannot change the channel ID after first transmission.
   *
   * @generated from field: string channel_id = 1;
   */
  channelId?: string
  /**
   * PeerId is the peer identifier of the publisher/subscriber.
   * The peer ID will be used to acquire the peer private key.
   *
   * @generated from field: string peer_id = 2;
   */
  peerId?: string
  /**
   * PrivKeyPem is an alternate to PeerId, specify private key inline.
   * Overrides PeerId if set.
   *
   * @generated from field: string priv_key_pem = 3;
   */
  privKeyPem?: string
  /**
   * PublishRequest contains a publish message request.
   *
   * @generated from field: pubsub.api.PublishRequest publish_request = 4;
   */
  publishRequest?: PublishRequest
}

// SubscribeRequest contains the message type declaration for SubscribeRequest.
export const SubscribeRequest: MessageType<SubscribeRequest> =
  createMessageType({
    typeName: 'pubsub.api.SubscribeRequest',
    fields: [
      { no: 1, name: 'channel_id', kind: 'scalar', T: ScalarType.STRING },
      { no: 2, name: 'peer_id', kind: 'scalar', T: ScalarType.STRING },
      { no: 3, name: 'priv_key_pem', kind: 'scalar', T: ScalarType.STRING },
      {
        no: 4,
        name: 'publish_request',
        kind: 'message',
        T: () => PublishRequest,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * IncomingMessage implements Message with a proto object.
 *
 * @generated from message pubsub.api.IncomingMessage
 */
export interface IncomingMessage {
  /**
   * FromPeerId is the peer identifier of the sender.
   *
   * @generated from field: string from_peer_id = 1;
   */
  fromPeerId?: string
  /**
   * Authenticated indicates if the message is verified to be from the sender.
   *
   * @generated from field: bool authenticated = 2;
   */
  authenticated?: boolean
  /**
   * Data is the inner data.
   *
   * @generated from field: bytes data = 3;
   */
  data?: Uint8Array
}

// IncomingMessage contains the message type declaration for IncomingMessage.
export const IncomingMessage: MessageType<IncomingMessage> = createMessageType({
  typeName: 'pubsub.api.IncomingMessage',
  fields: [
    { no: 1, name: 'from_peer_id', kind: 'scalar', T: ScalarType.STRING },
    { no: 2, name: 'authenticated', kind: 'scalar', T: ScalarType.BOOL },
    { no: 3, name: 'data', kind: 'scalar', T: ScalarType.BYTES },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * OutgoingStatus is status of an outgoing message.
 *
 * @generated from message pubsub.api.OutgoingStatus
 */
export interface OutgoingStatus {
  /**
   * Identifier is the request-provided identifier for the message.
   *
   * @generated from field: uint32 identifier = 1;
   */
  identifier?: number
  /**
   * Sent indicates if the message was sent.
   *
   * @generated from field: bool sent = 2;
   */
  sent?: boolean
}

// OutgoingStatus contains the message type declaration for OutgoingStatus.
export const OutgoingStatus: MessageType<OutgoingStatus> = createMessageType({
  typeName: 'pubsub.api.OutgoingStatus',
  fields: [
    { no: 1, name: 'identifier', kind: 'scalar', T: ScalarType.UINT32 },
    { no: 2, name: 'sent', kind: 'scalar', T: ScalarType.BOOL },
  ] as readonly PartialFieldInfo[],
  packedByDefault: true,
})

/**
 * SubscripionStatus is the status of the subscription handle.
 *
 * @generated from message pubsub.api.SubscriptionStatus
 */
export interface SubscriptionStatus {
  /**
   * Subscribed indicates the subscription is established.
   *
   * @generated from field: bool subscribed = 1;
   */
  subscribed?: boolean
}

// SubscriptionStatus contains the message type declaration for SubscriptionStatus.
export const SubscriptionStatus: MessageType<SubscriptionStatus> =
  createMessageType({
    typeName: 'pubsub.api.SubscriptionStatus',
    fields: [
      { no: 1, name: 'subscribed', kind: 'scalar', T: ScalarType.BOOL },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })

/**
 * SubcribeResponse is a pubsub subscription response message.
 *
 * @generated from message pubsub.api.SubscribeResponse
 */
export interface SubscribeResponse {
  /**
   * IncomingMessage is an incoming message.
   *
   * @generated from field: pubsub.api.IncomingMessage incoming_message = 1;
   */
  incomingMessage?: IncomingMessage
  /**
   * OutgoingStatus is status of an outgoing message.
   * Sent when a Publish request finishes.
   *
   * @generated from field: pubsub.api.OutgoingStatus outgoing_status = 2;
   */
  outgoingStatus?: OutgoingStatus
  /**
   * SubscriptionStatus is the status of the subscription
   *
   * @generated from field: pubsub.api.SubscriptionStatus subscription_status = 3;
   */
  subscriptionStatus?: SubscriptionStatus
}

// SubscribeResponse contains the message type declaration for SubscribeResponse.
export const SubscribeResponse: MessageType<SubscribeResponse> =
  createMessageType({
    typeName: 'pubsub.api.SubscribeResponse',
    fields: [
      {
        no: 1,
        name: 'incoming_message',
        kind: 'message',
        T: () => IncomingMessage,
      },
      {
        no: 2,
        name: 'outgoing_status',
        kind: 'message',
        T: () => OutgoingStatus,
      },
      {
        no: 3,
        name: 'subscription_status',
        kind: 'message',
        T: () => SubscriptionStatus,
      },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  })
