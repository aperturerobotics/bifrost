// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.29
// source: github.com/aperturerobotics/bifrost/pubsub/api/api.proto

package pubsub_api

import (
	context "context"
	errors "errors"

	proto "github.com/golang/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto struct{}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg)
}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg)
}

type DRPCPubSubServiceClient interface {
	DRPCConn() drpc.Conn

	Subscribe(ctx context.Context) (DRPCPubSubService_SubscribeClient, error)
}

type drpcPubSubServiceClient struct {
	cc drpc.Conn
}

func NewDRPCPubSubServiceClient(cc drpc.Conn) DRPCPubSubServiceClient {
	return &drpcPubSubServiceClient{cc}
}

func (c *drpcPubSubServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPubSubServiceClient) Subscribe(ctx context.Context) (DRPCPubSubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, "/pubsub.api.PubSubService/Subscribe", drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcPubSubService_SubscribeClient{stream}
	return x, nil
}

type DRPCPubSubService_SubscribeClient interface {
	drpc.Stream
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
}

type drpcPubSubService_SubscribeClient struct {
	drpc.Stream
}

func (x *drpcPubSubService_SubscribeClient) Send(m *SubscribeRequest) error {
	return x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{})
}

func (x *drpcPubSubService_SubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcPubSubService_SubscribeClient) RecvMsg(m *SubscribeResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{})
}

type DRPCPubSubServiceServer interface {
	Subscribe(DRPCPubSubService_SubscribeStream) error
}

type DRPCPubSubServiceUnimplementedServer struct{}

func (s *DRPCPubSubServiceUnimplementedServer) Subscribe(DRPCPubSubService_SubscribeStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCPubSubServiceDescription struct{}

func (DRPCPubSubServiceDescription) NumMethods() int { return 1 }

func (DRPCPubSubServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/pubsub.api.PubSubService/Subscribe", drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCPubSubServiceServer).
					Subscribe(
						&drpcPubSubService_SubscribeStream{in1.(drpc.Stream)},
					)
			}, DRPCPubSubServiceServer.Subscribe, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPubSubService(mux drpc.Mux, impl DRPCPubSubServiceServer) error {
	return mux.Register(impl, DRPCPubSubServiceDescription{})
}

type DRPCPubSubService_SubscribeStream interface {
	drpc.Stream
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
}

type drpcPubSubService_SubscribeStream struct {
	drpc.Stream
}

func (x *drpcPubSubService_SubscribeStream) Send(m *SubscribeResponse) error {
	return x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{})
}

func (x *drpcPubSubService_SubscribeStream) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcPubSubService_SubscribeStream) RecvMsg(m *SubscribeRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_pubsub_api_api_proto{})
}
