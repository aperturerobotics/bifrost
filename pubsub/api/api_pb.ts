// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/pubsub/api/api.proto (package pubsub.api, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'

/**
 * SubcribeRequest is a pubsub subscription request message.
 *
 * @generated from message pubsub.api.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  /**
   * ChannelId is the channel id to subscribe to.
   * Must be sent before / with publish.
   * Cannot change the channel ID after first transmission.
   *
   * @generated from field: string channel_id = 1;
   */
  channelId = ''

  /**
   * PeerId is the peer identifier of the publisher/subscriber.
   * The peer ID will be used to acquire the peer private key.
   *
   * @generated from field: string peer_id = 2;
   */
  peerId = ''

  /**
   * PrivKeyPem is an alternate to PeerId, specify private key inline.
   * Overrides PeerId if set.
   *
   * @generated from field: string priv_key_pem = 3;
   */
  privKeyPem = ''

  /**
   * PublishRequest contains a publish message request.
   *
   * @generated from field: pubsub.api.PublishRequest publish_request = 4;
   */
  publishRequest?: PublishRequest

  constructor(data?: PartialMessage<SubscribeRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.SubscribeRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'channel_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'peer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'priv_key_pem',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 4, name: 'publish_request', kind: 'message', T: PublishRequest },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined,
    b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SubscribeRequest, a, b)
  }
}

/**
 * PublishRequest is a message published via the subscribe channel.
 *
 * @generated from message pubsub.api.PublishRequest
 */
export class PublishRequest extends Message<PublishRequest> {
  /**
   * Data is the published data.
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0)

  /**
   * Identifier is a uint32 identifier to use for outgoing status.
   * If zero, no outgoing status response will be sent.
   *
   * @generated from field: uint32 identifier = 2;
   */
  identifier = 0

  constructor(data?: PartialMessage<PublishRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.PublishRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 2,
      name: 'identifier',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PublishRequest {
    return new PublishRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PublishRequest {
    return new PublishRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PublishRequest {
    return new PublishRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: PublishRequest | PlainMessage<PublishRequest> | undefined,
    b: PublishRequest | PlainMessage<PublishRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PublishRequest, a, b)
  }
}

/**
 * SubcribeResponse is a pubsub subscription response message.
 *
 * @generated from message pubsub.api.SubscribeResponse
 */
export class SubscribeResponse extends Message<SubscribeResponse> {
  /**
   * IncomingMessage is an incoming message.
   *
   * @generated from field: pubsub.api.IncomingMessage incoming_message = 1;
   */
  incomingMessage?: IncomingMessage

  /**
   * OutgoingStatus is status of an outgoing message.
   * Sent when a Publish request finishes.
   *
   * @generated from field: pubsub.api.OutgoingStatus outgoing_status = 2;
   */
  outgoingStatus?: OutgoingStatus

  /**
   * SubscriptionStatus is the status of the subscription
   *
   * @generated from field: pubsub.api.SubscriptionStatus subscription_status = 3;
   */
  subscriptionStatus?: SubscriptionStatus

  constructor(data?: PartialMessage<SubscribeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.SubscribeResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'incoming_message', kind: 'message', T: IncomingMessage },
    { no: 2, name: 'outgoing_status', kind: 'message', T: OutgoingStatus },
    {
      no: 3,
      name: 'subscription_status',
      kind: 'message',
      T: SubscriptionStatus,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SubscribeResponse {
    return new SubscribeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SubscribeResponse {
    return new SubscribeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SubscribeResponse {
    return new SubscribeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined,
    b: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SubscribeResponse, a, b)
  }
}

/**
 * SubscripionStatus is the status of the subscription handle.
 *
 * @generated from message pubsub.api.SubscriptionStatus
 */
export class SubscriptionStatus extends Message<SubscriptionStatus> {
  /**
   * Subscribed indicates the subscription is established.
   *
   * @generated from field: bool subscribed = 1;
   */
  subscribed = false

  constructor(data?: PartialMessage<SubscriptionStatus>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.SubscriptionStatus'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'subscribed', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SubscriptionStatus {
    return new SubscriptionStatus().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SubscriptionStatus {
    return new SubscriptionStatus().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SubscriptionStatus {
    return new SubscriptionStatus().fromJsonString(jsonString, options)
  }

  static equals(
    a: SubscriptionStatus | PlainMessage<SubscriptionStatus> | undefined,
    b: SubscriptionStatus | PlainMessage<SubscriptionStatus> | undefined,
  ): boolean {
    return proto3.util.equals(SubscriptionStatus, a, b)
  }
}

/**
 * OutgoingStatus is status of an outgoing message.
 *
 * @generated from message pubsub.api.OutgoingStatus
 */
export class OutgoingStatus extends Message<OutgoingStatus> {
  /**
   * Identifier is the request-provided identifier for the message.
   *
   * @generated from field: uint32 identifier = 1;
   */
  identifier = 0

  /**
   * Sent indicates if the message was sent.
   *
   * @generated from field: bool sent = 2;
   */
  sent = false

  constructor(data?: PartialMessage<OutgoingStatus>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.OutgoingStatus'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'identifier',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 2, name: 'sent', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): OutgoingStatus {
    return new OutgoingStatus().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): OutgoingStatus {
    return new OutgoingStatus().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): OutgoingStatus {
    return new OutgoingStatus().fromJsonString(jsonString, options)
  }

  static equals(
    a: OutgoingStatus | PlainMessage<OutgoingStatus> | undefined,
    b: OutgoingStatus | PlainMessage<OutgoingStatus> | undefined,
  ): boolean {
    return proto3.util.equals(OutgoingStatus, a, b)
  }
}

/**
 * IncomingMessage implements Message with a proto object.
 *
 * @generated from message pubsub.api.IncomingMessage
 */
export class IncomingMessage extends Message<IncomingMessage> {
  /**
   * FromPeerId is the peer identifier of the sender.
   *
   * @generated from field: string from_peer_id = 1;
   */
  fromPeerId = ''

  /**
   * Authenticated indicates if the message is verified to be from the sender.
   *
   * @generated from field: bool authenticated = 2;
   */
  authenticated = false

  /**
   * Data is the inner data.
   *
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0)

  constructor(data?: PartialMessage<IncomingMessage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'pubsub.api.IncomingMessage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'from_peer_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 2,
      name: 'authenticated',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
    { no: 3, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): IncomingMessage {
    return new IncomingMessage().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): IncomingMessage {
    return new IncomingMessage().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): IncomingMessage {
    return new IncomingMessage().fromJsonString(jsonString, options)
  }

  static equals(
    a: IncomingMessage | PlainMessage<IncomingMessage> | undefined,
    b: IncomingMessage | PlainMessage<IncomingMessage> | undefined,
  ): boolean {
    return proto3.util.equals(IncomingMessage, a, b)
  }
}
