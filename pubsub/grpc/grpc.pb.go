// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/pubsub/grpc/grpc.proto

package pubsub_grpc

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SubcribeRequest is a pubsub subscription request message.
type SubscribeRequest struct {
	// ChannelId is the channel id to subscribe to.
	// Must be sent before / with publish.
	// Cannot change the channel ID after first transmission.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// PeerId is the peer identifier of the publisher/subscriber.
	// The peer ID will be used to acquire the peer private key.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// PrivKeyPem is an alternate to PeerId, specify private key inline.
	// Overrides PeerId if set.
	PrivKeyPem string `protobuf:"bytes,3,opt,name=priv_key_pem,json=privKeyPem,proto3" json:"priv_key_pem,omitempty"`
	// PublishRequest contains a publish message request.
	PublishRequest       *PublishRequest `protobuf:"bytes,4,opt,name=publish_request,json=publishRequest,proto3" json:"publish_request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *SubscribeRequest) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *SubscribeRequest) GetPrivKeyPem() string {
	if m != nil {
		return m.PrivKeyPem
	}
	return ""
}

func (m *SubscribeRequest) GetPublishRequest() *PublishRequest {
	if m != nil {
		return m.PublishRequest
	}
	return nil
}

// PublishRequest is a message published via the subscribe channel.
type PublishRequest struct {
	// Data is the published data.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Identifier is a uint32 identifier to use for outgoing status.
	// If zero, no outgoing status response will be sent.
	Identifier           uint32   `protobuf:"varint,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{1}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublishRequest) GetIdentifier() uint32 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

// SubcribeResponse is a pubsub subscription response message.
type SubscribeResponse struct {
	// IncomingMessage is an incoming message.
	IncomingMessage *IncomingMessage `protobuf:"bytes,1,opt,name=incoming_message,json=incomingMessage,proto3" json:"incoming_message,omitempty"`
	// OutgoingStatus is status of an outgoing message.
	// Sent when a Publish request finishes.
	OutgoingStatus *OutgoingStatus `protobuf:"bytes,2,opt,name=outgoing_status,json=outgoingStatus,proto3" json:"outgoing_status,omitempty"`
	// SubscriptionStatus is the status of the subscription
	SubscriptionStatus   *SubscriptionStatus `protobuf:"bytes,3,opt,name=subscription_status,json=subscriptionStatus,proto3" json:"subscription_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{2}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetIncomingMessage() *IncomingMessage {
	if m != nil {
		return m.IncomingMessage
	}
	return nil
}

func (m *SubscribeResponse) GetOutgoingStatus() *OutgoingStatus {
	if m != nil {
		return m.OutgoingStatus
	}
	return nil
}

func (m *SubscribeResponse) GetSubscriptionStatus() *SubscriptionStatus {
	if m != nil {
		return m.SubscriptionStatus
	}
	return nil
}

// SubscripionStatus is the status of the subscription handle.
type SubscriptionStatus struct {
	// Subscribed indicates the subscription is established.
	Subscribed           bool     `protobuf:"varint,1,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionStatus) Reset()         { *m = SubscriptionStatus{} }
func (m *SubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*SubscriptionStatus) ProtoMessage()    {}
func (*SubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{3}
}

func (m *SubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionStatus.Unmarshal(m, b)
}
func (m *SubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionStatus.Marshal(b, m, deterministic)
}
func (m *SubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionStatus.Merge(m, src)
}
func (m *SubscriptionStatus) XXX_Size() int {
	return xxx_messageInfo_SubscriptionStatus.Size(m)
}
func (m *SubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionStatus proto.InternalMessageInfo

func (m *SubscriptionStatus) GetSubscribed() bool {
	if m != nil {
		return m.Subscribed
	}
	return false
}

// OutgoingStatus is status of an outgoing message.
type OutgoingStatus struct {
	// Identifier is the request-provided identifier for the message.
	Identifier uint32 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Sent indicates if the message was sent.
	Sent                 bool     `protobuf:"varint,2,opt,name=sent,proto3" json:"sent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutgoingStatus) Reset()         { *m = OutgoingStatus{} }
func (m *OutgoingStatus) String() string { return proto.CompactTextString(m) }
func (*OutgoingStatus) ProtoMessage()    {}
func (*OutgoingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{4}
}

func (m *OutgoingStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutgoingStatus.Unmarshal(m, b)
}
func (m *OutgoingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutgoingStatus.Marshal(b, m, deterministic)
}
func (m *OutgoingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingStatus.Merge(m, src)
}
func (m *OutgoingStatus) XXX_Size() int {
	return xxx_messageInfo_OutgoingStatus.Size(m)
}
func (m *OutgoingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingStatus proto.InternalMessageInfo

func (m *OutgoingStatus) GetIdentifier() uint32 {
	if m != nil {
		return m.Identifier
	}
	return 0
}

func (m *OutgoingStatus) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

// IncomingMessage implements Message with a proto object.
type IncomingMessage struct {
	// FromPeerId is the peer identifier of the sender.
	FromPeerId string `protobuf:"bytes,1,opt,name=from_peer_id,json=fromPeerId,proto3" json:"from_peer_id,omitempty"`
	// Authenticated indicates if the message is verified to be from the sender.
	Authenticated bool `protobuf:"varint,2,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
	// Data is the inner data.
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncomingMessage) Reset()         { *m = IncomingMessage{} }
func (m *IncomingMessage) String() string { return proto.CompactTextString(m) }
func (*IncomingMessage) ProtoMessage()    {}
func (*IncomingMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d572159280ec2d84, []int{5}
}

func (m *IncomingMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncomingMessage.Unmarshal(m, b)
}
func (m *IncomingMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncomingMessage.Marshal(b, m, deterministic)
}
func (m *IncomingMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingMessage.Merge(m, src)
}
func (m *IncomingMessage) XXX_Size() int {
	return xxx_messageInfo_IncomingMessage.Size(m)
}
func (m *IncomingMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingMessage proto.InternalMessageInfo

func (m *IncomingMessage) GetFromPeerId() string {
	if m != nil {
		return m.FromPeerId
	}
	return ""
}

func (m *IncomingMessage) GetAuthenticated() bool {
	if m != nil {
		return m.Authenticated
	}
	return false
}

func (m *IncomingMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "pubsub.grpc.SubscribeRequest")
	proto.RegisterType((*PublishRequest)(nil), "pubsub.grpc.PublishRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "pubsub.grpc.SubscribeResponse")
	proto.RegisterType((*SubscriptionStatus)(nil), "pubsub.grpc.SubscriptionStatus")
	proto.RegisterType((*OutgoingStatus)(nil), "pubsub.grpc.OutgoingStatus")
	proto.RegisterType((*IncomingMessage)(nil), "pubsub.grpc.IncomingMessage")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/pubsub/grpc/grpc.proto", fileDescriptor_d572159280ec2d84)
}

var fileDescriptor_d572159280ec2d84 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x25, 0x74, 0x1a, 0xeb, 0xd7, 0xb5, 0x1d, 0xe6, 0x82, 0x0a, 0xd8, 0xa8, 0x22, 0x2e, 0x7a,
	0x95, 0xa2, 0xc2, 0x15, 0xd7, 0x93, 0x50, 0x85, 0x10, 0x51, 0xf2, 0x00, 0x91, 0x9d, 0x7c, 0x4d,
	0x2d, 0x96, 0xd8, 0xf8, 0x67, 0xd2, 0x5e, 0x8b, 0x67, 0xe3, 0x01, 0x90, 0xed, 0xb4, 0x24, 0x1d,
	0xbb, 0xa9, 0xe2, 0xf3, 0x1d, 0x9d, 0x9e, 0xef, 0xf8, 0x18, 0xbe, 0xd4, 0xdc, 0xec, 0x2d, 0x4b,
	0x4a, 0xd1, 0xac, 0xa9, 0x44, 0x65, 0xac, 0x42, 0x25, 0x98, 0x30, 0xbc, 0xd4, 0x6b, 0xc6, 0x77,
	0x4a, 0x68, 0xb3, 0x96, 0x96, 0x69, 0xcb, 0xd6, 0xb5, 0x92, 0xa5, 0xff, 0x49, 0xa4, 0x12, 0x46,
	0x90, 0x49, 0xc0, 0x13, 0x07, 0xc5, 0xbf, 0x23, 0xb8, 0xca, 0x2d, 0xd3, 0xa5, 0xe2, 0x0c, 0x33,
	0xfc, 0x65, 0x51, 0x1b, 0x72, 0x0d, 0x50, 0xee, 0x69, 0xdb, 0xe2, 0x5d, 0xc1, 0xab, 0x45, 0xb4,
	0x8c, 0x56, 0xe3, 0x6c, 0xdc, 0x21, 0xdb, 0x8a, 0xbc, 0x86, 0x17, 0x12, 0x51, 0xb9, 0xd9, 0x73,
	0x3f, 0x3b, 0x77, 0xc7, 0x6d, 0x45, 0x96, 0x70, 0x29, 0x15, 0xbf, 0x2f, 0x7e, 0xe2, 0x43, 0x21,
	0xb1, 0x59, 0x8c, 0xfc, 0x14, 0x1c, 0xf6, 0x0d, 0x1f, 0x52, 0x6c, 0xc8, 0x2d, 0xcc, 0xa5, 0x65,
	0x77, 0x5c, 0xef, 0x0b, 0x15, 0xfe, 0x6c, 0x71, 0xb6, 0x8c, 0x56, 0x93, 0xcd, 0xdb, 0xa4, 0xe7,
	0x2a, 0x49, 0x03, 0xa7, 0xf3, 0x93, 0xcd, 0xe4, 0xe0, 0x1c, 0xdf, 0xc2, 0x6c, 0xc8, 0x20, 0x04,
	0xce, 0x2a, 0x6a, 0xa8, 0xf7, 0x7a, 0x99, 0xf9, 0x6f, 0x72, 0x03, 0xc0, 0x2b, 0x6c, 0x0d, 0xdf,
	0x71, 0x54, 0xde, 0xe9, 0x34, 0xeb, 0x21, 0xf1, 0x9f, 0x08, 0x5e, 0xf6, 0x56, 0xd7, 0x52, 0xb4,
	0x1a, 0xc9, 0x57, 0xb8, 0xe2, 0x6d, 0x29, 0x1a, 0xde, 0xd6, 0x45, 0x83, 0x5a, 0xd3, 0x1a, 0xbd,
	0xea, 0x64, 0xf3, 0x6e, 0x60, 0x71, 0xdb, 0x91, 0xbe, 0x07, 0x4e, 0x36, 0xe7, 0x43, 0xc0, 0xad,
	0x2a, 0xac, 0xa9, 0x85, 0x13, 0xd2, 0x86, 0x1a, 0xab, 0xbd, 0x87, 0xd3, 0x55, 0x7f, 0x74, 0x9c,
	0xdc, 0x53, 0xb2, 0x99, 0x18, 0x9c, 0x49, 0x0a, 0xaf, 0x74, 0xf0, 0x28, 0x0d, 0x17, 0xed, 0x41,
	0x69, 0xe4, 0x95, 0xde, 0x0f, 0x94, 0xf2, 0x1e, 0xaf, 0x53, 0x23, 0xfa, 0x11, 0x16, 0x7f, 0x06,
	0xf2, 0x98, 0xe9, 0xc2, 0xd2, 0x87, 0x2c, 0xc2, 0x95, 0x5f, 0x64, 0x3d, 0xc4, 0x45, 0x3e, 0x74,
	0x7a, 0x12, 0x6f, 0x74, 0x1a, 0xaf, 0xbb, 0x12, 0x8d, 0xad, 0xf1, 0x4b, 0x5f, 0x64, 0xfe, 0x3b,
	0x6e, 0x60, 0x7e, 0x92, 0x9b, 0xeb, 0xcc, 0x4e, 0x89, 0xa6, 0x38, 0x34, 0x2a, 0xb4, 0x0d, 0x1c,
	0x96, 0x86, 0x56, 0x7d, 0x80, 0x29, 0xb5, 0x66, 0xef, 0x84, 0x4b, 0x6a, 0xb0, 0xea, 0x14, 0x87,
	0xe0, 0xb1, 0x01, 0xa3, 0x7f, 0x0d, 0xd8, 0x50, 0x98, 0xa6, 0x96, 0xe5, 0x96, 0xe5, 0xa8, 0xee,
	0x79, 0x89, 0x24, 0x85, 0xf1, 0xf1, 0xc6, 0xc9, 0xf5, 0xff, 0xd2, 0x3b, 0x3e, 0x82, 0x37, 0x37,
	0x4f, 0x8d, 0x43, 0x51, 0xe2, 0x67, 0xab, 0xe8, 0x63, 0xc4, 0xce, 0xfd, 0x9b, 0xfa, 0xf4, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x0f, 0x83, 0x78, 0xa3, 0x91, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PubSubServiceClient is the client API for PubSubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubServiceClient interface {
	// Subscribe subscribes to a channel, allowing the subscriber to publish
	// messages over the same channel.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error)
}

type pubSubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPubSubServiceClient(cc grpc.ClientConnInterface) PubSubServiceClient {
	return &pubSubServiceClient{cc}
}

func (c *pubSubServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (PubSubService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubService_serviceDesc.Streams[0], "/pubsub.grpc.PubSubService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceSubscribeClient{stream}
	return x, nil
}

type PubSubService_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type pubSubServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServiceServer is the server API for PubSubService service.
type PubSubServiceServer interface {
	// Subscribe subscribes to a channel, allowing the subscriber to publish
	// messages over the same channel.
	Subscribe(PubSubService_SubscribeServer) error
}

// UnimplementedPubSubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServiceServer struct {
}

func (*UnimplementedPubSubServiceServer) Subscribe(srv PubSubService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterPubSubServiceServer(s *grpc.Server, srv PubSubServiceServer) {
	s.RegisterService(&_PubSubService_serviceDesc, srv)
}

func _PubSubService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubServiceServer).Subscribe(&pubSubServiceSubscribeServer{stream})
}

type PubSubService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type pubSubServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubServiceSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PubSubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.grpc.PubSubService",
	HandlerType: (*PubSubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _PubSubService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/aperturerobotics/bifrost/pubsub/grpc/grpc.proto",
}
