// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/signaling/rpc/client/config.proto (package signaling.rpc.client, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3 } from '@bufbuild/protobuf'
import { Config as Config$1 } from '../../../stream/srpc/client/client_pb.js'
import { Backoff } from '@go/github.com/aperturerobotics/util/backoff/backoff_pb.js'

/**
 * Config configures a client for the Signaling SRPC service.
 *
 * @generated from message signaling.rpc.client.Config
 */
export class Config extends Message<Config> {
  /**
   * SignalingId is the signaling channel ID.
   * Filters which SignalPeer directives will be handled.
   *
   * @generated from field: string signaling_id = 1;
   */
  signalingId = ''

  /**
   * PeerId is the local peer id to use for the client.
   * Can be empty to use any local peer.
   *
   * @generated from field: string peer_id = 2;
   */
  peerId = ''

  /**
   * Client contains srpc.client configuration for the signaling RPC client.
   * The local peer ID is overridden with the peer ID of the looked-up peer.
   *
   * @generated from field: stream.srpc.client.Config client = 3;
   */
  client?: Config$1

  /**
   * ProtocolId overrides the default protocol id for the signaling client.
   * Default: bifrost/signaling
   *
   * @generated from field: string protocol_id = 4;
   */
  protocolId = ''

  /**
   * ServiceId overrides the default service id for the signaling client.
   * Default: signaling.rpc.Signaling
   *
   * @generated from field: string service_id = 5;
   */
  serviceId = ''

  /**
   * Backoff is the backoff config for connecting to the service.
   * If unset, defaults to reasonable defaults.
   *
   * @generated from field: backoff.Backoff backoff = 6;
   */
  backoff?: Backoff

  /**
   * DisableListen disables listening for incoming sessions.
   * If set, we will only call out, not accept incoming sessions.
   * If false, client will emit HandleSignalPeer directives for incoming sessions.
   *
   * @generated from field: bool disable_listen = 7;
   */
  disableListen = false

  constructor(data?: PartialMessage<Config>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'signaling.rpc.client.Config'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'signaling_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'peer_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'client', kind: 'message', T: Config$1 },
    {
      no: 4,
      name: 'protocol_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 5, name: 'service_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'backoff', kind: 'message', T: Backoff },
    {
      no: 7,
      name: 'disable_listen',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Config {
    return new Config().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Config {
    return new Config().fromJsonString(jsonString, options)
  }

  static equals(
    a: Config | PlainMessage<Config> | undefined,
    b: Config | PlainMessage<Config> | undefined,
  ): boolean {
    return proto3.util.equals(Config, a, b)
  }
}
