// @generated by protoc-gen-es-lite unknown with parameter "target=ts,ts_nocheck=false"
// @generated from file github.com/aperturerobotics/bifrost/signaling/rpc/client/config.proto (package signaling.rpc.client, syntax proto3)
/* eslint-disable */

import type { MessageType, PartialFieldInfo } from "@aptre/protobuf-es-lite";
import { createMessageType, Message } from "@aptre/protobuf-es-lite";
import { Config as Config$1 } from "../../../stream/srpc/client/client.pb.js";
import { Backoff } from "../../../../util/backoff/backoff.pb.js";

export const protobufPackage = "signaling.rpc.client";

/**
 * Config configures a client for the Signaling SRPC service.
 *
 * @generated from message signaling.rpc.client.Config
 */
export type Config = Message<{
  /**
   * SignalingId is the signaling channel ID.
   * Filters which SignalPeer directives will be handled.
   *
   * @generated from field: string signaling_id = 1;
   */
  signalingId?: string;
  /**
   * PeerId is the local peer id to use for the client.
   * Can be empty to use any local peer.
   *
   * @generated from field: string peer_id = 2;
   */
  peerId?: string;
  /**
   * Client contains srpc.client configuration for the signaling RPC client.
   * The local peer ID is overridden with the peer ID of the looked-up peer.
   *
   * @generated from field: stream.srpc.client.Config client = 3;
   */
  client?: Config$1;
  /**
   * ProtocolId overrides the default protocol id for the signaling client.
   * Default: bifrost/signaling
   *
   * @generated from field: string protocol_id = 4;
   */
  protocolId?: string;
  /**
   * ServiceId overrides the default service id for the signaling client.
   * Default: signaling.rpc.Signaling
   *
   * @generated from field: string service_id = 5;
   */
  serviceId?: string;
  /**
   * Backoff is the backoff config for connecting to the service.
   * If unset, defaults to reasonable defaults.
   *
   * @generated from field: backoff.Backoff backoff = 6;
   */
  backoff?: Backoff;
  /**
   * DisableListen disables listening for incoming sessions.
   * If set, we will only call out, not accept incoming sessions.
   * If false, client will emit HandleSignalPeer directives for incoming sessions.
   *
   * @generated from field: bool disable_listen = 7;
   */
  disableListen?: boolean;

}>;

export const Config: MessageType<Config> = createMessageType(
  {
    typeName: "signaling.rpc.client.Config",
    fields: [
        { no: 1, name: "signaling_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "peer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "client", kind: "message", T: () => Config$1 },
        { no: 4, name: "protocol_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 6, name: "backoff", kind: "message", T: () => Backoff },
        { no: 7, name: "disable_listen", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    ] as readonly PartialFieldInfo[],
    packedByDefault: true,
  },
);

