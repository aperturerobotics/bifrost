syntax = "proto3";
package signaling.rpc;

import "github.com/aperturerobotics/bifrost/peer/peer.proto";

// Signaling is a service which allows peers to signal each other via a RPC server.
service Signaling {
  // Listen waits for messages to be available in our inbox from remote peers.
  rpc Listen(ListenRequest) returns (stream ListenResponse) {}
  // Session signals a remote peer to initiate and maintain a WebRTC session.
  rpc Session(stream SessionRequest) returns (stream SessionResponse) {}
}

// ListenRequest is the body of the Listen request.
message ListenRequest {}

// ListenResponse is a message sent in a stream in response to Listen.
message ListenResponse {
  // Body is the body of the response.
  oneof body {
    // SetPeer marks that a remote peer wants a session.
    // The contents of the string is the encoded peer id of the remote peer.
    string set_peer = 1;
    // ClearPeer marks that a remote peer no longer wants a session.
    // The contents of the string is the encoded peer id of the remote peer.
    string clear_peer = 2;
  }
}

// SessionRequest is a message sent from the client to the server.
message SessionRequest {
  // SessionSeqno is the session sequence number.
  // If this doesn't match the current session no, this pkt will be dropped.
  // This should be zero for the init packet.
  uint64 session_seqno = 1;

  // Body is the body of the request.
  oneof body {
    // Init initializes the session setting which peer to contact.
    SessionInit init = 2;
    // SendMsg sends a signed message to the remote peer.
    // The server will buffer at most one message for the remote peer at a time.
    // If there is an existing pending outgoing message this will overwrite it.
    // Wait for the message received ack before sending again to avoid overwriting.
    // The signature must match the peer id associated with the rpc session.
    SessionMsg send_msg = 3;
    // ClearMsg clears a previously sent message from the outbox.
    // If the sequence number does not match, does nothing.
    uint64 clear_msg = 4;
    // AckMsg acknowledges that the current incoming message was processed.
    // If the id doesn't match the current incoming message seqno, does nothing.
    uint64 ack_msg = 5;
  }
}

// SessionInit is a message to init a Session.
message SessionInit {
  // PeerId is the remote peer id we want to contact.
  string peer_id = 1;
}

// SessionMsg contains a signed message and a sequence number.
message SessionMsg {
  // SignedMsg is the signed message body.
  .peer.SignedMsg signed_msg = 1;
  // Seqno is the message sequence number for clear and ack.
  uint64 seqno = 2;
}

// SessionResponse is a message sent from the server to the client.
message SessionResponse {
  // Body is the body of the request.
  oneof body {
    // Opened indicates the connection w/ the remote peer is open.
    // Contains the session nonce, incremented if the peer re-connected.
    // If this increments, re-send the outgoing message.
    uint64 opened = 1;
    // Closed indicates the connection w/ the remote peer is closed.
    // This is the assumed initial state.
    bool closed = 2;
    // RecvMsg transfers a message sent by the remote peer.
    // Send ACK once the message has been processed.
    SessionMsg recv_msg = 3;
    // ClearMsg clears a message from the remote peer previously sent with recv_msg.
    // This is sent if the remote peer clears their outgoing message before acked.
    uint64 clear_msg = 4;
    // AckMsg confirms that the outgoing message was sent and acked.
    uint64 ack_msg = 5;
  }
}
