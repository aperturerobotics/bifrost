// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0-devel
// 	protoc        v4.25.2
// source: github.com/aperturerobotics/bifrost/signaling/rpc/signaling.proto

package signaling_rpc

import (
	reflect "reflect"
	sync "sync"

	peer "github.com/aperturerobotics/bifrost/peer"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListenRequest is the body of the Listen request.
type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{0}
}

// ListenResponse is a message sent in a stream in response to Listen.
type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the body of the response.
	//
	// Types that are assignable to Body:
	//
	//	*ListenResponse_SetPeer
	//	*ListenResponse_ClearPeer
	Body isListenResponse_Body `protobuf_oneof:"body"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{1}
}

func (m *ListenResponse) GetBody() isListenResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ListenResponse) GetSetPeer() string {
	if x, ok := x.GetBody().(*ListenResponse_SetPeer); ok {
		return x.SetPeer
	}
	return ""
}

func (x *ListenResponse) GetClearPeer() string {
	if x, ok := x.GetBody().(*ListenResponse_ClearPeer); ok {
		return x.ClearPeer
	}
	return ""
}

type isListenResponse_Body interface {
	isListenResponse_Body()
}

type ListenResponse_SetPeer struct {
	// SetPeer marks that a remote peer wants a session.
	// The contents of the string is the encoded peer id of the remote peer.
	SetPeer string `protobuf:"bytes,1,opt,name=set_peer,json=setPeer,proto3,oneof"`
}

type ListenResponse_ClearPeer struct {
	// ClearPeer marks that a remote peer no longer wants a session.
	// The contents of the string is the encoded peer id of the remote peer.
	ClearPeer string `protobuf:"bytes,2,opt,name=clear_peer,json=clearPeer,proto3,oneof"`
}

func (*ListenResponse_SetPeer) isListenResponse_Body() {}

func (*ListenResponse_ClearPeer) isListenResponse_Body() {}

// SessionRequest is a message sent from the client to the server.
type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SessionSeqno is the session sequence number.
	// If this doesn't match the current session no, this pkt will be dropped.
	// This should be zero for the init packet.
	SessionSeqno uint64 `protobuf:"varint,1,opt,name=session_seqno,json=sessionSeqno,proto3" json:"session_seqno,omitempty"`
	// Body is the body of the request.
	//
	// Types that are assignable to Body:
	//
	//	*SessionRequest_Init
	//	*SessionRequest_SendMsg
	//	*SessionRequest_ClearMsg
	//	*SessionRequest_AckMsg
	Body isSessionRequest_Body `protobuf_oneof:"body"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *SessionRequest) GetSessionSeqno() uint64 {
	if x != nil {
		return x.SessionSeqno
	}
	return 0
}

func (m *SessionRequest) GetBody() isSessionRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *SessionRequest) GetInit() *SessionInit {
	if x, ok := x.GetBody().(*SessionRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *SessionRequest) GetSendMsg() *SessionMsg {
	if x, ok := x.GetBody().(*SessionRequest_SendMsg); ok {
		return x.SendMsg
	}
	return nil
}

func (x *SessionRequest) GetClearMsg() uint64 {
	if x, ok := x.GetBody().(*SessionRequest_ClearMsg); ok {
		return x.ClearMsg
	}
	return 0
}

func (x *SessionRequest) GetAckMsg() uint64 {
	if x, ok := x.GetBody().(*SessionRequest_AckMsg); ok {
		return x.AckMsg
	}
	return 0
}

type isSessionRequest_Body interface {
	isSessionRequest_Body()
}

type SessionRequest_Init struct {
	// Init initializes the session setting which peer to contact.
	Init *SessionInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type SessionRequest_SendMsg struct {
	// SendMsg sends a signed message to the remote peer.
	// The server will buffer at most one message for the remote peer at a time.
	// If there is an existing pending outgoing message this will overwrite it.
	// Wait for the message received ack before sending again to avoid overwriting.
	// The signature must match the peer id associated with the rpc session.
	SendMsg *SessionMsg `protobuf:"bytes,3,opt,name=send_msg,json=sendMsg,proto3,oneof"`
}

type SessionRequest_ClearMsg struct {
	// ClearMsg clears a previously sent message from the outbox.
	// If the sequence number does not match, does nothing.
	ClearMsg uint64 `protobuf:"varint,4,opt,name=clear_msg,json=clearMsg,proto3,oneof"`
}

type SessionRequest_AckMsg struct {
	// AckMsg acknowledges that the current incoming message was processed.
	// If the id doesn't match the current incoming message seqno, does nothing.
	AckMsg uint64 `protobuf:"varint,5,opt,name=ack_msg,json=ackMsg,proto3,oneof"`
}

func (*SessionRequest_Init) isSessionRequest_Body() {}

func (*SessionRequest_SendMsg) isSessionRequest_Body() {}

func (*SessionRequest_ClearMsg) isSessionRequest_Body() {}

func (*SessionRequest_AckMsg) isSessionRequest_Body() {}

// SessionInit is a message to init a Session.
type SessionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PeerId is the remote peer id we want to contact.
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *SessionInit) Reset() {
	*x = SessionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInit) ProtoMessage() {}

func (x *SessionInit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInit.ProtoReflect.Descriptor instead.
func (*SessionInit) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{3}
}

func (x *SessionInit) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

// SessionMsg contains a signed message and a sequence number.
type SessionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SignedMsg is the signed message body.
	SignedMsg *peer.SignedMsg `protobuf:"bytes,1,opt,name=signed_msg,json=signedMsg,proto3" json:"signed_msg,omitempty"`
	// Seqno is the message sequence number for clear and ack.
	Seqno uint64 `protobuf:"varint,2,opt,name=seqno,proto3" json:"seqno,omitempty"`
}

func (x *SessionMsg) Reset() {
	*x = SessionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMsg) ProtoMessage() {}

func (x *SessionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMsg.ProtoReflect.Descriptor instead.
func (*SessionMsg) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{4}
}

func (x *SessionMsg) GetSignedMsg() *peer.SignedMsg {
	if x != nil {
		return x.SignedMsg
	}
	return nil
}

func (x *SessionMsg) GetSeqno() uint64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

// SessionResponse is a message sent from the server to the client.
type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Body is the body of the request.
	//
	// Types that are assignable to Body:
	//
	//	*SessionResponse_Opened
	//	*SessionResponse_Closed
	//	*SessionResponse_RecvMsg
	//	*SessionResponse_ClearMsg
	//	*SessionResponse_AckMsg
	Body isSessionResponse_Body `protobuf_oneof:"body"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP(), []int{5}
}

func (m *SessionResponse) GetBody() isSessionResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *SessionResponse) GetOpened() uint64 {
	if x, ok := x.GetBody().(*SessionResponse_Opened); ok {
		return x.Opened
	}
	return 0
}

func (x *SessionResponse) GetClosed() bool {
	if x, ok := x.GetBody().(*SessionResponse_Closed); ok {
		return x.Closed
	}
	return false
}

func (x *SessionResponse) GetRecvMsg() *SessionMsg {
	if x, ok := x.GetBody().(*SessionResponse_RecvMsg); ok {
		return x.RecvMsg
	}
	return nil
}

func (x *SessionResponse) GetClearMsg() uint64 {
	if x, ok := x.GetBody().(*SessionResponse_ClearMsg); ok {
		return x.ClearMsg
	}
	return 0
}

func (x *SessionResponse) GetAckMsg() uint64 {
	if x, ok := x.GetBody().(*SessionResponse_AckMsg); ok {
		return x.AckMsg
	}
	return 0
}

type isSessionResponse_Body interface {
	isSessionResponse_Body()
}

type SessionResponse_Opened struct {
	// Opened indicates the connection w/ the remote peer is open.
	// Contains the session nonce, incremented if the peer re-connected.
	// If this increments, re-send the outgoing message.
	Opened uint64 `protobuf:"varint,1,opt,name=opened,proto3,oneof"`
}

type SessionResponse_Closed struct {
	// Closed indicates the connection w/ the remote peer is closed.
	// This is the assumed initial state.
	Closed bool `protobuf:"varint,2,opt,name=closed,proto3,oneof"`
}

type SessionResponse_RecvMsg struct {
	// RecvMsg transfers a message sent by the remote peer.
	// Send ACK once the message has been processed.
	RecvMsg *SessionMsg `protobuf:"bytes,3,opt,name=recv_msg,json=recvMsg,proto3,oneof"`
}

type SessionResponse_ClearMsg struct {
	// ClearMsg clears a message from the remote peer previously sent with recv_msg.
	// This is sent if the remote peer clears their outgoing message before acked.
	ClearMsg uint64 `protobuf:"varint,4,opt,name=clear_msg,json=clearMsg,proto3,oneof"`
}

type SessionResponse_AckMsg struct {
	// AckMsg confirms that the outgoing message was sent and acked.
	AckMsg uint64 `protobuf:"varint,5,opt,name=ack_msg,json=ackMsg,proto3,oneof"`
}

func (*SessionResponse_Opened) isSessionResponse_Body() {}

func (*SessionResponse_Closed) isSessionResponse_Body() {}

func (*SessionResponse_RecvMsg) isSessionResponse_Body() {}

func (*SessionResponse_ClearMsg) isSessionResponse_Body() {}

func (*SessionResponse_AckMsg) isSessionResponse_Body() {}

var File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto protoreflect.FileDescriptor

var file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x62, 0x69,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x72,
	0x70, 0x63, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x62, 0x69, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x71, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x73,
	0x67, 0x12, 0x19, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x26, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0a,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65,
	0x71, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f,
	0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x76,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x19, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x32, 0xa6, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescOnce sync.Once
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescData = file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDesc
)

func file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescGZIP() []byte {
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescOnce.Do(func() {
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescData)
	})
	return file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDescData
}

var file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_goTypes = []interface{}{
	(*ListenRequest)(nil),   // 0: signaling.rpc.ListenRequest
	(*ListenResponse)(nil),  // 1: signaling.rpc.ListenResponse
	(*SessionRequest)(nil),  // 2: signaling.rpc.SessionRequest
	(*SessionInit)(nil),     // 3: signaling.rpc.SessionInit
	(*SessionMsg)(nil),      // 4: signaling.rpc.SessionMsg
	(*SessionResponse)(nil), // 5: signaling.rpc.SessionResponse
	(*peer.SignedMsg)(nil),  // 6: peer.SignedMsg
}
var file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_depIdxs = []int32{
	3, // 0: signaling.rpc.SessionRequest.init:type_name -> signaling.rpc.SessionInit
	4, // 1: signaling.rpc.SessionRequest.send_msg:type_name -> signaling.rpc.SessionMsg
	6, // 2: signaling.rpc.SessionMsg.signed_msg:type_name -> peer.SignedMsg
	4, // 3: signaling.rpc.SessionResponse.recv_msg:type_name -> signaling.rpc.SessionMsg
	0, // 4: signaling.rpc.Signaling.Listen:input_type -> signaling.rpc.ListenRequest
	2, // 5: signaling.rpc.Signaling.Session:input_type -> signaling.rpc.SessionRequest
	1, // 6: signaling.rpc.Signaling.Listen:output_type -> signaling.rpc.ListenResponse
	5, // 7: signaling.rpc.Signaling.Session:output_type -> signaling.rpc.SessionResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_init() }
func file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_init() {
	if File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ListenResponse_SetPeer)(nil),
		(*ListenResponse_ClearPeer)(nil),
	}
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SessionRequest_Init)(nil),
		(*SessionRequest_SendMsg)(nil),
		(*SessionRequest_ClearMsg)(nil),
		(*SessionRequest_AckMsg)(nil),
	}
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SessionResponse_Opened)(nil),
		(*SessionResponse_Closed)(nil),
		(*SessionResponse_RecvMsg)(nil),
		(*SessionResponse_ClearMsg)(nil),
		(*SessionResponse_AckMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_goTypes,
		DependencyIndexes: file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_depIdxs,
		MessageInfos:      file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_msgTypes,
	}.Build()
	File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto = out.File
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_rawDesc = nil
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_goTypes = nil
	file_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto_depIdxs = nil
}
