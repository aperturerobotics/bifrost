// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: github.com/aperturerobotics/bifrost/signaling/rpc/signaling.proto

package signaling_rpc

import (
	context "context"
	errors "errors"

	drpc1 "github.com/planetscale/vtprotobuf/codec/drpc"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto struct{}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return drpc1.Marshal(msg)
}

func (drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return drpc1.Unmarshal(buf, msg)
}

type DRPCSignalingClient interface {
	DRPCConn() drpc.Conn

	Listen(ctx context.Context, in *ListenRequest) (DRPCSignaling_ListenClient, error)
	Session(ctx context.Context) (DRPCSignaling_SessionClient, error)
}

type drpcSignalingClient struct {
	cc drpc.Conn
}

func NewDRPCSignalingClient(cc drpc.Conn) DRPCSignalingClient {
	return &drpcSignalingClient{cc}
}

func (c *drpcSignalingClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcSignalingClient) Listen(ctx context.Context, in *ListenRequest) (DRPCSignaling_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, "/signaling.rpc.Signaling/Listen", drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcSignaling_ListenClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCSignaling_ListenClient interface {
	drpc.Stream
	Recv() (*ListenResponse, error)
}

type drpcSignaling_ListenClient struct {
	drpc.Stream
}

func (x *drpcSignaling_ListenClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcSignaling_ListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcSignaling_ListenClient) RecvMsg(m *ListenResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}

func (c *drpcSignalingClient) Session(ctx context.Context) (DRPCSignaling_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, "/signaling.rpc.Signaling/Session", drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcSignaling_SessionClient{stream}
	return x, nil
}

type DRPCSignaling_SessionClient interface {
	drpc.Stream
	Send(*SessionRequest) error
	Recv() (*SessionResponse, error)
}

type drpcSignaling_SessionClient struct {
	drpc.Stream
}

func (x *drpcSignaling_SessionClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcSignaling_SessionClient) Send(m *SessionRequest) error {
	return x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}

func (x *drpcSignaling_SessionClient) Recv() (*SessionResponse, error) {
	m := new(SessionResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcSignaling_SessionClient) RecvMsg(m *SessionResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}

type DRPCSignalingServer interface {
	Listen(*ListenRequest, DRPCSignaling_ListenStream) error
	Session(DRPCSignaling_SessionStream) error
}

type DRPCSignalingUnimplementedServer struct{}

func (s *DRPCSignalingUnimplementedServer) Listen(*ListenRequest, DRPCSignaling_ListenStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSignalingUnimplementedServer) Session(DRPCSignaling_SessionStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCSignalingDescription struct{}

func (DRPCSignalingDescription) NumMethods() int { return 2 }

func (DRPCSignalingDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/signaling.rpc.Signaling/Listen", drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCSignalingServer).
					Listen(
						in1.(*ListenRequest),
						&drpcSignaling_ListenStream{in2.(drpc.Stream)},
					)
			}, DRPCSignalingServer.Listen, true
	case 1:
		return "/signaling.rpc.Signaling/Session", drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCSignalingServer).
					Session(
						&drpcSignaling_SessionStream{in1.(drpc.Stream)},
					)
			}, DRPCSignalingServer.Session, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterSignaling(mux drpc.Mux, impl DRPCSignalingServer) error {
	return mux.Register(impl, DRPCSignalingDescription{})
}

type DRPCSignaling_ListenStream interface {
	drpc.Stream
	Send(*ListenResponse) error
}

type drpcSignaling_ListenStream struct {
	drpc.Stream
}

func (x *drpcSignaling_ListenStream) Send(m *ListenResponse) error {
	return x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}

type DRPCSignaling_SessionStream interface {
	drpc.Stream
	Send(*SessionResponse) error
	Recv() (*SessionRequest, error)
}

type drpcSignaling_SessionStream struct {
	drpc.Stream
}

func (x *drpcSignaling_SessionStream) Send(m *SessionResponse) error {
	return x.MsgSend(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}

func (x *drpcSignaling_SessionStream) Recv() (*SessionRequest, error) {
	m := new(SessionRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcSignaling_SessionStream) RecvMsg(m *SessionRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_github_com_aperturerobotics_bifrost_signaling_rpc_signaling_proto{})
}
