// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/aperturerobotics/bifrost/util/backoff/backoff.proto

package backoff

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// BackoffKind is the kind of backoff.
type BackoffKind int32

const (
	// BackoffKind_UNKNOWN defaults to BackoffKind_EXPONENTIAL
	BackoffKind_BackoffKind_UNKNOWN BackoffKind = 0
	// BackoffKind_EXPONENTIAL is an exponential backoff.
	BackoffKind_BackoffKind_EXPONENTIAL BackoffKind = 1
	// BackoffKind_CONSTANT is a constant backoff.
	BackoffKind_BackoffKind_CONSTANT BackoffKind = 2
)

var BackoffKind_name = map[int32]string{
	0: "BackoffKind_UNKNOWN",
	1: "BackoffKind_EXPONENTIAL",
	2: "BackoffKind_CONSTANT",
}

var BackoffKind_value = map[string]int32{
	"BackoffKind_UNKNOWN":     0,
	"BackoffKind_EXPONENTIAL": 1,
	"BackoffKind_CONSTANT":    2,
}

func (x BackoffKind) String() string {
	return proto.EnumName(BackoffKind_name, int32(x))
}

func (BackoffKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_716b58ce45aa89bc, []int{0}
}

// Backoff configures a backoff.
type Backoff struct {
	// BackoffKind is the kind of backoff.
	BackoffKind BackoffKind `protobuf:"varint,1,opt,name=backoff_kind,json=backoffKind,proto3,enum=backoff.BackoffKind" json:"backoff_kind,omitempty"`
	// Exponential is the arguments for an exponential backoff.
	Exponential *Exponential `protobuf:"bytes,2,opt,name=exponential,proto3" json:"exponential,omitempty"`
	// Constant is the arugment for a constant backoff.
	Constant             *Constant `protobuf:"bytes,3,opt,name=constant,proto3" json:"constant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Backoff) Reset()         { *m = Backoff{} }
func (m *Backoff) String() string { return proto.CompactTextString(m) }
func (*Backoff) ProtoMessage()    {}
func (*Backoff) Descriptor() ([]byte, []int) {
	return fileDescriptor_716b58ce45aa89bc, []int{0}
}

func (m *Backoff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Backoff.Unmarshal(m, b)
}
func (m *Backoff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Backoff.Marshal(b, m, deterministic)
}
func (m *Backoff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Backoff.Merge(m, src)
}
func (m *Backoff) XXX_Size() int {
	return xxx_messageInfo_Backoff.Size(m)
}
func (m *Backoff) XXX_DiscardUnknown() {
	xxx_messageInfo_Backoff.DiscardUnknown(m)
}

var xxx_messageInfo_Backoff proto.InternalMessageInfo

func (m *Backoff) GetBackoffKind() BackoffKind {
	if m != nil {
		return m.BackoffKind
	}
	return BackoffKind_BackoffKind_UNKNOWN
}

func (m *Backoff) GetExponential() *Exponential {
	if m != nil {
		return m.Exponential
	}
	return nil
}

func (m *Backoff) GetConstant() *Constant {
	if m != nil {
		return m.Constant
	}
	return nil
}

// Exponential is the exponential arguments.
type Exponential struct {
	// InitialInterval is the initial interval in milliseconds.
	// Default: 800ms.
	InitialInterval uint32 `protobuf:"varint,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	// Multiplier is the timing multiplier.
	// Default: 1.8
	Multiplier float32 `protobuf:"fixed32,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// MaxInterval is the maximum timing interval in milliseconds.
	// Default: 20 seconds
	MaxInterval uint32 `protobuf:"varint,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	// RandomizationFactor is the randomization factor.
	// Default: 0
	RandomizationFactor float32 `protobuf:"fixed32,4,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	// MaxElapsedTime if set specifies a maximum time for the backoff, in milliseconds.
	// After this time the backoff and attached process terminates.
	// May be empty, might be ignored.
	MaxElapsedTime       uint32   `protobuf:"varint,5,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exponential) Reset()         { *m = Exponential{} }
func (m *Exponential) String() string { return proto.CompactTextString(m) }
func (*Exponential) ProtoMessage()    {}
func (*Exponential) Descriptor() ([]byte, []int) {
	return fileDescriptor_716b58ce45aa89bc, []int{1}
}

func (m *Exponential) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Exponential.Unmarshal(m, b)
}
func (m *Exponential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Exponential.Marshal(b, m, deterministic)
}
func (m *Exponential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exponential.Merge(m, src)
}
func (m *Exponential) XXX_Size() int {
	return xxx_messageInfo_Exponential.Size(m)
}
func (m *Exponential) XXX_DiscardUnknown() {
	xxx_messageInfo_Exponential.DiscardUnknown(m)
}

var xxx_messageInfo_Exponential proto.InternalMessageInfo

func (m *Exponential) GetInitialInterval() uint32 {
	if m != nil {
		return m.InitialInterval
	}
	return 0
}

func (m *Exponential) GetMultiplier() float32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *Exponential) GetMaxInterval() uint32 {
	if m != nil {
		return m.MaxInterval
	}
	return 0
}

func (m *Exponential) GetRandomizationFactor() float32 {
	if m != nil {
		return m.RandomizationFactor
	}
	return 0
}

func (m *Exponential) GetMaxElapsedTime() uint32 {
	if m != nil {
		return m.MaxElapsedTime
	}
	return 0
}

// Constant contains constant backoff options.
type Constant struct {
	// Interval is the timing to back off, in milliseconds.
	// Defaults to 5 seconds.
	Interval             uint32   `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Constant) Reset()         { *m = Constant{} }
func (m *Constant) String() string { return proto.CompactTextString(m) }
func (*Constant) ProtoMessage()    {}
func (*Constant) Descriptor() ([]byte, []int) {
	return fileDescriptor_716b58ce45aa89bc, []int{2}
}

func (m *Constant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Constant.Unmarshal(m, b)
}
func (m *Constant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Constant.Marshal(b, m, deterministic)
}
func (m *Constant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constant.Merge(m, src)
}
func (m *Constant) XXX_Size() int {
	return xxx_messageInfo_Constant.Size(m)
}
func (m *Constant) XXX_DiscardUnknown() {
	xxx_messageInfo_Constant.DiscardUnknown(m)
}

var xxx_messageInfo_Constant proto.InternalMessageInfo

func (m *Constant) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func init() {
	proto.RegisterEnum("backoff.BackoffKind", BackoffKind_name, BackoffKind_value)
	proto.RegisterType((*Backoff)(nil), "backoff.Backoff")
	proto.RegisterType((*Exponential)(nil), "backoff.Exponential")
	proto.RegisterType((*Constant)(nil), "backoff.Constant")
}

func init() {
	proto.RegisterFile("github.com/aperturerobotics/bifrost/util/backoff/backoff.proto", fileDescriptor_716b58ce45aa89bc)
}

var fileDescriptor_716b58ce45aa89bc = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x51, 0x8b, 0xd3, 0x40,
	0x14, 0x85, 0x4d, 0x57, 0xdd, 0x72, 0xb3, 0xae, 0x71, 0xb6, 0xb0, 0x41, 0x41, 0x6a, 0x1f, 0xa4,
	0x0a, 0x36, 0xa8, 0xa0, 0x6f, 0x42, 0x2d, 0x11, 0x4a, 0x25, 0x95, 0x18, 0xd1, 0x17, 0x09, 0x93,
	0x64, 0xa2, 0x97, 0x66, 0x66, 0xc2, 0x64, 0x22, 0xc1, 0x7f, 0xe4, 0x3f, 0xf2, 0xe7, 0x48, 0xa7,
	0x69, 0x3a, 0xee, 0x53, 0xe6, 0x9c, 0x73, 0xcf, 0xc7, 0x5c, 0x32, 0xf0, 0xee, 0x07, 0xea, 0x9f,
	0x6d, 0xb6, 0xc8, 0x25, 0x0f, 0x68, 0xcd, 0x94, 0x6e, 0x15, 0x53, 0x32, 0x93, 0x1a, 0xf3, 0x26,
	0xc8, 0xb0, 0x54, 0xb2, 0xd1, 0x41, 0xab, 0xb1, 0x0a, 0x32, 0x9a, 0xef, 0x64, 0x59, 0x1e, 0xbf,
	0x8b, 0x5a, 0x49, 0x2d, 0xc9, 0x79, 0x2f, 0x67, 0x7f, 0x1c, 0x38, 0x7f, 0x7f, 0x38, 0x93, 0xb7,
	0x70, 0xd1, 0xdb, 0xe9, 0x0e, 0x45, 0xe1, 0x3b, 0x53, 0x67, 0x7e, 0xf9, 0x6a, 0xb2, 0x38, 0x56,
	0xfb, 0xb9, 0x0d, 0x8a, 0x22, 0x76, 0xb3, 0x93, 0x20, 0x6f, 0xc0, 0x65, 0x5d, 0x2d, 0x05, 0x13,
	0x1a, 0x69, 0xe5, 0x8f, 0xa6, 0xce, 0xdc, 0xb5, 0x7a, 0xe1, 0x29, 0x8b, 0xed, 0x41, 0xf2, 0x02,
	0xc6, 0xb9, 0x14, 0x8d, 0xa6, 0x42, 0xfb, 0x67, 0xa6, 0xf4, 0x60, 0x28, 0xad, 0xfa, 0x20, 0x1e,
	0x46, 0x66, 0x7f, 0x1d, 0x70, 0x2d, 0x16, 0x79, 0x06, 0x1e, 0x0a, 0xdc, 0x1f, 0x53, 0x14, 0x9a,
	0xa9, 0x5f, 0xb4, 0x32, 0x77, 0xbe, 0x17, 0xdf, 0xef, 0xfd, 0x75, 0x6f, 0x93, 0xc7, 0x00, 0xbc,
	0xad, 0x34, 0xd6, 0x15, 0x32, 0x65, 0x2e, 0x38, 0x8a, 0x2d, 0x87, 0x3c, 0x81, 0x0b, 0x4e, 0xbb,
	0x13, 0xe6, 0xcc, 0x60, 0x5c, 0x4e, 0xbb, 0x01, 0xf1, 0x12, 0x26, 0x8a, 0x8a, 0x42, 0x72, 0xfc,
	0x4d, 0x35, 0x4a, 0x91, 0x96, 0x34, 0xd7, 0x52, 0xf9, 0xb7, 0x0d, 0xec, 0xea, 0xbf, 0xec, 0x83,
	0x89, 0xc8, 0x1c, 0xbc, 0x3d, 0x95, 0x55, 0xb4, 0x6e, 0x58, 0x91, 0x6a, 0xe4, 0xcc, 0xbf, 0x63,
	0xc8, 0x97, 0x9c, 0x76, 0xe1, 0xc1, 0x4e, 0x90, 0xb3, 0xd9, 0x53, 0x18, 0x1f, 0x17, 0x26, 0x0f,
	0x61, 0x7c, 0x63, 0x9d, 0x41, 0x3f, 0xff, 0x0e, 0xae, 0xf5, 0x17, 0xc8, 0x35, 0x5c, 0x59, 0x32,
	0xfd, 0x12, 0x6d, 0xa2, 0xed, 0xd7, 0xc8, 0xbb, 0x45, 0x1e, 0xc1, 0xb5, 0x1d, 0x84, 0xdf, 0x3e,
	0x6d, 0xa3, 0x30, 0x4a, 0xd6, 0xcb, 0x8f, 0x9e, 0x43, 0x7c, 0x98, 0xd8, 0xe1, 0x6a, 0x1b, 0x7d,
	0x4e, 0x96, 0x51, 0xe2, 0x8d, 0xb2, 0xbb, 0xe6, 0x75, 0xbc, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x76, 0x10, 0xd2, 0xff, 0x5f, 0x02, 0x00, 0x00,
}
